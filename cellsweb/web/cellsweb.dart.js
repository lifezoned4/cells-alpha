// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Bound closures
$$.BoundClosure$6 = [Z, {"": "BoundClosure;_self,_liblib2$_target,_receiver",
  call$6: function(p0, p1, p2, p3, p4, p5) {
    return this._self[this._liblib2$_target](p0, p1, p2, p3, p4, p5);
  }
}];

$$.BoundClosure$2 = [Z, {"": "BoundClosure;_self,_liblib2$_target,_receiver",
  call$2: function(p0, p1) {
    return this._self[this._liblib2$_target](p0, p1);
  }
}];

$$.Bound__completeError__Future = [P, {"": "BoundClosure;_self,_liblib2$_target,_receiver",
  call$2: function(p0, p1) {
    return this._self[this._liblib2$_target](p0, p1);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  }
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,_liblib2$_target,_receiver",
  call$0: function() {
    return this._self[this._liblib2$_target]();
  }
}];

$$.BoundClosure$1 = [B, {"": "BoundClosure;_self,_liblib2$_target,_receiver",
  call$1: function(p0) {
    return this._self[this._liblib2$_target](p0);
  }
}];

$$.Closure$_processWorkerMessage = [H, {"": "Closure;call$2,$name"}];

$$.Closure$_throwFormatException = [H, {"": "Closure;call$1,$name"}];

$$.Closure$toStringWrapper = [H, {"": "Closure;call$0,$name"}];

$$.Closure$invokeClosure = [H, {"": "Closure;call$5,$name"}];

$$.Closure$typeNameInChrome = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInSafari = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInOpera = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInFirefox = [H, {"": "Closure;call$1,$name"}];

$$.Closure$typeNameInIE = [H, {"": "Closure;call$1,$name"}];

$$.Closure$constructorNameFallback = [H, {"": "Closure;call$1,$name"}];

$$.Closure$callDartFunctionWith1Arg = [H, {"": "Closure;call$2,$name"}];

$$.Closure$getHeight = [B, {"": "Closure;call$1,$name"}];

$$.Closure$getWidth = [B, {"": "Closure;call$1,$name"}];

$$.Closure$getDepth = [B, {"": "Closure;call$1,$name"}];

$$.Closure$getOffsetX = [B, {"": "Closure;call$1,$name"}];

$$.Closure$getOffsetY = [B, {"": "Closure;call$1,$name"}];

$$.Closure$getOffsetZ = [B, {"": "Closure;call$1,$name"}];

$$.Closure$main = [B, {"": "Closure;call$0,$name"}];

$$.Closure$_asyncRunCallback = [P, {"": "Closure;call$0,$name"}];

$$.Closure$_defaultEquals = [P, {"": "Closure;call$2,$name"}];

$$.Closure$_defaultHashCode = [P, {"": "Closure;call$1,$name"}];

$$.Closure$identical = [P, {"": "Closure;call$2,$name"}];

$$.Closure$runVarXY_1 = [B, {"": "Closure;call$4,$name"}];

$$.Closure$runVarXY_6 = [B, {"": "Closure;call$4,$name"}];

$$.Closure$runVarZY_2 = [B, {"": "Closure;call$4,$name"}];

$$.Closure$runVarZY_5 = [B, {"": "Closure;call$4,$name"}];

$$.Closure$runVarXZ_3 = [B, {"": "Closure;call$4,$name"}];

$$.Closure$runVarZX_4 = [B, {"": "Closure;call$4,$name"}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.interfaces) init.interfaces = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.interfaces[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = object[init.dispatchPropertyName];
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = H.lookupDispatchRecord(object);
  if (record == null)
    return C.C_UnknownJavaScriptObject;
  Object.defineProperty(Object.getPrototypeOf(object), init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return J.getNativeInterceptor(object);
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray0: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("add"));
    receiver.push(value);
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
      this.add$1(receiver, t1.get$current());
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    var t1;
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length) {
      t1 = receiver.length;
      throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + t1));
    }
    if (end < start || end > receiver.length) {
      t1 = receiver.length;
      throw H.wrapException(new P.RangeError("value " + end + " not in range " + H.S(start) + ".." + t1));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(new P.StateError("No elements"));
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw H.wrapException(new P.ArgumentError(newLength));
    if (newLength < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(newLength)));
    if (!!receiver.fixed$length)
      H.throwExpression(new P.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(new P.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    receiver[index] = value;
  },
  $isList: true,
  $asInterceptor: null,
  $asList: null,
  $isList: true
},

JSMutableArray: {"": "JSArray0;", $isJSMutableArray: true,
  $asJSArray0: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    if (typeof b !== "number")
      throw H.iae(b);
    if (this.$lt(receiver, b))
      return -1;
    else if (this.$gt(receiver, b))
      return 1;
    else if (isNaN(receiver)) {
      if (J.get$isNaN$n(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw H.wrapException(new P.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw H.wrapException(new P.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  floor$0: function(receiver) {
    var t1, truncated;
    t1 = Math.floor(receiver);
    if (isNaN(t1))
      H.throwExpression(new P.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      H.throwExpression(new P.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  round$0: function(receiver) {
    var t1, truncated;
    t1 = this.roundToDouble$0(receiver);
    if (isNaN(t1))
      H.throwExpression(new P.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      H.throwExpression(new P.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toRadixString$1: function(receiver, radix) {
    if (radix == null)
      return this.toRadixString$1$bailout(1, radix, receiver);
    if (radix < 2 || radix > 36)
      throw H.wrapException(new P.RangeError(radix));
    return receiver.toString(radix);
  },
  toRadixString$1$bailout: function(state0, radix, receiver) {
    if (typeof radix !== "number")
      H.throwExpression(new P.ArgumentError(radix));
    if (radix == null)
      throw radix.$lt();
    if (radix < 2 || radix > 36)
      throw H.wrapException(new P.RangeError(radix));
    return receiver.toString(radix);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result;
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return this.toInt$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    if (other < 0)
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    other = other > 31 ? 31 : other;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;",
  $not: function(receiver) {
    return ~receiver >>> 0;
  },
  $isdouble: true,
  $isnum: true,
  $isint: true
},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number")
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    if (index >= receiver.length)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (typeof endIndex !== "number")
      return this.substring$2$bailout(1, startIndex, endIndex, receiver);
    if (startIndex < 0)
      throw H.wrapException(new P.RangeError("value " + startIndex));
    if (startIndex > endIndex)
      throw H.wrapException(new P.RangeError("value " + startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(new P.RangeError("value " + H.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$2$bailout: function(state0, startIndex, endIndex, receiver) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      H.throwExpression(new P.ArgumentError(endIndex));
    if (startIndex < 0)
      throw H.wrapException(new P.RangeError("value " + startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(new P.RangeError("value " + startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(new P.RangeError("value " + H.S(endIndex)));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    return receiver[index];
  },
  $isString: true
},

_CodeUnits: {"": "UnmodifiableListBase;_string",
  get$length: function(_) {
    return this._string.length;
  },
  $index: function(_, i) {
    var t1 = this._string;
    if (typeof i !== "number")
      H.throwExpression(new P.ArgumentError(i));
    if (typeof i !== "number")
      throw i.$lt();
    if (i < 0)
      H.throwExpression(new P.RangeError("value " + H.S(i)));
    if (i >= t1.length)
      H.throwExpression(new P.RangeError("value " + H.S(i)));
    return t1.charCodeAt(i);
  },
  $asList: function() {
    return [J.JSInt];
  }
}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(new P.UnsupportedError("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(new P.UnsupportedError("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      t1 = $globalState.topEventLoop;
      t1.enqueue$3;
      t1.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.makeLiteralMap(["command", "print", "msg", msg]));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        H.Primitives_printString(J.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.makeLiteralMap(["command", "log", "msg", msg]));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(new P._ExceptionImplementation(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = P._Isolate_port();
  t1.toSendPort$0;
  J.send$2$x(replyTo, "spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id));
  topLevel.call$0();
},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.makeLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "functionName", functionName])));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isIsolateSink && J.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return J.$add$ns(J.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result, t1;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null) {
        t1 = old;
        t1._setGlobals$0;
        $ = t1.get$isolateStatics();
      }
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(new P._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._liblib1$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._liblib1$_length === 0)
      throw H.wrapException(new P._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true) {
        t2 = t1.isolates;
        t2.get$isEmpty;
        t2 = t2._liblib1$_length === 0 && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.makeLiteralMap(["command", "close"]));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.makeLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)]));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    if (!this.this_0.runIteration$0())
      return;
    t1 = new P._ZoneTimer($.get$_Zone__current(), this, null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._timer = P._createTimer(C.Duration_0, t1.get$_run());
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    var t1;
    if (replyTo != null) {
      t1 = J.getInterceptor(replyTo);
      t1 = (typeof replyTo !== "object" || replyTo === null || !t1.$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !t1.$is_WorkerSendPort) && true;
    } else
      t1 = false;
    if (t1)
      throw H.wrapException(new P._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var t1, completer, port;
    t1 = null;
    completer = new P._AsyncCompleter(P._Future$(t1));
    H.setRuntimeTypeInfo(completer, [t1]);
    port = H.ReceivePortImpl$();
    this.send$2(this, message, new H._NativeJsSendPort(port, $globalState.currentContext.id));
    port._callback = new H._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2;
    t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = J.getInterceptor(value);
    t2 = this.completer_0;
    if (typeof value === "object" && value !== null && !!t1.$isException) {
      t1 = t2.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(value, null);
    } else {
      t1 = t2.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncComplete$1(value);
    }
  }
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    H._waitForPendingPorts([message, replyTo], new H._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t2.get$_isolateId();
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = H._serializeMessage(t1.msg_0);
      t1.reply_1 = H._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t3.enqueue$3;
    t3.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
        t2.reply_1 = H._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    H._waitForPendingPorts([message, replyTo], new H._WorkerSendPort_send_closure(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort)
      t1 = J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return J.$xor$n(J.$xor$n(J.$shl$n(this._workerId, 16), J.$shl$n(this._isolateId, 8)), this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = H._serializeMessage(H.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  ReceivePortImpl$0: function() {
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, new H._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, new H._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    var t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && !!t1.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!t1.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    var t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && !!t1.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!t1.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var result = new H.JsIsolateSink(false, this.visitSendPort$1(sink._port));
    result._isClosed = sink._isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    t1 = J.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new H.JsIsolateSink(false, port);
    result._isClosed = t1.$index(list, 2);
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return C.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !H.isJsIndexable(list, list[init.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = P.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw H.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw H.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  }
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
    t1 = map.get$values(map);
    return ["map", id, keys, this._serializeList$1(t1.toList$0(t1))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !H.isJsIndexable(list, list[init.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = P.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw H.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw H.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    for (t2 = result.length, i = 0; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !H.isJsIndexable(dartList, dartList[init.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw H.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw H.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !H.isJsIndexable(keys, keys[init.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !H.isJsIndexable(values, values[init.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw H.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw H.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values) {
    switch (state0) {
      case 0:
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t1 = J.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = J.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw H.iae(len);
        t2 = J.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.enqueue$3;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0.set$_handle(null);
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(new P.ArgumentError(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(string);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives__throwFormatException: function(string) {
  throw H.wrapException(new P.FormatException(string));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1;
  if (handleError == null)
    handleError = H.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (match != null) {
    t1 = match.length;
    if (2 >= t1)
      throw H.ioore(2);
    if (match[2] != null)
      return parseInt(source, 16);
    if (3 >= t1)
      throw H.ioore(3);
    if (match[3] != null)
      return parseInt(source, 10);
    return handleError.call$1(source);
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, 10);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = H.constructorNameFallback(J.getInterceptor(object));
  if (J.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = J.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = H.getRuntimeTypeInfo(object);
  return H.S($name) + H.joinArguments(t1, 0);
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(new P.ArgumentError(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(new P.ArgumentError(i));
    if (i < 0)
      throw H.wrapException(new P.ArgumentError(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(new P.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(new P.RangeError("value " + H.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = J.get$iterator$ax(keyValuePairs);
  result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw H.wrapException(new P._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, H.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return type[0].builtin$cls + H.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

typeNameInSafari: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInOpera: function(obj) {
  return H.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = H.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  var getTagFunction = H.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return H.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return H.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return H.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return H.typeNameInFirefox$closure;
  else if (userAgent.indexOf("Trident/") !== -1)
    return H.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return H.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return H.typeNameInSafari$closure;
  else
    return H.constructorNameFallback$closure;
},

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new H.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})(H.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  H.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  H.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsExtended: function(tags, interceptorClass, subclassInterceptorClasses) {
  var classes, t1, i;
  if ($.interceptorToTag == null)
    $.interceptorToTag = [];
  classes = subclassInterceptorClasses;
  for (t1 = classes.length, i = 0; i < t1; ++i) {
    $.interceptorToTag.push(classes[i]);
    $.interceptorToTag.push(tags);
  }
  H.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.get$getTypeNameOf().call$1(obj);
  interceptor = H.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = H.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = H.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return H.makeLeafDispatchRecord(interceptor);
  else
    return J.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = P.StringBuffer$("");
      $length = receiver.length;
      result.write$1(to);
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  }
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,_liblib2$_target,_receiver",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this._liblib2$_target === other._liblib2$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._self) + J.get$hashCode$(this._liblib2$_target) + J.get$hashCode$(this._receiver) & 0x3ffffff;
  },
  $isBoundClosure: true
},

TypeImpl: {"": "Object;_typeName,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = init.mangledGlobalNames[unmangledName];
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0",
  call$1: function(object) {
    return this.newGetTagJSFunction_0(object);
  }
}}],
["bignum", "package:bignum/bignum.dart", , Z, {
Classic: {"": "Object;m",
  convert$1: function(x) {
    if (J.$lt$n(x.s, 0) || J.$ge$n(x.compareTo$1(x, this.m), 0))
      return x.mod$1(this.m);
    else
      return x;
  },
  revert$1: function(x) {
    return x;
  },
  mulTo$3: function(x, y, r) {
    x.multiplyTo$2(y, r);
    r.divRemTo$3(this.m, null, r);
  },
  sqrTo$2: function(x, r) {
    x.squareTo$1(r);
    r.divRemTo$3(this.m, null, r);
  }
},

Montgomery: {"": "Object;m,mp,mpl,mph,um,mt2",
  convert$1: function(x) {
    var r, t1, t2, r0;
    r = Z.BigInteger$(null, null, null);
    t1 = J.$lt$n(x.s, 0) ? x.negate_op$0() : x;
    t2 = this.m;
    t1.dlShiftTo$2(t2.t, r);
    r.divRemTo$3(t2, null, r);
    if (J.$lt$n(x.s, 0)) {
      r0 = Z.BigInteger$(null, null, null);
      r0.fromInt$1(0);
      t1 = J.$gt$n(r.compareTo$1(r, r0), 0);
    } else
      t1 = false;
    if (t1)
      t2.subTo$2(r, r);
    return r;
  },
  revert$1: function(x) {
    var r = Z.BigInteger$(null, null, null);
    x.copyTo$1(r);
    this.reduce$1(this, r);
    return r;
  },
  reduce$1: function(_, x) {
    var x_array, t1, t2, t3, i, j, t4, u0;
    x_array = x.get$array();
    while (true) {
      t1 = x.get$t();
      t2 = this.mt2;
      if (t1 == null)
        throw t1.$le();
      if (t2 == null)
        throw H.iae(t2);
      if (!(t1 <= t2))
        break;
      t2 = t1 + 1;
      x.set$t(t2);
      x_array.$indexSet;
      t3 = x_array.data;
      if (t1 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t2);
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw H.ioore(t1);
      t3[t1] = 0;
    }
    t1 = this.m;
    i = 0;
    while (true) {
      t2 = t1.t;
      if (t2 == null)
        throw H.iae(t2);
      if (!(i < t2))
        break;
      x_array.$index;
      t2 = x_array.data;
      if (i >= t2.length)
        throw H.ioore(i);
      j = J.$and$n(t2[i], 32767);
      t3 = J.getInterceptor$n(j);
      t4 = t3.$mul(j, this.mpl);
      t3 = t3.$mul(j, this.mph);
      if (i >= t2.length)
        throw H.ioore(i);
      u0 = J.$and$n(J.$add$ns(t4, J.$shl$n(J.$and$n(J.$add$ns(t3, J.$mul$n(J.$shr$n(t2[i], 15), this.mpl)), this.um), 15)), $.BigInteger_BI_DM);
      t3 = t1.t;
      if (t3 == null)
        throw H.iae(t3);
      j = i + t3;
      if (j >>> 0 !== j || j >= t2.length)
        throw H.ioore(j);
      t3 = J.$add$ns(t2[j], t1.am$6(0, u0, x, i, 0, t3));
      if (j > t2.length - 1)
        C.JSArray_methods.set$length(t2, j + 1);
      if (j >= t2.length)
        throw H.ioore(j);
      t2[j] = t3;
      while (true) {
        if (j >= t2.length)
          throw H.ioore(j);
        if (!J.$ge$n(t2[j], $.BigInteger_BI_DV))
          break;
        if (j >= t2.length)
          throw H.ioore(j);
        t3 = J.$sub$n(t2[j], $.BigInteger_BI_DV);
        if (j > t2.length - 1)
          C.JSArray_methods.set$length(t2, j + 1);
        t4 = t2.length;
        if (j >= t4)
          throw H.ioore(j);
        t2[j] = t3;
        ++j;
        if (j >= t4)
          throw H.ioore(j);
        t4 = J.$add$ns(t2[j], 1);
        if (j > t2.length - 1)
          C.JSArray_methods.set$length(t2, j + 1);
        if (j >= t2.length)
          throw H.ioore(j);
        t2[j] = t4;
      }
      ++i;
    }
    t2 = J.getInterceptor$n(x);
    t2.clamp$0(x);
    x.drShiftTo$2(t1.t, x);
    if (J.$ge$n(t2.compareTo$1(x, t1), 0))
      x.subTo$2(t1, x);
  },
  sqrTo$2: function(x, r) {
    x.squareTo$1(r);
    this.reduce$1(this, r);
  },
  mulTo$3: function(x, y, r) {
    x.multiplyTo$2(y, r);
    this.reduce$1(this, r);
  },
  Montgomery$1: function(m) {
    var t1, t2;
    t1 = this.m;
    this.mp = t1.invDigit$0();
    this.mpl = J.$and$n(this.mp, 32767);
    this.mph = J.$shr$n(this.mp, 15);
    t2 = $.BigInteger_BI_DB;
    if (t2 == null)
      throw t2.$sub();
    this.um = C.JSInt_methods.$shl(1, t2 - 15) - 1;
    t1 = t1.t;
    if (t1 == null)
      throw H.iae(t1);
    this.mt2 = 2 * t1;
  },
  static: {
Montgomery$: function(m) {
  var t1 = new Z.Montgomery(m, null, null, null, null, null);
  t1.Montgomery$1(m);
  return t1;
}}

},

Barrett: {"": "Object;m,r2,q3,mu",
  convert$1: function(x) {
    var t1, t2, r;
    if (!J.$lt$n(x.s, 0)) {
      t1 = x.t;
      t2 = this.m.t;
      if (t2 == null)
        throw H.iae(t2);
      if (t1 == null)
        throw t1.$gt();
      t2 = t1 > 2 * t2;
      t1 = t2;
    } else
      t1 = true;
    if (t1)
      return x.mod$1(this.m);
    else if (J.$lt$n(x.compareTo$1(x, this.m), 0))
      return x;
    else {
      r = Z.BigInteger$(null, null, null);
      x.copyTo$1(r);
      this.reduce$1(this, r);
      return r;
    }
  },
  revert$1: function(x) {
    return x;
  },
  reduce$1: function(_, x) {
    var t1, t2, t3, t4;
    t1 = this.m;
    t2 = t1.t;
    if (t2 == null)
      throw t2.$sub();
    x.drShiftTo$2(t2 - 1, this.r2);
    t2 = x.get$t();
    t3 = t1.t;
    if (t3 == null)
      throw t3.$add();
    ++t3;
    if (t2 == null)
      throw t2.$gt();
    if (t2 > t3) {
      x.set$t(t3);
      J.clamp$0$n(x);
    }
    t2 = this.mu;
    t3 = this.r2;
    t4 = t1.t;
    if (t4 == null)
      throw t4.$add();
    t2.multiplyUpperTo$3(t3, t4 + 1, this.q3);
    t4 = this.q3;
    t3 = t1.t;
    if (t3 == null)
      throw t3.$add();
    t1.multiplyLowerTo$3(t4, t3 + 1, this.r2);
    for (t2 = J.getInterceptor$ns(x); J.$lt$n(t2.compareTo$1(x, this.r2), 0);) {
      t3 = t1.t;
      if (t3 == null)
        throw t3.$add();
      x.dAddOffset$2(1, t3 + 1);
    }
    x.subTo$2(this.r2, x);
    for (; J.$ge$n(t2.compareTo$1(x, t1), 0);)
      x.subTo$2(t1, x);
  },
  sqrTo$2: function(x, r) {
    x.squareTo$1(r);
    this.reduce$1(this, r);
  },
  mulTo$3: function(x, y, r) {
    x.multiplyTo$2(y, r);
    this.reduce$1(this, r);
  },
  Barrett$1: function(m) {
    var r, t1, t2;
    this.r2 = Z.BigInteger$(null, null, null);
    this.q3 = Z.BigInteger$(null, null, null);
    r = Z.BigInteger$(null, null, null);
    r.fromInt$1(1);
    t1 = this.m;
    t2 = t1.t;
    if (t2 == null)
      throw H.iae(t2);
    r.dlShiftTo$2(2 * t2, this.r2);
    this.mu = this.r2.divide$1(t1);
  },
  static: {
Barrett$: function(m) {
  var t1 = new Z.Barrett(m, null, null, null);
  t1.Barrett$1(m);
  return t1;
}}

},

JSArray: {"": "Object;data>",
  $index: function(_, index) {
    var t1 = this.data;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1;
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, value);
    t1 = this.data;
    if (index > t1.length - 1)
      C.JSArray_methods.set$length(t1, index + 1);
    if (index < 0 || index >= t1.length)
      throw H.ioore(index);
    t1[index] = value;
    return value;
  },
  $$indexSet$bailout: function(state0, index, value) {
    var t1, t2;
    t1 = this.data;
    t2 = J.getInterceptor$n(index);
    if (t2.$gt(index, t1.length - 1))
      C.JSArray_methods.set$length(t1, t2.$add(index, 1));
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(index);
    t1[index] = value;
    return value;
  }
},

BigInteger: {"": "Object;_lowprimes,_lplim,canary,_j_lm,array<,am,BI_RM,BI_RC,t@,s@,_debugging",
  am$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.am.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  },
  _am3$6: function(i, x, w, j, c, n) {
    var this_array, w_array, t1, xl, xh, l, i0, h, m, t2, t3, t4, j0;
    if (i !== (i | 0))
      return this._am3$6$bailout(1, i, x, w, j, c, n);
    if (j !== (j | 0))
      return this._am3$6$bailout(1, i, x, w, j, c, n);
    if (typeof c !== "number")
      return this._am3$6$bailout(1, i, x, w, j, c, n);
    if (typeof n !== "number")
      return this._am3$6$bailout(1, i, x, w, j, c, n);
    this_array = this.array;
    w_array = w.get$array();
    t1 = J.getInterceptor$n(x);
    xl = t1.toInt$0(x) & 16383;
    xh = C.JSNumber_methods.$shr(t1.toInt$0(x), 14);
    for (; --n, n >= 0; j = j0, i = i0) {
      this_array.$index;
      t1 = this_array.data;
      if (i < 0 || i >= t1.length)
        throw H.ioore(i);
      l = J.$and$n(t1[i], 16383);
      i0 = i + 1;
      if (i >= t1.length)
        throw H.ioore(i);
      h = J.$shr$n(t1[i], 14);
      if (typeof l !== "number")
        throw H.iae(l);
      t1 = J.$mul$n(h, xl);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      m = xh * l + t1;
      w_array.$index;
      t1 = w_array.data;
      t2 = t1.length;
      if (j < 0 || j >= t2)
        throw H.ioore(j);
      t3 = t1[j];
      if (typeof t3 !== "number")
        throw H.iae(t3);
      l = xl * l + ((m & 16383) << 14 >>> 0) + t3 + c;
      t3 = C.JSNumber_methods.$shr(l, 28);
      t4 = C.JSNumber_methods.$shr(m, 14);
      if (typeof h !== "number")
        throw H.iae(h);
      c = t3 + t4 + xh * h;
      j0 = j + 1;
      if (j > t2 - 1)
        C.JSArray_methods.set$length(t1, j0);
      if (j >= t1.length)
        throw H.ioore(j);
      t1[j] = l & 268435455;
    }
    return c;
  },
  _am3$6$bailout: function(state0, i, x, w, j, c, n) {
    var this_array, w_array, t1, xl, xh, l, i0, h, m, t2, t3, t4, j0;
    this_array = this.array;
    w_array = w.get$array();
    t1 = J.getInterceptor$n(x);
    xl = t1.toInt$0(x) & 16383;
    xh = C.JSNumber_methods.$shr(t1.toInt$0(x), 14);
    for (; n = J.$sub$n(n, 1), J.$ge$n(n, 0); j = j0, i = i0) {
      this_array.$index;
      t1 = this_array.data;
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(i);
      l = J.$and$n(t1[i], 16383);
      i0 = i + 1;
      if (i >= t1.length)
        throw H.ioore(i);
      h = J.$shr$n(t1[i], 14);
      if (typeof l !== "number")
        throw H.iae(l);
      t1 = J.$mul$n(h, xl);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      m = xh * l + t1;
      w_array.$index;
      t1 = w_array.data;
      t2 = t1.length;
      if (j >>> 0 !== j || j >= t2)
        throw H.ioore(j);
      t3 = t1[j];
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (typeof c !== "number")
        throw H.iae(c);
      l = xl * l + ((m & 16383) << 14 >>> 0) + t3 + c;
      t3 = C.JSNumber_methods.$shr(l, 28);
      t4 = C.JSNumber_methods.$shr(m, 14);
      if (typeof h !== "number")
        throw H.iae(h);
      c = t3 + t4 + xh * h;
      j0 = j + 1;
      if (j > t2 - 1)
        C.JSArray_methods.set$length(t1, j0);
      if (j >= t1.length)
        throw H.ioore(j);
      t1[j] = l & 268435455;
    }
    return c;
  },
  get$_am3: function() {
    return new Z.BoundClosure$6(this, "_am3$6", null);
  },
  _setupEngine$2: function(fn, bits) {
    var t1, t2;
    this.am = fn;
    $.BigInteger_dbits = bits;
    $.BigInteger_BI_DB = $.BigInteger_dbits;
    t1 = $.BigInteger_dbits;
    if (t1 == null)
      throw H.iae(t1);
    $.BigInteger_BI_DM = C.JSInt_methods.$shl(1, t1) - 1;
    t1 = $.BigInteger_dbits;
    if (t1 == null)
      throw H.iae(t1);
    $.BigInteger_BI_DV = C.JSInt_methods.$shl(1, t1);
    $.BigInteger_BI_FP = 52;
    t1 = $.BigInteger_BI_FP;
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    $.BigInteger_BI_FV = Math.pow(2, t1);
    t1 = $.BigInteger_BI_FP;
    t2 = $.BigInteger_dbits;
    if (t1 == null)
      throw t1.$sub();
    if (t2 == null)
      throw H.iae(t2);
    $.BigInteger_BI_F1 = t1 - t2;
    t2 = $.BigInteger_dbits;
    if (t2 == null)
      throw H.iae(t2);
    t1 = $.BigInteger_BI_FP;
    if (t1 == null)
      throw H.iae(t1);
    $.BigInteger_BI_F2 = 2 * t2 - t1;
  },
  _setupDigitConversions$0: function() {
    var rr, vv, t1, rr0;
    this.BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    this.BI_RC = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    rr = C.JSString_methods.codeUnitAt$1("0", 0);
    for (vv = 0; vv <= 9; ++vv, rr = rr0) {
      t1 = this.BI_RC;
      rr0 = rr + 1;
      t1.$indexSet(t1, rr, vv);
    }
    rr = C.JSString_methods.codeUnitAt$1("a", 0);
    for (vv = 10; vv < 36; ++vv, rr = rr0) {
      t1 = this.BI_RC;
      rr0 = rr + 1;
      t1.$indexSet(t1, rr, vv);
    }
    rr = C.JSString_methods.codeUnitAt$1("A", 0);
    for (vv = 10; vv < 36; ++vv, rr = rr0) {
      t1 = this.BI_RC;
      rr0 = rr + 1;
      t1.$indexSet(t1, rr, vv);
    }
  },
  copyTo$1: function(r) {
    var this_array, r_array, t1, i, t2;
    this_array = this.array;
    r_array = r.get$array();
    t1 = this.t;
    if (t1 == null)
      throw t1.$sub();
    i = t1 - 1;
    if (i !== (i | 0))
      return this.copyTo$1$bailout(1, r, i, this_array, r_array);
    for (; i >= 0; --i) {
      this_array.$index;
      t1 = this_array.data;
      if (i >= t1.length)
        throw H.ioore(i);
      t1 = t1[i];
      r_array.$indexSet;
      t2 = r_array.data;
      if (i > t2.length - 1)
        C.JSArray_methods.set$length(t2, i + 1);
      if (i >= t2.length)
        throw H.ioore(i);
      t2[i] = t1;
    }
    r.set$t(this.t);
    r.set$s(this.s);
  },
  copyTo$1$bailout: function(state0, r, i, this_array, r_array) {
    switch (state0) {
      case 0:
        this_array = this.array;
        r_array = r.get$array();
        t1 = this.t;
        if (t1 == null)
          throw t1.$sub();
        i = t1 - 1;
      case 1:
        var t1, t2;
        state0 = 0;
        for (; i >= 0; --i) {
          this_array.$index;
          t1 = this_array.data;
          if (i >>> 0 !== i || i >= t1.length)
            throw H.ioore(i);
          t1 = t1[i];
          r_array.$indexSet;
          t2 = r_array.data;
          if (i > t2.length - 1)
            C.JSArray_methods.set$length(t2, i + 1);
          if (i >= t2.length)
            throw H.ioore(i);
          t2[i] = t1;
        }
        r.set$t(this.t);
        r.set$s(this.s);
    }
  },
  fromInt$1: function(x) {
    var this_array, t1;
    this_array = this.array;
    this.t = 1;
    this.s = x < 0 ? -1 : 0;
    if (x > 0)
      this_array.$indexSet(this_array, 0, x);
    else if (x < -1) {
      t1 = $.BigInteger_BI_DV;
      if (t1 == null)
        throw H.iae(t1);
      this_array.$indexSet(this_array, 0, x + t1);
    } else
      this.t = 0;
  },
  fromString$2: function(s, b) {
    var this_array, k, i, t1, i0, mi, sh, x, t2, c, t3, t4, t5, t6, r;
    this_array = this.array;
    if (b === 16)
      k = 4;
    else if (b === 8)
      k = 3;
    else if (b === 256)
      k = 8;
    else if (b === 2)
      k = 1;
    else if (b === 32)
      k = 5;
    else {
      if (b === 4)
        ;
      else {
        this.fromRadix$2(s, b);
        return;
      }
      k = 2;
    }
    this.t = 0;
    this.s = 0;
    i = s.length;
    for (t1 = k === 8, i0 = i, mi = false, sh = 0; --i0, i0 >= 0;) {
      if (t1)
        x = C.JSString_methods.$and(s[i0], 255);
      else {
        t2 = this.BI_RC;
        if (i0 >= i)
          H.throwExpression(new P.RangeError("value " + i0));
        c = t2.$index(t2, s.charCodeAt(i0));
        x = c == null ? -1 : c;
      }
      t2 = J.getInterceptor$n(x);
      if (t2.$lt(x, 0)) {
        if (s[i0] === "-")
          mi = true;
        continue;
      }
      if (sh === 0) {
        t2 = this.t;
        if (t2 == null)
          throw t2.$add();
        t3 = t2 + 1;
        this.t = t3;
        this_array.$indexSet;
        t4 = this_array.data;
        if (t2 > t4.length - 1)
          C.JSArray_methods.set$length(t4, t3);
        if (t2 >>> 0 !== t2 || t2 >= t4.length)
          throw H.ioore(t2);
        t4[t2] = x;
      } else {
        t3 = $.BigInteger_BI_DB;
        if (t3 == null)
          throw H.iae(t3);
        this_array.$index;
        t4 = this.t;
        t5 = this_array.data;
        this_array.$indexSet;
        if (sh + k > t3) {
          if (t4 == null)
            throw t4.$sub();
          --t4;
          if (t4 >>> 0 !== t4 || t4 >= t5.length)
            throw H.ioore(t4);
          t3 = J.$or$n(t5[t4], J.$shl$n(t2.$and(x, C.JSInt_methods.$shl(1, t3 - sh) - 1), sh));
          if (t4 > t5.length - 1)
            C.JSArray_methods.set$length(t5, t4 + 1);
          if (t4 >= t5.length)
            throw H.ioore(t4);
          t5[t4] = t3;
          t3 = this.t;
          if (t3 == null)
            throw t3.$add();
          t4 = t3 + 1;
          this.t = t4;
          t6 = $.BigInteger_BI_DB;
          if (t6 == null)
            throw t6.$sub();
          t6 = t2.$shr(x, t6 - sh);
          if (t3 > t5.length - 1)
            C.JSArray_methods.set$length(t5, t4);
          if (t3 >>> 0 !== t3 || t3 >= t5.length)
            throw H.ioore(t3);
          t5[t3] = t6;
        } else {
          if (t4 == null)
            throw t4.$sub();
          t3 = t4 - 1;
          if (t3 >>> 0 !== t3 || t3 >= t5.length)
            throw H.ioore(t3);
          t2 = J.$or$n(t5[t3], t2.$shl(x, sh));
          if (t3 > t5.length - 1)
            C.JSArray_methods.set$length(t5, t3 + 1);
          if (t3 >= t5.length)
            throw H.ioore(t3);
          t5[t3] = t2;
        }
      }
      sh += k;
      t2 = $.BigInteger_BI_DB;
      if (t2 == null)
        throw H.iae(t2);
      if (sh >= t2)
        sh -= t2;
      mi = false;
    }
    if (t1) {
      if (0 >= i)
        throw H.ioore(0);
      t1 = C.JSString_methods.$and(s[0], 128) !== 0;
    } else
      t1 = false;
    if (t1) {
      this.s = -1;
      if (sh > 0) {
        t1 = this.t;
        if (t1 == null)
          throw t1.$sub();
        --t1;
        this_array.$index;
        t2 = this_array.data;
        if (t1 >>> 0 !== t1 || t1 >= t2.length)
          throw H.ioore(t1);
        t2 = t2[t1];
        t3 = $.BigInteger_BI_DB;
        if (t3 == null)
          throw t3.$sub();
        this_array.$indexSet(this_array, t1, J.$or$n(t2, C.JSInt_methods.$shl(C.JSInt_methods.$shl(1, t3 - sh) - 1, sh)));
      }
    }
    this.clamp$0(this);
    if (mi) {
      r = Z.BigInteger$(null, null, null);
      r.fromInt$1(0);
      r.subTo$2(this, this);
    }
  },
  toString$1: function(_, b) {
    var this_array, t1, r, r0, k, km, i, p, i0, d, m, t2, t3, t4, truncated;
    this_array = this.array;
    t1 = this.s;
    if (typeof t1 !== "number")
      return this.toString$1$bailout1(1, b, this_array, t1);
    if (t1 < 0) {
      r = Z.BigInteger$(null, null, null);
      r0 = Z.BigInteger$(null, null, null);
      r0.fromInt$1(0);
      r0.subTo$2(this, r);
      return "-" + r.toString$1(r, b);
    }
    if (b === 16)
      k = 4;
    else if (b === 8)
      k = 3;
    else if (b === 2)
      k = 1;
    else if (b === 32)
      k = 5;
    else {
      if (b === 4)
        ;
      else
        return this.toRadix$1(b);
      k = 2;
    }
    km = C.JSInt_methods.$shl(1, k) - 1;
    i = this.t;
    t1 = $.BigInteger_BI_DB;
    if (t1 == null)
      return this.toString$1$bailout1(2, 0, this_array, t1, k, i, km);
    if (i == null)
      throw i.$mul();
    p = t1 - C.JSNumber_methods.$mod(i * t1, k);
    i0 = i - 1;
    if (i0 !== (i0 | 0))
      return this.toString$1$bailout1(3, 0, this_array, t1, k, i, km, p, i0);
    if (i > 0) {
      if (p < t1) {
        this_array.$index;
        t1 = this_array.data;
        if (i0 < 0 || i0 >= t1.length)
          throw H.ioore(i0);
        t1 = t1[i0];
        if (typeof t1 !== "number")
          return this.toString$1$bailout1(4, 0, this_array, t1, k, 0, km, p, i0);
        d = C.JSNumber_methods.$shr(t1, p);
        t1 = d > 0;
      } else {
        d = null;
        t1 = false;
      }
      if (d == null)
        return this.toString$1$bailout1(5, 0, this_array, t1, k, 0, km, p, i0, d);
      if (t1) {
        t1 = this.BI_RM;
        if (d < 0 || d >= t1.length)
          throw H.ioore(d);
        r = t1[d];
        m = true;
      } else {
        m = false;
        r = "";
      }
      for (t1 = km < 0, i = i0; i >= 0;) {
        this_array.$index;
        t2 = this_array.data;
        t3 = t2.length;
        if (p < k) {
          if (i >= t3)
            throw H.ioore(i);
          t3 = t2[i];
          if (typeof t3 !== "number")
            return this.toString$1$bailout1(6, 0, this_array, t1, k, i, km, p, 0, 0, t2, r, m, t3);
          t3 = C.JSInt_methods.$shl((t3 & C.JSInt_methods.$shl(1, p) - 1) >>> 0, k - p);
          --i;
          if (i < 0 || i >= t2.length)
            throw H.ioore(i);
          t2 = t2[i];
          if (typeof t2 !== "number")
            return this.toString$1$bailout1(7, 0, this_array, t1, k, i, km, p, 0, t3, t2, r, m);
          t4 = $.BigInteger_BI_DB;
          if (t4 == null)
            return this.toString$1$bailout1(8, 0, this_array, t1, k, i, km, p, 0, t3, t2, r, m, t4);
          p += t4 - k;
          d = (t3 | C.JSNumber_methods.$shr(t2, p)) >>> 0;
        } else {
          if (i >= t3)
            throw H.ioore(i);
          t2 = J.toInt$0$n(t2[i]);
          if (isNaN(k))
            H.throwExpression(new P.UnsupportedError("NaN"));
          if (k == Infinity || k == -Infinity)
            H.throwExpression(new P.UnsupportedError("Infinity"));
          truncated = Math.floor(k);
          p -= truncated == -0.0 ? 0 : truncated;
          if (isNaN(p))
            H.throwExpression(new P.UnsupportedError("NaN"));
          if (p == Infinity || p == -Infinity)
            H.throwExpression(new P.UnsupportedError("Infinity"));
          truncated = p < 0 ? Math.ceil(p) : Math.floor(p);
          t2 = C.JSNumber_methods.$shr(t2, truncated == -0.0 ? 0 : truncated);
          if (isNaN(km))
            H.throwExpression(new P.UnsupportedError("NaN"));
          if (km == Infinity || km == -Infinity)
            H.throwExpression(new P.UnsupportedError("Infinity"));
          truncated = t1 ? Math.ceil(km) : Math.floor(km);
          d = (t2 & (truncated == -0.0 ? 0 : truncated)) >>> 0;
          if (p <= 0) {
            t2 = $.BigInteger_BI_DB;
            if (t2 == null)
              return this.toString$1$bailout1(9, 0, this_array, t1, k, i, km, p, 0, d, t2, r, m);
            p += t2;
            --i;
          }
        }
        if (d > 0)
          m = true;
        if (m) {
          t2 = this.BI_RM;
          if (d < 0 || d >= t2.length)
            throw H.ioore(d);
          r += t2[d];
        }
      }
    } else {
      m = false;
      r = "";
    }
    return m ? r : "0";
  },
  toString$1$bailout1: function(state0, b, this_array, t1, k, i, km, p, i0, d, t2, r, m, t3) {
    switch (state0) {
      case 0:
        this_array = this.array;
        t1 = this.s;
      case 1:
        state0 = 0;
        if (J.$lt$n(t1, 0)) {
          r = Z.BigInteger$(null, null, null);
          r0 = Z.BigInteger$(null, null, null);
          r0.fromInt$1(0);
          r0.subTo$2(this, r);
          return "-" + r.toString$1(r, b);
        }
        if (b === 16)
          k = 4;
        else if (b === 8)
          k = 3;
        else if (b === 2)
          k = 1;
        else if (b === 32)
          k = 5;
        else {
          if (b === 4)
            ;
          else
            return this.toRadix$1(b);
          k = 2;
        }
        km = C.JSInt_methods.$shl(1, k) - 1;
        i = this.t;
        t1 = $.BigInteger_BI_DB;
      case 2:
        state0 = 0;
        if (i == null)
          throw i.$mul();
        if (t1 == null)
          throw H.iae(t1);
        t2 = C.JSNumber_methods.$mod(i * t1, k);
        if (t1 == null)
          throw t1.$sub();
        p = t1 - t2;
        i0 = i - 1;
      case 3:
        state0 = 0;
      default:
        var r0, truncated;
        if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && i > 0)
          switch (state0) {
            case 0:
            case 4:
              if (state0 === 4 || state0 === 0 && p < t1)
                switch (state0) {
                  case 0:
                    this_array.$index;
                    t1 = this_array.data;
                    if (i0 >>> 0 !== i0 || i0 >= t1.length)
                      throw H.ioore(i0);
                    t1 = t1[i0];
                  case 4:
                    state0 = 0;
                    d = J.$shr$n(t1, p);
                    t1 = J.$gt$n(d, 0);
                }
              else {
                d = null;
                t1 = false;
              }
            case 5:
              state0 = 0;
              if (t1) {
                t1 = this.BI_RM;
                if (d >>> 0 !== d || d >= t1.length)
                  throw H.ioore(d);
                r = t1[d];
                m = true;
              } else {
                m = false;
                r = "";
              }
              t1 = km < 0;
              i = i0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!(i >= 0))
                        break L0;
                      this_array.$index;
                      t2 = this_array.data;
                    default:
                      if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && p < k)
                        switch (state0) {
                          case 0:
                            if (i >>> 0 !== i || i >= t2.length)
                              throw H.ioore(i);
                            t3 = t2[i];
                          case 6:
                            state0 = 0;
                            d = J.$shl$n(J.$and$n(t3, C.JSInt_methods.$shl(1, p) - 1), k - p);
                            --i;
                            if (i < 0 || i >= t2.length)
                              throw H.ioore(i);
                            t2 = t2[i];
                          case 7:
                            state0 = 0;
                            t3 = $.BigInteger_BI_DB;
                          case 8:
                            state0 = 0;
                            if (t3 == null)
                              throw t3.$sub();
                            p += t3 - k;
                            d = J.$or$n(d, J.$shr$n(t2, p));
                        }
                      else
                        switch (state0) {
                          case 0:
                            if (i >>> 0 !== i || i >= t2.length)
                              throw H.ioore(i);
                            t2 = J.toInt$0$n(t2[i]);
                            if (isNaN(k))
                              H.throwExpression(new P.UnsupportedError("NaN"));
                            if (k == Infinity || k == -Infinity)
                              H.throwExpression(new P.UnsupportedError("Infinity"));
                            truncated = Math.floor(k);
                            p -= truncated == -0.0 ? 0 : truncated;
                            if (isNaN(p))
                              H.throwExpression(new P.UnsupportedError("NaN"));
                            if (p == Infinity || p == -Infinity)
                              H.throwExpression(new P.UnsupportedError("Infinity"));
                            truncated = p < 0 ? Math.ceil(p) : Math.floor(p);
                            t2 = C.JSNumber_methods.$shr(t2, truncated == -0.0 ? 0 : truncated);
                            if (isNaN(km))
                              H.throwExpression(new P.UnsupportedError("NaN"));
                            if (km == Infinity || km == -Infinity)
                              H.throwExpression(new P.UnsupportedError("Infinity"));
                            truncated = t1 ? Math.ceil(km) : Math.floor(km);
                            d = (t2 & (truncated == -0.0 ? 0 : truncated)) >>> 0;
                          case 9:
                            if (state0 === 9 || state0 === 0 && p <= 0)
                              switch (state0) {
                                case 0:
                                  t2 = $.BigInteger_BI_DB;
                                case 9:
                                  state0 = 0;
                                  if (t2 == null)
                                    throw H.iae(t2);
                                  p += t2;
                                  --i;
                              }
                        }
                      if (J.$gt$n(d, 0))
                        m = true;
                      if (m) {
                        t2 = this.BI_RM;
                        if (d >>> 0 !== d || d >= t2.length)
                          throw H.ioore(d);
                        r += t2[d];
                      }
                  }
          }
        else {
          m = false;
          r = "";
        }
        return m ? r : "0";
    }
  },
  toString$0: function($receiver) {
    return this.toString$1($receiver, null);
  },
  negate_op$0: function() {
    var r, r0;
    r = Z.BigInteger$(null, null, null);
    r0 = Z.BigInteger$(null, null, null);
    r0.fromInt$1(0);
    r0.subTo$2(this, r);
    return r;
  },
  abs$0: function(_) {
    return J.$lt$n(this.s, 0) ? this.negate_op$0() : this;
  },
  compareTo$1: function(_, a) {
    var this_array, a_array, t1, t2, r, i;
    this_array = this.array;
    a_array = a.get$array();
    t1 = this.s;
    if (typeof t1 !== "number")
      return this.compareTo$1$bailout(1, a, this_array, t1, a_array);
    t2 = a.get$s();
    if (typeof t2 !== "number")
      return this.compareTo$1$bailout(2, a, this_array, t1, a_array, t2);
    r = t1 - t2;
    if (r !== 0)
      return r;
    i = this.t;
    t1 = a.get$t();
    if (i == null)
      throw i.$sub();
    if (t1 == null)
      throw H.iae(t1);
    r = i - t1;
    if (r !== 0)
      return r;
    while (true) {
      --i;
      if (i !== (i | 0))
        return this.compareTo$1$bailout(3, 0, this_array, 0, a_array, 0, i);
      if (!(i >= 0))
        break;
      this_array.$index;
      t1 = this_array.data;
      if (i >= t1.length)
        throw H.ioore(i);
      t1 = t1[i];
      if (typeof t1 !== "number")
        return this.compareTo$1$bailout(4, 0, this_array, t1, a_array, 0, i);
      a_array.$index;
      t2 = a_array.data;
      if (i >= t2.length)
        throw H.ioore(i);
      t2 = t2[i];
      if (typeof t2 !== "number")
        return this.compareTo$1$bailout(5, 0, this_array, t1, a_array, t2, i);
      r = t1 - t2;
      if (r !== 0)
        return r;
    }
    return 0;
  },
  compareTo$1$bailout: function(state0, a, this_array, t1, a_array, t2, i) {
    switch (state0) {
      case 0:
        this_array = this.array;
        a_array = a.get$array();
        t1 = this.s;
      case 1:
        state0 = 0;
        t2 = a.get$s();
      case 2:
        state0 = 0;
        r = J.$sub$n(t1, t2);
        if (!J.$eq(r, 0))
          return r;
        i = this.t;
        t1 = a.get$t();
        if (i == null)
          throw i.$sub();
        if (t1 == null)
          throw H.iae(t1);
        r = i - t1;
        if (r !== 0)
          return r;
      default:
        var r;
        L0:
          while (true)
            switch (state0) {
              case 0:
                --i;
              case 3:
                state0 = 0;
                if (!(i >= 0))
                  break L0;
                this_array.$index;
                t1 = this_array.data;
                if (i >>> 0 !== i || i >= t1.length)
                  throw H.ioore(i);
                t1 = t1[i];
              case 4:
                state0 = 0;
                a_array.$index;
                t2 = a_array.data;
                if (i >= t2.length)
                  throw H.ioore(i);
                t2 = t2[i];
              case 5:
                state0 = 0;
                r = J.$sub$n(t1, t2);
                if (!J.$eq(r, 0))
                  return r;
            }
        return 0;
    }
  },
  nbits$1: function(x) {
    var t, r;
    if (typeof x === "number")
      x = C.JSDouble_methods.toInt$0(x);
    t = J.$shr$n(x, 16);
    if (!J.$eq(t, 0)) {
      x = t;
      r = 17;
    } else
      r = 1;
    t = J.$shr$n(x, 8);
    if (!J.$eq(t, 0)) {
      r += 8;
      x = t;
    }
    t = J.$shr$n(x, 4);
    if (!J.$eq(t, 0)) {
      r += 4;
      x = t;
    }
    t = J.$shr$n(x, 2);
    if (!J.$eq(t, 0)) {
      r += 2;
      x = t;
    }
    return !J.$eq(J.$shr$n(x, 1), 0) ? r + 1 : r;
  },
  bitLength$0: function(_) {
    var this_array, t1, t2, t3;
    this_array = this.array;
    t1 = this.t;
    if (t1 == null)
      throw t1.$le();
    if (t1 <= 0)
      return 0;
    t2 = $.BigInteger_BI_DB;
    --t1;
    if (t2 == null)
      throw t2.$mul();
    this_array.$index;
    t3 = this_array.data;
    if (t1 >>> 0 !== t1 || t1 >= t3.length)
      throw H.ioore(t1);
    return t2 * t1 + this.nbits$1(J.$xor$n(t3[t1], J.$and$n(this.s, $.BigInteger_BI_DM)));
  },
  dlShiftTo$2: function(n, r) {
    var this_array, r_array, t1, i, t2, t3;
    this_array = this.array;
    r_array = r.array;
    t1 = this.t;
    if (t1 == null)
      throw t1.$sub();
    i = t1 - 1;
    if (i !== (i | 0))
      return this.dlShiftTo$2$bailout(1, n, r, this_array, r_array, i);
    for (; i >= 0; --i) {
      if (n == null)
        throw H.iae(n);
      t1 = i + n;
      if (t1 !== (t1 | 0))
        return this.dlShiftTo$2$bailout(2, n, r, this_array, r_array, i, t1);
      this_array.$index;
      t2 = this_array.data;
      if (i >= t2.length)
        throw H.ioore(i);
      t2 = t2[i];
      r_array.$indexSet;
      t3 = r_array.data;
      if (t1 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t1 + 1);
      if (t1 < 0 || t1 >= t3.length)
        throw H.ioore(t1);
      t3[t1] = t2;
    }
    if (n == null)
      throw n.$sub();
    i = n - 1;
    if (i !== (i | 0))
      return this.dlShiftTo$2$bailout(3, n, r, 0, r_array, i);
    for (; i >= 0; --i) {
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i + 1);
      if (i >= t1.length)
        throw H.ioore(i);
      t1[i] = 0;
    }
    t1 = this.t;
    if (t1 == null)
      throw t1.$add();
    r.t = t1 + n;
    r.s = this.s;
  },
  dlShiftTo$2$bailout: function(state0, n, r, this_array, r_array, i, t1) {
    switch (state0) {
      case 0:
        this_array = this.array;
        r_array = r.array;
        t1 = this.t;
        if (t1 == null)
          throw t1.$sub();
        i = t1 - 1;
      case 1:
        state0 = 0;
      case 2:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i >= 0))
                  break L0;
                if (n == null)
                  throw H.iae(n);
                t1 = i + n;
              case 2:
                state0 = 0;
                this_array.$index;
                t2 = this_array.data;
                if (i >>> 0 !== i || i >= t2.length)
                  throw H.ioore(i);
                t2 = t2[i];
                r_array.$indexSet;
                t3 = r_array.data;
                if (t1 > t3.length - 1)
                  C.JSArray_methods.set$length(t3, t1 + 1);
                if (t1 >>> 0 !== t1 || t1 >= t3.length)
                  throw H.ioore(t1);
                t3[t1] = t2;
                --i;
            }
        if (n == null)
          throw n.$sub();
        i = n - 1;
      case 3:
        var t2, t3;
        state0 = 0;
        for (; i >= 0; --i) {
          r_array.$indexSet;
          t1 = r_array.data;
          if (i > t1.length - 1)
            C.JSArray_methods.set$length(t1, i + 1);
          if (i >>> 0 !== i || i >= t1.length)
            throw H.ioore(i);
          t1[i] = 0;
        }
        t1 = this.t;
        if (t1 == null)
          throw t1.$add();
        r.t = t1 + n;
        r.s = this.s;
    }
  },
  drShiftTo$2: function(n, r) {
    var this_array, r_array, i, t1, t2, t3;
    if (n == null)
      return this.drShiftTo$2$bailout(1, n, r);
    this_array = this.array;
    r_array = r.array;
    i = n;
    while (true) {
      t1 = this.t;
      if (t1 == null)
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = i - n;
      this_array.$index;
      t2 = this_array.data;
      if (i >>> 0 !== i || i >= t2.length)
        throw H.ioore(i);
      t2 = t2[i];
      r_array.$indexSet;
      t3 = r_array.data;
      if (t1 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t1 + 1);
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw H.ioore(t1);
      t3[t1] = t2;
      ++i;
    }
    r.t = P.max(t1 - n, 0);
    r.s = this.s;
  },
  drShiftTo$2$bailout: function(state0, n, r) {
    var this_array, r_array, i, t1, t2, t3;
    this_array = this.array;
    r_array = r.array;
    i = n;
    while (true) {
      t1 = this.t;
      if (i == null)
        throw i.$lt();
      if (t1 == null)
        throw H.iae(t1);
      if (!(i < t1))
        break;
      if (n == null)
        throw H.iae(n);
      t1 = i - n;
      this_array.$index;
      t2 = this_array.data;
      if (i >>> 0 !== i || i >= t2.length)
        throw H.ioore(i);
      t2 = t2[i];
      r_array.$indexSet;
      t3 = r_array.data;
      if (t1 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t1 + 1);
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw H.ioore(t1);
      t3[t1] = t2;
      ++i;
    }
    if (n == null)
      throw H.iae(n);
    r.t = P.max(t1 - n, 0);
    r.s = this.s;
  },
  lShiftTo$2: function(n, r) {
    var this_array, r_array, t1, bs, cbs, bm, ds, c, i, t2, t3, t4;
    this_array = this.array;
    r_array = r.get$array();
    t1 = $.BigInteger_BI_DB;
    if (t1 == null)
      throw H.iae(t1);
    bs = C.JSNumber_methods.$mod(n, t1);
    cbs = t1 - bs;
    bm = C.JSInt_methods.$shl(1, cbs) - 1;
    t1 = $.BigInteger_BI_DB;
    if (t1 == null)
      throw H.iae(t1);
    ds = C.JSNumber_methods.$tdiv(n, t1);
    c = J.$and$n(J.$shl$n(this.s, bs), $.BigInteger_BI_DM);
    if (c !== (c | 0))
      return this.lShiftTo$2$bailout(1, r, ds, c, r_array, bm, bs, cbs, this_array);
    t1 = this.t;
    if (t1 == null)
      throw t1.$sub();
    i = t1 - 1;
    if (i !== (i | 0))
      return this.lShiftTo$2$bailout(2, r, ds, c, r_array, bm, bs, cbs, this_array, i);
    for (; i >= 0; --i) {
      t1 = i + ds + 1;
      this_array.$index;
      t2 = this_array.data;
      if (i >= t2.length)
        throw H.ioore(i);
      t3 = J.$or$n(J.$shr$n(t2[i], cbs), c);
      r_array.$indexSet;
      t4 = r_array.data;
      if (t1 > t4.length - 1)
        C.JSArray_methods.set$length(t4, t1 + 1);
      if (t1 >>> 0 !== t1 || t1 >= t4.length)
        throw H.ioore(t1);
      t4[t1] = t3;
      if (i >= t2.length)
        throw H.ioore(i);
      c = J.$shl$n(J.$and$n(t2[i], bm), bs);
    }
    i = ds - 1;
    if (i !== (i | 0))
      return this.lShiftTo$2$bailout(3, r, ds, c, r_array, 0, 0, 0, 0, i);
    for (; i >= 0; --i) {
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i + 1);
      if (i >= t1.length)
        throw H.ioore(i);
      t1[i] = 0;
    }
    r_array.$indexSet(r_array, ds, c);
    t1 = this.t;
    if (t1 == null)
      throw t1.$add();
    r.set$t(t1 + ds + 1);
    r.set$s(this.s);
    J.clamp$0$n(r);
  },
  lShiftTo$2$bailout: function(state0, r, ds, c, r_array, bm, bs, cbs, this_array, i) {
    switch (state0) {
      case 0:
        this_array = this.array;
        r_array = r.get$array();
        t1 = $.BigInteger_BI_DB;
        if (t1 == null)
          throw H.iae(t1);
        bs = C.JSNumber_methods.$mod(n, t1);
        cbs = t1 - bs;
        bm = C.JSInt_methods.$shl(1, cbs) - 1;
        t1 = $.BigInteger_BI_DB;
        if (t1 == null)
          throw H.iae(t1);
        ds = C.JSNumber_methods.$tdiv(n, t1);
        c = J.$and$n(J.$shl$n(this.s, bs), $.BigInteger_BI_DM);
      case 1:
        state0 = 0;
        t1 = this.t;
        if (t1 == null)
          throw t1.$sub();
        i = t1 - 1;
      case 2:
        state0 = 0;
        for (; i >= 0; --i) {
          t1 = i + ds + 1;
          this_array.$index;
          t2 = this_array.data;
          if (i >>> 0 !== i || i >= t2.length)
            throw H.ioore(i);
          t3 = J.$or$n(J.$shr$n(t2[i], cbs), c);
          r_array.$indexSet;
          t4 = r_array.data;
          if (t1 > t4.length - 1)
            C.JSArray_methods.set$length(t4, t1 + 1);
          if (t1 >>> 0 !== t1 || t1 >= t4.length)
            throw H.ioore(t1);
          t4[t1] = t3;
          if (i >= t2.length)
            throw H.ioore(i);
          c = J.$shl$n(J.$and$n(t2[i], bm), bs);
        }
        i = ds - 1;
      case 3:
        var t1, t2, t3, t4;
        state0 = 0;
        for (; i >= 0; --i) {
          r_array.$indexSet;
          t1 = r_array.data;
          if (i > t1.length - 1)
            C.JSArray_methods.set$length(t1, i + 1);
          if (i >>> 0 !== i || i >= t1.length)
            throw H.ioore(i);
          t1[i] = 0;
        }
        r_array.$indexSet(r_array, ds, c);
        t1 = this.t;
        if (t1 == null)
          throw t1.$add();
        r.set$t(t1 + ds + 1);
        r.set$s(this.s);
        J.clamp$0$n(r);
    }
  },
  rShiftTo$2: function(n, r) {
    var this_array, r_array, t1, ds, t2, bs, cbs, bm, t3, i, t4, t5, t6, t7;
    if (n !== (n | 0))
      return this.rShiftTo$2$bailout(1, n, r);
    this_array = this.array;
    r_array = r.array;
    r.s = this.s;
    t1 = $.BigInteger_BI_DB;
    if (t1 == null)
      return this.rShiftTo$2$bailout(2, n, r, t1, this_array, r_array);
    ds = C.JSNumber_methods.$tdiv(n, t1);
    t2 = this.t;
    if (t2 == null)
      throw H.iae(t2);
    if (ds >= t2) {
      r.t = 0;
      return;
    }
    bs = C.JSNumber_methods.$mod(n, t1);
    cbs = t1 - bs;
    bm = C.JSInt_methods.$shl(1, bs) - 1;
    this_array.$index;
    t1 = this_array.data;
    if (ds < 0 || ds >= t1.length)
      throw H.ioore(ds);
    t2 = t1[ds];
    if (typeof t2 !== "number")
      return this.rShiftTo$2$bailout(3, 0, r, t1, 0, r_array, bs, ds, t2, cbs, bm);
    t2 = C.JSNumber_methods.$shr(t2, bs);
    r_array.$indexSet;
    t3 = r_array.data;
    if (0 > t3.length - 1)
      C.JSArray_methods.set$length(t3, 1);
    if (0 >= t3.length)
      throw H.ioore(0);
    t3[0] = t2;
    i = ds + 1;
    while (true) {
      t2 = this.t;
      if (t2 == null)
        throw H.iae(t2);
      if (!(i < t2))
        break;
      t2 = i - ds;
      t4 = t2 - 1;
      if (t4 < 0 || t4 >= t3.length)
        throw H.ioore(t4);
      t5 = t3[t4];
      if (typeof t5 !== "number")
        return this.rShiftTo$2$bailout(4, 0, r, t1, 0, 0, bs, ds, t2, cbs, bm, t4, t5, i, t3);
      if (i >= t1.length)
        throw H.ioore(i);
      t6 = t1[i];
      if (typeof t6 !== "number")
        return this.rShiftTo$2$bailout(5, 0, r, t1, 0, 0, bs, ds, t2, cbs, bm, t4, t5, i, t3, t6);
      t6 = C.JSInt_methods.$shl((t6 & bm) >>> 0, cbs);
      if (t4 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t4 + 1);
      t7 = t3.length;
      if (t4 >= t7)
        throw H.ioore(t4);
      t3[t4] = (t5 | t6) >>> 0;
      if (i >= t1.length)
        throw H.ioore(i);
      t6 = t1[i];
      if (typeof t6 !== "number")
        return this.rShiftTo$2$bailout(6, 0, r, t1, 0, 0, bs, ds, t2, cbs, bm, t6, 0, i, t3);
      t6 = C.JSNumber_methods.$shr(t6, bs);
      if (t2 > t7 - 1)
        C.JSArray_methods.set$length(t3, t2 + 1);
      if (t2 < 0 || t2 >= t3.length)
        throw H.ioore(t2);
      t3[t2] = t6;
      ++i;
    }
    if (bs > 0) {
      t1 = t2 - ds - 1;
      if (t1 !== (t1 | 0))
        return this.rShiftTo$2$bailout(7, 0, r, t1, 0, 0, 0, ds, 0, cbs, bm, 0, 0, 0, t3);
      if (t1 < 0 || t1 >= t3.length)
        throw H.ioore(t1);
      t2 = t3[t1];
      if (typeof t2 !== "number")
        return this.rShiftTo$2$bailout(8, 0, r, t1, 0, 0, 0, ds, t2, cbs, bm, 0, 0, 0, t3);
      t4 = this.s;
      if (typeof t4 !== "number")
        return this.rShiftTo$2$bailout(9, 0, r, t1, 0, 0, 0, ds, t2, cbs, bm, t4, 0, 0, t3);
      t4 = C.JSInt_methods.$shl((t4 & bm) >>> 0, cbs);
      if (t1 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t1 + 1);
      if (t1 >= t3.length)
        throw H.ioore(t1);
      t3[t1] = (t2 | t4) >>> 0;
    }
    t1 = this.t;
    if (t1 == null)
      throw t1.$sub();
    r.t = t1 - ds;
    r.clamp$0(r);
  },
  rShiftTo$2$bailout: function(state0, n, r, t1, this_array, r_array, bs, ds, t2, cbs, bm, t4, t5, i, t3, t6) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this_array = this.array;
        r_array = r.array;
        r.s = this.s;
        t1 = $.BigInteger_BI_DB;
      case 2:
        state0 = 0;
        if (t1 == null)
          throw H.iae(t1);
        ds = C.JSNumber_methods.$tdiv(n, t1);
        t2 = this.t;
        if (t2 == null)
          throw H.iae(t2);
        if (ds >= t2) {
          r.t = 0;
          return;
        }
        bs = C.JSNumber_methods.$mod(n, t1);
        cbs = t1 - bs;
        bm = C.JSInt_methods.$shl(1, bs) - 1;
        this_array.$index;
        t1 = this_array.data;
        if (ds >>> 0 !== ds || ds >= t1.length)
          throw H.ioore(ds);
        t2 = t1[ds];
      case 3:
        state0 = 0;
        t2 = J.$shr$n(t2, bs);
        r_array.$indexSet;
        t3 = r_array.data;
        if (0 > t3.length - 1)
          C.JSArray_methods.set$length(t3, 1);
        if (0 >= t3.length)
          throw H.ioore(0);
        t3[0] = t2;
        i = ds + 1;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.t;
                if (t2 == null)
                  throw H.iae(t2);
                if (!(i < t2))
                  break L0;
                t2 = i - ds;
                t4 = t2 - 1;
                if (t4 < 0 || t4 >= t3.length)
                  throw H.ioore(t4);
                t5 = t3[t4];
              case 4:
                state0 = 0;
                if (i >= t1.length)
                  throw H.ioore(i);
                t6 = t1[i];
              case 5:
                state0 = 0;
                t6 = J.$or$n(t5, J.$shl$n(J.$and$n(t6, bm), cbs));
                if (t4 > t3.length - 1)
                  C.JSArray_methods.set$length(t3, t4 + 1);
                if (t4 >= t3.length)
                  throw H.ioore(t4);
                t3[t4] = t6;
                if (i >= t1.length)
                  throw H.ioore(i);
                t4 = t1[i];
              case 6:
                state0 = 0;
                t4 = J.$shr$n(t4, bs);
                if (t2 > t3.length - 1)
                  C.JSArray_methods.set$length(t3, t2 + 1);
                if (t2 < 0 || t2 >= t3.length)
                  throw H.ioore(t2);
                t3[t2] = t4;
                ++i;
            }
      case 7:
      case 8:
      case 9:
        if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && bs > 0)
          switch (state0) {
            case 0:
              t1 = t2 - ds - 1;
            case 7:
              state0 = 0;
              if (t1 >>> 0 !== t1 || t1 >= t3.length)
                throw H.ioore(t1);
              t2 = t3[t1];
            case 8:
              state0 = 0;
              t4 = this.s;
            case 9:
              state0 = 0;
              t4 = J.$or$n(t2, J.$shl$n(J.$and$n(t4, bm), cbs));
              if (t1 > t3.length - 1)
                C.JSArray_methods.set$length(t3, t1 + 1);
              if (t1 >= t3.length)
                throw H.ioore(t1);
              t3[t1] = t4;
          }
        t1 = this.t;
        if (t1 == null)
          throw t1.$sub();
        r.t = t1 - ds;
        r.clamp$0(r);
    }
  },
  clamp$0: function(_) {
    var this_array, c, t1, t2;
    this_array = this.array;
    c = J.$and$n(this.s, $.BigInteger_BI_DM);
    if (c !== (c | 0))
      return this.clamp$0$bailout(1, c, this_array);
    while (true) {
      t1 = this.t;
      if (t1 == null)
        throw t1.$gt();
      if (t1 > 0) {
        --t1;
        this_array.$index;
        t2 = this_array.data;
        if (t1 >>> 0 !== t1 || t1 >= t2.length)
          throw H.ioore(t1);
        t1 = J.$eq(t2[t1], c);
      } else
        t1 = false;
      if (!t1)
        break;
      t1 = this.t;
      if (t1 == null)
        throw t1.$sub();
      this.t = t1 - 1;
    }
  },
  clamp$0$bailout: function(state0, c, this_array) {
    var t1, t2;
    while (true) {
      t1 = this.t;
      if (t1 == null)
        throw t1.$gt();
      if (t1 > 0) {
        --t1;
        this_array.$index;
        t2 = this_array.data;
        if (t1 >>> 0 !== t1 || t1 >= t2.length)
          throw H.ioore(t1);
        t1 = J.$eq(t2[t1], c);
      } else
        t1 = false;
      if (!t1)
        break;
      t1 = this.t;
      if (t1 == null)
        throw t1.$sub();
      this.t = t1 - 1;
    }
  },
  subTo$2: function(a, r) {
    var this_array, r_array, a_array, m, i, c, t1, t2, truncated, i0;
    this_array = this.array;
    r_array = r.array;
    a_array = a.get$array();
    m = P.min(a.get$t(), this.t);
    if (m == null)
      throw H.iae(m);
    i = 0;
    c = 0;
    for (; i < m; i = i0) {
      this_array.$index;
      t1 = this_array.data;
      if (i >= t1.length)
        throw H.ioore(i);
      t1 = J.toInt$0$n(t1[i]);
      a_array.$index;
      t2 = a_array.data;
      if (i >= t2.length)
        throw H.ioore(i);
      t2 = t1 - J.toInt$0$n(t2[i]);
      if (isNaN(t2))
        H.throwExpression(new P.UnsupportedError("NaN"));
      if (t2 == Infinity || t2 == -Infinity)
        H.throwExpression(new P.UnsupportedError("Infinity"));
      truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
      c += truncated == -0.0 ? 0 : truncated;
      i0 = i + 1;
      t1 = $.BigInteger_BI_DM;
      if (t1 == null)
        return this.subTo$2$bailout(1, a, r, i, m, a_array, c, i0, r_array, this_array, t1);
      r_array.$indexSet;
      t2 = r_array.data;
      if (i > t2.length - 1)
        C.JSArray_methods.set$length(t2, i0);
      if (i >= t2.length)
        throw H.ioore(i);
      t2[i] = (c & t1) >>> 0;
      t1 = $.BigInteger_BI_DB;
      if (t1 == null)
        return this.subTo$2$bailout(2, a, r, 0, m, a_array, c, i0, r_array, this_array, t1);
      c = C.JSNumber_methods.$shr(c, t1);
      if (c === 4294967295)
        c = -1;
    }
    t1 = a.get$t();
    t2 = this.t;
    if (t1 == null)
      throw t1.$lt();
    if (t2 == null)
      throw H.iae(t2);
    if (t1 < t2) {
      t1 = a.get$s();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      c -= t1;
      while (true) {
        t1 = this.t;
        if (t1 == null)
          throw H.iae(t1);
        if (!(i < t1))
          break;
        this_array.$index;
        t1 = this_array.data;
        if (i >= t1.length)
          throw H.ioore(i);
        t1 = t1[i];
        if (typeof t1 !== "number")
          throw H.iae(t1);
        c += t1;
        i0 = i + 1;
        t1 = $.BigInteger_BI_DM;
        if (t1 == null)
          return this.subTo$2$bailout(3, 0, r, i, 0, 0, c, i0, r_array, this_array, t1);
        r_array.$indexSet;
        t2 = r_array.data;
        if (i > t2.length - 1)
          C.JSArray_methods.set$length(t2, i0);
        if (i >= t2.length)
          throw H.ioore(i);
        t2[i] = (c & t1) >>> 0;
        t1 = $.BigInteger_BI_DB;
        if (t1 == null)
          return this.subTo$2$bailout(4, 0, r, 0, 0, 0, c, i0, r_array, this_array, t1);
        c = C.JSNumber_methods.$shr(c, t1);
        if (c === 4294967295)
          c = -1;
        i = i0;
      }
      t1 = this.s;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      c += t1;
    } else {
      t1 = this.s;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      c += t1;
      while (true) {
        t1 = a.get$t();
        if (t1 == null)
          throw H.iae(t1);
        if (!(i < t1))
          break;
        a_array.$index;
        t1 = a_array.data;
        if (i >= t1.length)
          throw H.ioore(i);
        t1 = t1[i];
        if (typeof t1 !== "number")
          throw H.iae(t1);
        c -= t1;
        i0 = i + 1;
        t1 = $.BigInteger_BI_DM;
        if (t1 == null)
          return this.subTo$2$bailout(5, a, r, i, 0, a_array, c, i0, r_array, 0, t1);
        r_array.$indexSet;
        t2 = r_array.data;
        if (i > t2.length - 1)
          C.JSArray_methods.set$length(t2, i0);
        if (i >= t2.length)
          throw H.ioore(i);
        t2[i] = (c & t1) >>> 0;
        t1 = $.BigInteger_BI_DB;
        if (t1 == null)
          return this.subTo$2$bailout(6, a, r, 0, 0, a_array, c, i0, r_array, 0, t1);
        c = C.JSNumber_methods.$shr(c, t1);
        if (c === 4294967295)
          c = -1;
        i = i0;
      }
      t1 = a.get$s();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      c -= t1;
    }
    r.s = c < 0 ? -1 : 0;
    if (c < -1) {
      i0 = i + 1;
      t1 = $.BigInteger_BI_DV;
      if (t1 == null)
        return this.subTo$2$bailout(7, 0, r, i, 0, 0, c, i0, r_array, 0, t1);
      r_array.$indexSet;
      t2 = r_array.data;
      if (i > t2.length - 1)
        C.JSArray_methods.set$length(t2, i0);
      if (i >= t2.length)
        throw H.ioore(i);
      t2[i] = t1 + c;
      i = i0;
    } else if (c > 0) {
      i0 = i + 1;
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i0);
      if (i >= t1.length)
        throw H.ioore(i);
      t1[i] = c;
      i = i0;
    }
    r.t = i;
    r.clamp$0(r);
  },
  subTo$2$bailout: function(state0, a, r, i, m, a_array, c, i0, r_array, this_array, t1) {
    switch (state0) {
      case 0:
        this_array = this.array;
        r_array = r.array;
        a_array = a.get$array();
        m = P.min(a.get$t(), this.t);
        if (m == null)
          throw H.iae(m);
        i = 0;
        c = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < m))
                  break L0;
                this_array.$index;
                t1 = this_array.data;
                if (i >= t1.length)
                  throw H.ioore(i);
                t1 = J.toInt$0$n(t1[i]);
                a_array.$index;
                t2 = a_array.data;
                if (i >= t2.length)
                  throw H.ioore(i);
                t2 = t1 - J.toInt$0$n(t2[i]);
                if (isNaN(t2))
                  H.throwExpression(new P.UnsupportedError("NaN"));
                if (t2 == Infinity || t2 == -Infinity)
                  H.throwExpression(new P.UnsupportedError("Infinity"));
                truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
                c += truncated == -0.0 ? 0 : truncated;
                i0 = i + 1;
                t1 = $.BigInteger_BI_DM;
              case 1:
                state0 = 0;
                if (t1 == null)
                  throw H.iae(t1);
                r_array.$indexSet;
                t2 = r_array.data;
                if (i > t2.length - 1)
                  C.JSArray_methods.set$length(t2, i0);
                if (i >= t2.length)
                  throw H.ioore(i);
                t2[i] = (c & t1) >>> 0;
                t1 = $.BigInteger_BI_DB;
              case 2:
                state0 = 0;
                if (t1 == null)
                  throw H.iae(t1);
                c = C.JSNumber_methods.$shr(c, t1);
                if (c === 4294967295)
                  c = -1;
                i = i0;
            }
        t1 = a.get$t();
        t2 = this.t;
        if (t1 == null)
          throw t1.$lt();
        if (t2 == null)
          throw H.iae(t2);
      case 3:
      case 4:
      case 5:
      case 6:
        if (state0 === 4 || state0 === 3 || state0 === 0 && t1 < t2)
          switch (state0) {
            case 0:
              t1 = a.get$s();
              if (typeof t1 !== "number")
                throw H.iae(t1);
              c -= t1;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = this.t;
                      if (t1 == null)
                        throw H.iae(t1);
                      if (!(i < t1))
                        break L1;
                      this_array.$index;
                      t1 = this_array.data;
                      if (i >= t1.length)
                        throw H.ioore(i);
                      t1 = t1[i];
                      if (typeof t1 !== "number")
                        throw H.iae(t1);
                      c += t1;
                      i0 = i + 1;
                      t1 = $.BigInteger_BI_DM;
                    case 3:
                      state0 = 0;
                      if (t1 == null)
                        throw H.iae(t1);
                      r_array.$indexSet;
                      t2 = r_array.data;
                      if (i > t2.length - 1)
                        C.JSArray_methods.set$length(t2, i0);
                      if (i >= t2.length)
                        throw H.ioore(i);
                      t2[i] = (c & t1) >>> 0;
                      t1 = $.BigInteger_BI_DB;
                    case 4:
                      state0 = 0;
                      if (t1 == null)
                        throw H.iae(t1);
                      c = C.JSNumber_methods.$shr(c, t1);
                      if (c === 4294967295)
                        c = -1;
                      i = i0;
                  }
              t1 = this.s;
              if (typeof t1 !== "number")
                throw H.iae(t1);
              c += t1;
          }
        else
          switch (state0) {
            case 0:
              t1 = this.s;
              if (typeof t1 !== "number")
                throw H.iae(t1);
              c += t1;
            default:
              L2:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = a.get$t();
                      if (t1 == null)
                        throw H.iae(t1);
                      if (!(i < t1))
                        break L2;
                      a_array.$index;
                      t1 = a_array.data;
                      if (i >= t1.length)
                        throw H.ioore(i);
                      t1 = t1[i];
                      if (typeof t1 !== "number")
                        throw H.iae(t1);
                      c -= t1;
                      i0 = i + 1;
                      t1 = $.BigInteger_BI_DM;
                    case 5:
                      state0 = 0;
                      if (t1 == null)
                        throw H.iae(t1);
                      r_array.$indexSet;
                      t2 = r_array.data;
                      if (i > t2.length - 1)
                        C.JSArray_methods.set$length(t2, i0);
                      if (i >= t2.length)
                        throw H.ioore(i);
                      t2[i] = (c & t1) >>> 0;
                      t1 = $.BigInteger_BI_DB;
                    case 6:
                      state0 = 0;
                      if (t1 == null)
                        throw H.iae(t1);
                      c = C.JSNumber_methods.$shr(c, t1);
                      if (c === 4294967295)
                        c = -1;
                      i = i0;
                  }
              t1 = a.get$s();
              if (typeof t1 !== "number")
                throw H.iae(t1);
              c -= t1;
          }
        r.s = c < 0 ? -1 : 0;
      case 7:
        var t2, truncated;
        if (state0 === 7 || state0 === 0 && c < -1)
          switch (state0) {
            case 0:
              i0 = i + 1;
              t1 = $.BigInteger_BI_DV;
            case 7:
              state0 = 0;
              if (t1 == null)
                throw t1.$add();
              r_array.$indexSet;
              t2 = r_array.data;
              if (i > t2.length - 1)
                C.JSArray_methods.set$length(t2, i0);
              if (i >= t2.length)
                throw H.ioore(i);
              t2[i] = t1 + c;
              i = i0;
          }
        else if (c > 0) {
          i0 = i + 1;
          r_array.$indexSet;
          t1 = r_array.data;
          if (i > t1.length - 1)
            C.JSArray_methods.set$length(t1, i0);
          if (i >= t1.length)
            throw H.ioore(i);
          t1[i] = c;
          i = i0;
        }
        r.t = i;
        r.clamp$0(r);
    }
  },
  multiplyTo$2: function(a, r) {
    var r_array, x, y, y_array, i, t1, t2, t3, r0;
    r_array = r.get$array();
    x = J.$lt$n(this.s, 0) ? this.negate_op$0() : this;
    y = J.abs$0$n(a);
    y_array = y.get$array();
    i = x.t;
    t1 = y.get$t();
    if (i == null)
      throw i.$add();
    if (t1 == null)
      throw H.iae(t1);
    r.set$t(i + t1);
    for (; --i, i >= 0;) {
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i + 1);
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(i);
      t1[i] = 0;
    }
    i = 0;
    while (true) {
      t1 = y.get$t();
      if (t1 == null)
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = x.t;
      if (t1 == null)
        throw H.iae(t1);
      t2 = i + t1;
      y_array.$index;
      t3 = y_array.data;
      if (i >= t3.length)
        throw H.ioore(i);
      t1 = x.am$6(0, t3[i], r, i, 0, t1);
      r_array.$indexSet;
      t3 = r_array.data;
      if (t2 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t2 + 1);
      if (t2 >>> 0 !== t2 || t2 >= t3.length)
        throw H.ioore(t2);
      t3[t2] = t1;
      ++i;
    }
    r.set$s(0);
    J.clamp$0$n(r);
    if (!J.$eq(this.s, a.get$s())) {
      r0 = Z.BigInteger$(null, null, null);
      r0.fromInt$1(0);
      r0.subTo$2(r, r);
    }
  },
  squareTo$1: function(r) {
    var x, x_array, r_array, t1, i, t2, c, t3, t4, t5, t6, i0;
    x = J.$lt$n(this.s, 0) ? this.negate_op$0() : this;
    x_array = x.array;
    r_array = r.array;
    t1 = x.t;
    if (t1 == null)
      throw H.iae(t1);
    i = 2 * t1;
    r.t = i;
    for (; --i, i >= 0;) {
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i + 1);
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(i);
      t1[i] = 0;
    }
    i = 0;
    while (true) {
      t1 = x.t;
      if (t1 == null)
        throw t1.$sub();
      if (!(i < t1 - 1))
        break;
      x_array.$index;
      t1 = x_array.data;
      if (i >= t1.length)
        throw H.ioore(i);
      t2 = 2 * i;
      c = x.am$6(i, t1[i], r, t2, 0, 1);
      t3 = x.t;
      if (t3 == null)
        throw H.iae(t3);
      t4 = i + t3;
      r_array.$index;
      t5 = r_array.data;
      if (t4 >>> 0 !== t4 || t4 >= t5.length)
        throw H.ioore(t4);
      t6 = t5[t4];
      i0 = i + 1;
      if (i >= t1.length)
        throw H.ioore(i);
      t1 = t1[i];
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t3 = J.$add$ns(t6, x.am$6(i0, 2 * t1, r, t2 + 1, c, t3 - i - 1));
      r_array.$indexSet;
      if (t4 > t5.length - 1)
        C.JSArray_methods.set$length(t5, t4 + 1);
      if (t4 >= t5.length)
        throw H.ioore(t4);
      t5[t4] = t3;
      if (J.$ge$n(t3, $.BigInteger_BI_DV)) {
        t1 = x.t;
        if (t1 == null)
          throw H.iae(t1);
        t1 = i + t1;
        if (t1 >>> 0 !== t1 || t1 >= t5.length)
          throw H.ioore(t1);
        t2 = J.$sub$n(t5[t1], $.BigInteger_BI_DV);
        if (t1 > t5.length - 1)
          C.JSArray_methods.set$length(t5, t1 + 1);
        t3 = t5.length;
        if (t1 >= t3)
          throw H.ioore(t1);
        t5[t1] = t2;
        t2 = x.t;
        if (t2 == null)
          throw H.iae(t2);
        t2 = i + t2 + 1;
        if (t2 > t3 - 1)
          C.JSArray_methods.set$length(t5, t2 + 1);
        if (t2 >>> 0 !== t2 || t2 >= t5.length)
          throw H.ioore(t2);
        t5[t2] = 1;
      }
      i = i0;
    }
    t1 = r.t;
    if (t1 == null)
      throw t1.$gt();
    if (t1 > 0) {
      --t1;
      r_array.$index;
      t2 = r_array.data;
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        throw H.ioore(t1);
      t2 = t2[t1];
      x_array.$index;
      t3 = x_array.data;
      if (i >= t3.length)
        throw H.ioore(i);
      r_array.$indexSet(r_array, t1, J.$add$ns(t2, x.am$6(i, t3[i], r, 2 * i, 0, 1)));
    }
    r.s = 0;
    r.clamp$0(r);
  },
  divRemTo$3: function(m, q, r) {
    var pm, t1, r0, r1, pt, t2, y, ts, ms, pm_array, t3, nsh, ys, y_array, y0, t4, t5, yt, d1, d2, e, i, j, t, r_array, t6, t7, qd;
    pm = J.abs$0$n(m);
    t1 = pm.get$t();
    if (t1 == null)
      throw t1.$le();
    if (t1 <= 0)
      return;
    t1 = this.s;
    if (typeof t1 !== "number")
      return this.divRemTo$3$bailout(1, m, q, r, pm, t1);
    if (t1 < 0) {
      r0 = Z.BigInteger$(null, null, null);
      r1 = Z.BigInteger$(null, null, null);
      r1.fromInt$1(0);
      r1.subTo$2(this, r0);
      pt = r0;
    } else
      pt = this;
    t1 = pt.t;
    t2 = pm.get$t();
    if (t1 == null)
      throw t1.$lt();
    if (t2 == null)
      throw H.iae(t2);
    if (t1 < t2) {
      if (q != null)
        q.fromInt$1(0);
      if (r != null)
        this.copyTo$1(r);
      return;
    }
    if (r == null)
      r = Z.BigInteger$(null, null, null);
    y = Z.BigInteger$(null, null, null);
    ts = this.s;
    if (typeof ts !== "number")
      return this.divRemTo$3$bailout(2, m, q, r, pm, 0, y, ts, pt);
    ms = m.get$s();
    pm_array = pm.get$array();
    t1 = $.BigInteger_BI_DB;
    if (t1 == null)
      return this.divRemTo$3$bailout(3, 0, q, r, pm, t1, y, ts, pt, ms, pm_array);
    t2 = pm.get$t();
    if (t2 == null)
      throw t2.$sub();
    --t2;
    if (t2 !== (t2 | 0))
      return this.divRemTo$3$bailout(4, 0, q, r, pm, t1, y, ts, pt, ms, pm_array, t2);
    pm_array.$index;
    t3 = pm_array.data;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t2);
    nsh = t1 - this.nbits$1(t3[t2]);
    t1 = nsh > 0;
    if (t1) {
      pm.lShiftTo$2(nsh, y);
      pt.lShiftTo$2(nsh, r);
    } else {
      pm.copyTo$1(y);
      pt.copyTo$1(r);
    }
    ys = y.t;
    y_array = y.array;
    if (ys == null)
      throw ys.$sub();
    t2 = ys - 1;
    if (t2 !== (t2 | 0))
      return this.divRemTo$3$bailout(5, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, y_array, ys);
    y_array.$index;
    t3 = y_array.data;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t2);
    y0 = t3[t2];
    if (typeof y0 !== "number")
      return this.divRemTo$3$bailout(6, 0, q, r, 0, t1, y, ts, 0, ms, 0, 0, nsh, 0, ys, y0, t3);
    if (y0 === 0)
      return;
    t2 = $.BigInteger_BI_F1;
    if (t2 == null)
      throw H.iae(t2);
    t2 = y0 * C.JSInt_methods.$shl(1, t2);
    if (ys > 1) {
      t4 = ys - 2;
      if (t4 !== (t4 | 0))
        return this.divRemTo$3$bailout(7, 0, q, r, 0, t1, y, ts, 0, ms, 0, t4, nsh, 0, ys, y0, t3, t2);
      if (t4 < 0 || t4 >= t3.length)
        throw H.ioore(t4);
      t4 = t3[t4];
      if (typeof t4 !== "number")
        return this.divRemTo$3$bailout(8, 0, q, r, 0, t1, y, ts, 0, ms, 0, t4, nsh, 0, ys, y0, t3, t2);
      t5 = $.BigInteger_BI_F2;
      if (t5 == null)
        return this.divRemTo$3$bailout(9, 0, q, r, 0, t1, y, ts, 0, ms, 0, t4, nsh, 0, ys, y0, t3, t2, t5);
      t5 = C.JSNumber_methods.$shr(t4, t5);
      t4 = t5;
    } else
      t4 = 0;
    yt = t2 + t4;
    t4 = $.BigInteger_BI_FV;
    if (t4 == null)
      throw t4.$div();
    d1 = t4 / yt;
    t4 = $.BigInteger_BI_F1;
    if (t4 == null)
      throw H.iae(t4);
    d2 = C.JSInt_methods.$shl(1, t4) / yt;
    t4 = $.BigInteger_BI_F2;
    if (t4 == null)
      throw H.iae(t4);
    e = C.JSInt_methods.$shl(1, t4);
    i = r.get$t();
    if (i == null)
      throw i.$sub();
    j = i - ys;
    t2 = q == null;
    t = t2 ? Z.BigInteger$(null, null, null) : q;
    y.dlShiftTo$2(j, t);
    r_array = r.get$array();
    t4 = J.getInterceptor$ns(r);
    t5 = t4.compareTo$1(r, t);
    if (typeof t5 !== "number")
      return this.divRemTo$3$bailout(10, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, t3, t4, t5, t, d1, j, d2, r_array, e, i);
    if (t5 >= 0) {
      t5 = r.get$t();
      if (t5 !== (t5 | 0))
        return this.divRemTo$3$bailout(11, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, t3, t4, t5, t, d1, j, d2, r_array, e, i);
      t6 = t5 + 1;
      r.set$t(t6);
      r_array.$indexSet;
      t7 = r_array.data;
      if (t5 > t7.length - 1)
        C.JSArray_methods.set$length(t7, t6);
      if (t5 < 0 || t5 >= t7.length)
        throw H.ioore(t5);
      t7[t5] = 1;
      r.subTo$2(t, r);
    }
    r0 = Z.BigInteger$(null, null, null);
    r0.fromInt$1(1);
    r0.dlShiftTo$2(ys, t);
    t.subTo$2(y, y);
    while (true) {
      t5 = y.t;
      if (t5 !== (t5 | 0))
        return this.divRemTo$3$bailout(12, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, t3, t4, t5, t, d1, j, d2, r_array, e, i);
      if (!(t5 < ys))
        break;
      t6 = t5 + 1;
      y.t = t6;
      if (t5 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t6);
      if (t5 < 0 || t5 >= t3.length)
        throw H.ioore(t5);
      t3[t5] = 0;
    }
    for (; --j, j >= 0;) {
      --i;
      if (i !== (i | 0))
        return this.divRemTo$3$bailout(13, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, 0, t4, 0, t, d1, j, d2, r_array, e, i);
      r_array.$index;
      t3 = r_array.data;
      t5 = t3.length;
      if (i < 0 || i >= t5)
        throw H.ioore(i);
      t6 = t3[i];
      if (typeof t6 !== "number")
        return this.divRemTo$3$bailout(14, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, t3, t4, t6, t, d1, j, d2, r_array, e, i);
      if (t6 === y0) {
        t5 = $.BigInteger_BI_DM;
        if (t5 == null)
          return this.divRemTo$3$bailout(15, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, t3, t4, t5, t, d1, j, d2, r_array, e, i);
        qd = t5;
      } else {
        t6 *= d1;
        t7 = i - 1;
        if (t7 < 0)
          throw H.ioore(t7);
        t7 = t3[t7];
        if (typeof t7 !== "number")
          return this.divRemTo$3$bailout(17, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, t3, t4, t6, t, d1, j, d2, r_array, e, i, t7);
        qd = C.JSNumber_methods.floor$0(t6 + (t7 + e) * d2);
      }
      if (i >= t3.length)
        throw H.ioore(i);
      t5 = t3[i];
      if (typeof t5 !== "number")
        return this.divRemTo$3$bailout(18, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, t3, t4, t5, t, d1, j, d2, r_array, e, i, 0, qd);
      t6 = y.am$6(0, qd, r, j, 0, ys);
      if (typeof t6 !== "number")
        return this.divRemTo$3$bailout(19, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, t3, t4, t5, t, d1, j, d2, r_array, e, i, t6, qd);
      t6 = t5 + t6;
      if (i > t3.length - 1)
        C.JSArray_methods.set$length(t3, i + 1);
      if (i >= t3.length)
        throw H.ioore(i);
      t3[i] = t6;
      if (t6 < qd) {
        y.dlShiftTo$2(j, t);
        r.subTo$2(t, r);
        while (true) {
          if (i >= t3.length)
            throw H.ioore(i);
          t5 = t3[i];
          if (typeof t5 !== "number")
            return this.divRemTo$3$bailout(20, 0, q, r, 0, t1, y, ts, 0, ms, 0, t2, nsh, 0, ys, y0, 0, t4, t5, t, d1, j, d2, r_array, e, i, 0, qd);
          --qd;
          if (!(t5 < qd))
            break;
          r.subTo$2(t, r);
        }
      }
    }
    if (!t2) {
      r.drShiftTo$2(ys, q);
      if (ts !== ms) {
        r0 = Z.BigInteger$(null, null, null);
        r0.fromInt$1(0);
        r0.subTo$2(q, q);
      }
    }
    r.set$t(ys);
    t4.clamp$0(r);
    if (t1)
      r.rShiftTo$2(nsh, r);
    if (ts < 0) {
      r0 = Z.BigInteger$(null, null, null);
      r0.fromInt$1(0);
      r0.subTo$2(r, r);
    }
  },
  divRemTo$3$bailout: function(state0, m, q, r, pm, t1, y, ts, pt, ms, pm_array, t2, nsh, y_array, ys, y0, t3, t4, t5, t, d1, j, d2, r_array, e, i, t6, qd) {
    switch (state0) {
      case 0:
        pm = J.abs$0$n(m);
        t1 = pm.get$t();
        if (t1 == null)
          throw t1.$le();
        if (t1 <= 0)
          return;
        t1 = this.s;
      case 1:
        state0 = 0;
        if (J.$lt$n(t1, 0)) {
          r0 = Z.BigInteger$(null, null, null);
          r1 = Z.BigInteger$(null, null, null);
          r1.fromInt$1(0);
          r1.subTo$2(this, r0);
          pt = r0;
        } else
          pt = this;
        t1 = pt.t;
        t2 = pm.get$t();
        if (t1 == null)
          throw t1.$lt();
        if (t2 == null)
          throw H.iae(t2);
        if (t1 < t2) {
          if (q != null)
            q.fromInt$1(0);
          if (r != null)
            this.copyTo$1(r);
          return;
        }
        if (r == null)
          r = Z.BigInteger$(null, null, null);
        y = Z.BigInteger$(null, null, null);
        ts = this.s;
      case 2:
        state0 = 0;
        ms = m.get$s();
        pm_array = pm.get$array();
        t1 = $.BigInteger_BI_DB;
      case 3:
        state0 = 0;
        t2 = pm.get$t();
        if (t2 == null)
          throw t2.$sub();
        --t2;
      case 4:
        state0 = 0;
        pm_array.$index;
        t3 = pm_array.data;
        if (t2 >>> 0 !== t2 || t2 >= t3.length)
          throw H.ioore(t2);
        t2 = this.nbits$1(t3[t2]);
        if (t1 == null)
          throw t1.$sub();
        nsh = t1 - t2;
        t1 = nsh > 0;
        if (t1) {
          pm.lShiftTo$2(nsh, y);
          pt.lShiftTo$2(nsh, r);
        } else {
          pm.copyTo$1(y);
          pt.copyTo$1(r);
        }
        ys = y.t;
        y_array = y.array;
        if (ys == null)
          throw ys.$sub();
        t2 = ys - 1;
      case 5:
        state0 = 0;
        y_array.$index;
        t3 = y_array.data;
        if (t2 >>> 0 !== t2 || t2 >= t3.length)
          throw H.ioore(t2);
        y0 = t3[t2];
      case 6:
        state0 = 0;
        t2 = J.getInterceptor(y0);
        if (t2.$eq(y0, 0))
          return;
        t4 = $.BigInteger_BI_F1;
        if (t4 == null)
          throw H.iae(t4);
        t4 = t2.$mul(y0, C.JSInt_methods.$shl(1, t4));
      default:
        if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && ys > 1)
          switch (state0) {
            case 0:
              t2 = ys - 2;
            case 7:
              state0 = 0;
              if (t2 >>> 0 !== t2 || t2 >= t3.length)
                throw H.ioore(t2);
              t2 = t3[t2];
            case 8:
              state0 = 0;
              t5 = $.BigInteger_BI_F2;
            case 9:
              state0 = 0;
              t5 = J.$shr$n(t2, t5);
              t2 = t5;
          }
        else
          t2 = 0;
        yt = J.$add$ns(t4, t2);
        t2 = $.BigInteger_BI_FV;
        if (t2 == null)
          throw t2.$div();
        if (typeof yt !== "number")
          throw H.iae(yt);
        d1 = t2 / yt;
        t2 = $.BigInteger_BI_F1;
        if (t2 == null)
          throw H.iae(t2);
        d2 = C.JSInt_methods.$shl(1, t2) / yt;
        t2 = $.BigInteger_BI_F2;
        if (t2 == null)
          throw H.iae(t2);
        e = C.JSInt_methods.$shl(1, t2);
        i = r.get$t();
        if (i == null)
          throw i.$sub();
        j = i - ys;
        t2 = q == null;
        t = t2 ? Z.BigInteger$(null, null, null) : q;
        y.dlShiftTo$2(j, t);
        r_array = r.get$array();
        t4 = J.getInterceptor$ns(r);
        t5 = t4.compareTo$1(r, t);
      case 10:
        state0 = 0;
      case 11:
        if (state0 === 11 || state0 === 0 && J.$ge$n(t5, 0))
          switch (state0) {
            case 0:
              t5 = r.get$t();
            case 11:
              state0 = 0;
              if (t5 == null)
                throw t5.$add();
              t6 = t5 + 1;
              r.set$t(t6);
              r_array.$indexSet;
              t7 = r_array.data;
              if (t5 > t7.length - 1)
                C.JSArray_methods.set$length(t7, t6);
              if (t5 >>> 0 !== t5 || t5 >= t7.length)
                throw H.ioore(t5);
              t7[t5] = 1;
              r.subTo$2(t, r);
          }
        r0 = Z.BigInteger$(null, null, null);
        r0.fromInt$1(1);
        r0.dlShiftTo$2(ys, t);
        t.subTo$2(y, y);
      case 12:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t5 = y.t;
              case 12:
                state0 = 0;
                if (t5 == null)
                  throw t5.$lt();
                if (!(t5 < ys))
                  break L0;
                t6 = t5 + 1;
                y.t = t6;
                if (t5 > t3.length - 1)
                  C.JSArray_methods.set$length(t3, t6);
                if (t5 >>> 0 !== t5 || t5 >= t3.length)
                  throw H.ioore(t5);
                t3[t5] = 0;
            }
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
        var r0, r1, yt, t7;
        L1:
          while (true)
            switch (state0) {
              case 0:
                --j;
                if (!(j >= 0))
                  break L1;
                --i;
              case 13:
                state0 = 0;
                r_array.$index;
                t3 = r_array.data;
                if (i >>> 0 !== i || i >= t3.length)
                  throw H.ioore(i);
                t5 = t3[i];
              case 14:
                state0 = 0;
              default:
                if (state0 === 15 || state0 === 0 && J.$eq(t5, y0))
                  switch (state0) {
                    case 0:
                      t5 = $.BigInteger_BI_DM;
                    case 15:
                      state0 = 0;
                      qd = t5;
                  }
                else
                  switch (state0) {
                    case 0:
                      if (i >= t3.length)
                        throw H.ioore(i);
                      t5 = t3[i];
                    case 16:
                      state0 = 0;
                      t5 = J.$mul$n(t5, d1);
                      t6 = i - 1;
                      if (t6 < 0 || t6 >= t3.length)
                        throw H.ioore(t6);
                      t6 = t3[t6];
                    case 17:
                      state0 = 0;
                      qd = J.floor$0$n(J.$add$ns(t5, J.$mul$n(J.$add$ns(t6, e), d2)));
                  }
                if (i >= t3.length)
                  throw H.ioore(i);
                t5 = t3[i];
              case 18:
                state0 = 0;
                t6 = y.am$6(0, qd, r, j, 0, ys);
              case 19:
                state0 = 0;
                t6 = J.$add$ns(t5, t6);
                if (i > t3.length - 1)
                  C.JSArray_methods.set$length(t3, i + 1);
                if (i >= t3.length)
                  throw H.ioore(i);
                t3[i] = t6;
              case 20:
                if (state0 === 20 || state0 === 0 && J.$lt$n(t6, qd))
                  switch (state0) {
                    case 0:
                      y.dlShiftTo$2(j, t);
                      r.subTo$2(t, r);
                    case 20:
                      L2:
                        while (true)
                          switch (state0) {
                            case 0:
                              if (i >= t3.length)
                                throw H.ioore(i);
                              t5 = t3[i];
                            case 20:
                              state0 = 0;
                              if (qd == null)
                                throw qd.$sub();
                              --qd;
                              if (!J.$lt$n(t5, qd))
                                break L2;
                              r.subTo$2(t, r);
                          }
                  }
            }
        if (!t2) {
          r.drShiftTo$2(ys, q);
          if (!J.$eq(ts, ms)) {
            r0 = Z.BigInteger$(null, null, null);
            r0.fromInt$1(0);
            r0.subTo$2(q, q);
          }
        }
        r.set$t(ys);
        t4.clamp$0(r);
        if (t1)
          r.rShiftTo$2(nsh, r);
        if (J.$lt$n(ts, 0)) {
          r0 = Z.BigInteger$(null, null, null);
          r0.fromInt$1(0);
          r0.subTo$2(r, r);
        }
    }
  },
  mod$1: function(a) {
    var r, r0, t1;
    r = Z.BigInteger$(null, null, null);
    (J.$lt$n(this.s, 0) ? this.negate_op$0() : this).divRemTo$3(a, null, r);
    if (J.$lt$n(this.s, 0)) {
      r0 = Z.BigInteger$(null, null, null);
      r0.fromInt$1(0);
      t1 = J.$gt$n(r.compareTo$1(r, r0), 0);
    } else
      t1 = false;
    if (t1)
      a.subTo$2(r, r);
    return r;
  },
  invDigit$0: function() {
    var this_array, t1, x, y, t2;
    this_array = this.array;
    t1 = this.t;
    if (t1 == null)
      throw t1.$lt();
    if (t1 < 1)
      return 0;
    this_array.$index;
    t1 = this_array.data;
    if (0 >= t1.length)
      throw H.ioore(0);
    x = t1[0];
    t1 = J.getInterceptor$n(x);
    if (J.$eq(t1.$and(x, 1), 0))
      return 0;
    y = t1.$and(x, 3);
    t2 = J.$mul$n(t1.$and(x, 15), y);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    y = J.$and$n(J.$mul$n(y, 2 - t2), 15);
    t2 = J.$mul$n(t1.$and(x, 255), y);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    y = J.$and$n(J.$mul$n(y, 2 - t2), 255);
    t2 = J.$and$n(J.$mul$n(t1.$and(x, 65535), y), 65535);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    y = J.$and$n(J.$mul$n(y, 2 - t2), 65535);
    t1 = J.$mod$n(t1.$mul(x, y), $.BigInteger_BI_DV);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    y = J.$mod$n(J.$mul$n(y, 2 - t1), $.BigInteger_BI_DV);
    t1 = J.getInterceptor$n(y);
    if (t1.$gt(y, 0)) {
      t1 = $.BigInteger_BI_DV;
      if (t1 == null)
        throw t1.$sub();
      if (typeof y !== "number")
        throw H.iae(y);
      t1 -= y;
    } else
      t1 = t1.$negate(y);
    return t1;
  },
  isEven$0: function(_) {
    var this_array, t1;
    this_array = this.array;
    t1 = this.t;
    if (t1 == null)
      throw t1.$gt();
    if (t1 > 0) {
      this_array.$index;
      t1 = this_array.data;
      if (0 >= t1.length)
        throw H.ioore(0);
      t1 = t1[0];
      if (typeof t1 !== "number")
        return this.isEven$0$bailout(1, t1);
      t1 &= 1;
    } else {
      t1 = this.s;
      if (typeof t1 !== "number")
        return this.isEven$0$bailout(2, t1);
    }
    return t1 === 0;
  },
  isEven$0$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        this_array = this.array;
        t1 = this.t;
        if (t1 == null)
          throw t1.$gt();
      default:
        var this_array;
        if (state0 === 1 || state0 === 0 && t1 > 0)
          switch (state0) {
            case 0:
              this_array.$index;
              t1 = this_array.data;
              if (0 >= t1.length)
                throw H.ioore(0);
              t1 = t1[0];
            case 1:
              state0 = 0;
              t1 = J.$and$n(t1, 1);
          }
        else
          switch (state0) {
            case 0:
              t1 = this.s;
            case 2:
              state0 = 0;
          }
        return J.$eq(t1, 0);
    }
  },
  clone$0: function(_) {
    var r = Z.BigInteger$(null, null, null);
    this.copyTo$1(r);
    return r;
  },
  intValue$0: function() {
    var this_array, t1, t2, t3, t4;
    this_array = this.array;
    t1 = this.s;
    if (typeof t1 !== "number")
      return this.intValue$0$bailout(1, this_array, t1);
    if (t1 < 0) {
      t1 = this.t;
      if (t1 === 1) {
        this_array.$index;
        t1 = this_array.data;
        if (0 >= t1.length)
          throw H.ioore(0);
        t1 = t1[0];
        if (typeof t1 !== "number")
          return this.intValue$0$bailout(2, 0, t1);
        t2 = $.BigInteger_BI_DV;
        if (t2 == null)
          return this.intValue$0$bailout(3, 0, t1, t2);
        return t1 - t2;
      } else if (t1 === 0)
        return -1;
    } else {
      t1 = this.t;
      if (t1 === 1) {
        this_array.$index;
        t1 = this_array.data;
        if (0 >= t1.length)
          throw H.ioore(0);
        return t1[0];
      } else if (t1 === 0)
        return 0;
    }
    this_array.$index;
    t1 = this_array.data;
    if (1 >= t1.length)
      throw H.ioore(1);
    t2 = t1[1];
    if (typeof t2 !== "number")
      return this.intValue$0$bailout(4, 0, t1, t2);
    t3 = $.BigInteger_BI_DB;
    if (t3 == null)
      return this.intValue$0$bailout(5, 0, t1, t2, t3);
    t3 = C.JSInt_methods.$shl(1, 32 - t3);
    t4 = $.BigInteger_BI_DB;
    if (t4 == null)
      throw H.iae(t4);
    t4 = C.JSInt_methods.$shl((t2 & t3 - 1) >>> 0, t4);
    if (0 >= t1.length)
      throw H.ioore(0);
    t1 = t1[0];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return (t4 | t1) >>> 0;
  },
  intValue$0$bailout: function(state0, this_array, t1, t2, t3) {
    switch (state0) {
      case 0:
        this_array = this.array;
        t1 = this.s;
      case 1:
        state0 = 0;
      default:
        if (state0 === 3 || state0 === 2 || state0 === 0 && J.$lt$n(t1, 0))
          switch (state0) {
            case 0:
              t1 = this.t;
            default:
              if (state0 === 3 || state0 === 2 || state0 === 0 && t1 === 1)
                switch (state0) {
                  case 0:
                    this_array.$index;
                    t1 = this_array.data;
                    if (0 >= t1.length)
                      throw H.ioore(0);
                    t1 = t1[0];
                  case 2:
                    state0 = 0;
                    t2 = $.BigInteger_BI_DV;
                  case 3:
                    state0 = 0;
                    return J.$sub$n(t1, t2);
                }
              else if (t1 === 0)
                return -1;
          }
        else {
          t1 = this.t;
          if (t1 === 1) {
            this_array.$index;
            t1 = this_array.data;
            if (0 >= t1.length)
              throw H.ioore(0);
            return t1[0];
          } else if (t1 === 0)
            return 0;
        }
        this_array.$index;
        t1 = this_array.data;
        if (1 >= t1.length)
          throw H.ioore(1);
        t2 = t1[1];
      case 4:
        state0 = 0;
        t3 = $.BigInteger_BI_DB;
      case 5:
        state0 = 0;
        if (t3 == null)
          throw H.iae(t3);
        t3 = J.$and$n(t2, C.JSInt_methods.$shl(1, 32 - t3) - 1);
        t2 = $.BigInteger_BI_DB;
        if (t2 == null)
          throw H.iae(t2);
        t2 = J.$shl$n(t3, t2);
        if (0 >= t1.length)
          throw H.ioore(0);
        t1 = t1[0];
        if (typeof t1 !== "number")
          throw H.iae(t1);
        return J.$or$n(t2, t1);
    }
  },
  chunkSize$1: function(r) {
    var t1 = $.BigInteger_BI_DB;
    if (t1 == null)
      throw H.iae(t1);
    if (typeof r !== "number")
      H.throwExpression(new P.ArgumentError(r));
    return C.JSNumber_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(0.6931471805599453 * t1 / Math.log(r))));
  },
  signum$0: function() {
    var this_array, t1;
    this_array = this.array;
    t1 = this.s;
    if (typeof t1 !== "number")
      return this.signum$0$bailout(1, this_array, t1);
    if (t1 < 0)
      return -1;
    else {
      t1 = this.t;
      if (t1 == null)
        throw t1.$le();
      if (!(t1 <= 0))
        if (t1 === 1) {
          this_array.$index;
          t1 = this_array.data;
          if (0 >= t1.length)
            throw H.ioore(0);
          t1 = t1[0];
          if (typeof t1 !== "number")
            return this.signum$0$bailout(2, 0, t1);
          t1 = t1 <= 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return 0;
      else
        return 1;
    }
  },
  signum$0$bailout: function(state0, this_array, t1) {
    switch (state0) {
      case 0:
        this_array = this.array;
        t1 = this.s;
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 0 && J.$lt$n(t1, 0))
          return -1;
        else
          switch (state0) {
            case 0:
              t1 = this.t;
              if (t1 == null)
                throw t1.$le();
            case 2:
              if (state0 === 2 || state0 === 0 && !(t1 <= 0))
                switch (state0) {
                  case 0:
                  case 2:
                    if (state0 === 2 || state0 === 0 && t1 === 1)
                      switch (state0) {
                        case 0:
                          this_array.$index;
                          t1 = this_array.data;
                          if (0 >= t1.length)
                            throw H.ioore(0);
                          t1 = t1[0];
                        case 2:
                          state0 = 0;
                          t1 = J.$le$n(t1, 0);
                      }
                    else
                      t1 = false;
                }
              else
                t1 = true;
              if (t1)
                return 0;
              else
                return 1;
          }
    }
  },
  toRadix$1: function(b) {
    var cs, a, r, y, z, t1, t2, r0, t3;
    if (b == null)
      return this.toRadix$1$bailout(1, b);
    if (this.signum$0() === 0 || b < 2 || b > 36)
      return "0";
    cs = this.chunkSize$1(b);
    a = Math.pow(b, cs);
    r = Z.BigInteger$(null, null, null);
    r.fromInt$1(a);
    y = Z.BigInteger$(null, null, null);
    z = Z.BigInteger$(null, null, null);
    this.divRemTo$3(r, y, z);
    for (t1 = b >= 2, t2 = b > 36, r0 = ""; y.signum$0() > 0;) {
      t3 = z.intValue$0();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (b < 2 || t2)
        H.throwExpression(new P.RangeError(b));
      r0 = C.JSString_methods.substring$1((a + t3).toString(b), 1) + r0;
      y.divRemTo$3(r, y, z);
    }
    return J.toRadixString$1$n(z.intValue$0(), b) + r0;
  },
  toRadix$1$bailout: function(state0, b) {
    var t1, cs, a, r, y, z, r0, t2;
    if (b == null)
      b = 10;
    if (this.signum$0() !== 0) {
      if (b == null)
        throw b.$lt();
      t1 = b < 2 || b > 36;
    } else
      t1 = true;
    if (t1)
      return "0";
    cs = this.chunkSize$1(b);
    t1 = typeof b !== "number";
    if (t1)
      H.throwExpression(new P.ArgumentError(b));
    a = Math.pow(b, cs);
    r = Z.BigInteger$(null, null, null);
    r.fromInt$1(a);
    y = Z.BigInteger$(null, null, null);
    z = Z.BigInteger$(null, null, null);
    this.divRemTo$3(r, y, z);
    for (r0 = ""; y.signum$0() > 0;) {
      t2 = z.intValue$0();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (t1)
        H.throwExpression(new P.ArgumentError(b));
      if (b == null)
        throw b.$lt();
      if (b < 2 || b > 36)
        H.throwExpression(new P.RangeError(b));
      r0 = C.JSString_methods.substring$1((a + t2).toString(b), 1) + r0;
      y.divRemTo$3(r, y, z);
    }
    return J.toRadixString$1$n(z.intValue$0(), b) + r0;
  },
  fromRadix$2: function(s, b) {
    var cs, d, t1, t2, mi, j, w, i, t3, c, x, r;
    if (b == null)
      return this.fromRadix$2$bailout(1, s, b);
    this.fromInt$1(0);
    cs = this.chunkSize$1(b);
    d = Math.pow(b, cs);
    for (t1 = s.length, t2 = typeof s === "string", mi = false, j = 0, w = 0, i = 0; i < t1; ++i) {
      t3 = this.BI_RC;
      if (i >= t1)
        H.throwExpression(new P.RangeError("value " + i));
      c = t3.$index(t3, s.charCodeAt(i));
      x = c == null ? -1 : c;
      if (J.$lt$n(x, 0)) {
        if (t2) {
          if (0 >= t1)
            throw H.ioore(0);
          if (s[0] === "-" && this.signum$0() === 0)
            mi = true;
        }
        continue;
      }
      if (typeof x !== "number")
        throw H.iae(x);
      w = b * w + x;
      ++j;
      if (j >= cs) {
        this.dMultiply$1(d);
        this.dAddOffset$2(w, 0);
        j = 0;
        w = 0;
      }
    }
    if (j > 0) {
      this.dMultiply$1(Math.pow(b, j));
      if (w !== 0)
        this.dAddOffset$2(w, 0);
    }
    if (mi) {
      r = Z.BigInteger$(null, null, null);
      r.fromInt$1(0);
      r.subTo$2(this, this);
    }
  },
  fromRadix$2$bailout: function(state0, s, b) {
    var cs, t1, d, t2, t3, mi, j, w, i, t4, c, x, r;
    this.fromInt$1(0);
    if (b == null)
      b = 10;
    cs = this.chunkSize$1(b);
    t1 = typeof b !== "number";
    if (t1)
      H.throwExpression(new P.ArgumentError(b));
    d = Math.pow(b, cs);
    for (t2 = s.length, t3 = typeof s === "string", mi = false, j = 0, w = 0, i = 0; i < t2; ++i) {
      t4 = this.BI_RC;
      if (i >= t2)
        H.throwExpression(new P.RangeError("value " + i));
      c = t4.$index(t4, s.charCodeAt(i));
      x = c == null ? -1 : c;
      if (J.$lt$n(x, 0)) {
        if (t3) {
          if (0 >= t2)
            throw H.ioore(0);
          if (s[0] === "-" && this.signum$0() === 0)
            mi = true;
        }
        continue;
      }
      if (b == null)
        throw b.$mul();
      if (typeof x !== "number")
        throw H.iae(x);
      w = b * w + x;
      ++j;
      if (j >= cs) {
        this.dMultiply$1(d);
        this.dAddOffset$2(w, 0);
        j = 0;
        w = 0;
      }
    }
    if (j > 0) {
      if (t1)
        H.throwExpression(new P.ArgumentError(b));
      this.dMultiply$1(Math.pow(b, j));
      if (w !== 0)
        this.dAddOffset$2(w, 0);
    }
    if (mi) {
      r = Z.BigInteger$(null, null, null);
      r.fromInt$1(0);
      r.subTo$2(this, this);
    }
  },
  bitwiseTo$3: function(a, op, r) {
    var this_array, a_array, r_array, m, i, t1, t2, t3, f;
    this_array = this.array;
    a_array = a.get$array();
    r_array = r.array;
    m = P.min(a.get$t(), this.t);
    if (m == null)
      throw H.iae(m);
    if (m !== (m | 0))
      return this.bitwiseTo$3$bailout(1, a, op, r, a_array, m, this_array, r_array);
    i = 0;
    for (; i < m; ++i) {
      this_array.$index;
      t1 = this_array.data;
      if (i >= t1.length)
        throw H.ioore(i);
      t1 = t1[i];
      a_array.$index;
      t2 = a_array.data;
      if (i >= t2.length)
        throw H.ioore(i);
      t2 = op.call$2(t1, t2[i]);
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i + 1);
      if (i >= t1.length)
        throw H.ioore(i);
      t1[i] = t2;
    }
    t1 = a.get$t();
    t2 = this.t;
    if (t1 == null)
      throw t1.$lt();
    if (t2 == null)
      throw H.iae(t2);
    t3 = $.BigInteger_BI_DM;
    if (t1 < t2) {
      f = J.$and$n(a.get$s(), t3);
      if (f !== (f | 0))
        return this.bitwiseTo$3$bailout(2, a, op, r, 0, m, this_array, r_array, f);
      i = m;
      while (true) {
        t1 = this.t;
        if (t1 == null)
          throw H.iae(t1);
        if (!(i < t1))
          break;
        this_array.$index;
        t1 = this_array.data;
        if (i < 0 || i >= t1.length)
          throw H.ioore(i);
        t1 = op.call$2(t1[i], f);
        r_array.$indexSet;
        t2 = r_array.data;
        if (i > t2.length - 1)
          C.JSArray_methods.set$length(t2, i + 1);
        if (i >= t2.length)
          throw H.ioore(i);
        t2[i] = t1;
        ++i;
      }
      r.t = t1;
    } else {
      f = J.$and$n(this.s, t3);
      if (f !== (f | 0))
        return this.bitwiseTo$3$bailout(3, a, op, r, a_array, m, 0, r_array, f);
      i = m;
      while (true) {
        t1 = a.get$t();
        if (t1 == null)
          throw H.iae(t1);
        if (!(i < t1))
          break;
        a_array.$index;
        t1 = a_array.data;
        if (i < 0 || i >= t1.length)
          throw H.ioore(i);
        t1 = op.call$2(f, t1[i]);
        r_array.$indexSet;
        t2 = r_array.data;
        if (i > t2.length - 1)
          C.JSArray_methods.set$length(t2, i + 1);
        if (i >= t2.length)
          throw H.ioore(i);
        t2[i] = t1;
        ++i;
      }
      r.t = t1;
    }
    r.s = op.call$2(this.s, a.get$s());
    r.clamp$0(r);
  },
  bitwiseTo$3$bailout: function(state0, a, op, r, a_array, m, this_array, r_array, f) {
    switch (state0) {
      case 0:
        this_array = this.array;
        a_array = a.get$array();
        r_array = r.array;
        m = P.min(a.get$t(), this.t);
        if (m == null)
          throw H.iae(m);
      case 1:
        state0 = 0;
        i = 0;
        for (; i < m; ++i) {
          this_array.$index;
          t1 = this_array.data;
          if (i >= t1.length)
            throw H.ioore(i);
          t1 = t1[i];
          a_array.$index;
          t2 = a_array.data;
          if (i >= t2.length)
            throw H.ioore(i);
          t2 = op.call$2(t1, t2[i]);
          r_array.$indexSet;
          t1 = r_array.data;
          if (i > t1.length - 1)
            C.JSArray_methods.set$length(t1, i + 1);
          if (i >= t1.length)
            throw H.ioore(i);
          t1[i] = t2;
        }
        t1 = a.get$t();
        t2 = this.t;
        if (t1 == null)
          throw t1.$lt();
        if (t2 == null)
          throw H.iae(t2);
        t3 = $.BigInteger_BI_DM;
      default:
        var i, t1, t2, t3;
        if (state0 === 2 || state0 === 0 && t1 < t2)
          switch (state0) {
            case 0:
              f = J.$and$n(a.get$s(), t3);
            case 2:
              state0 = 0;
              i = m;
              while (true) {
                t1 = this.t;
                if (t1 == null)
                  throw H.iae(t1);
                if (!(i < t1))
                  break;
                this_array.$index;
                t1 = this_array.data;
                if (i >>> 0 !== i || i >= t1.length)
                  throw H.ioore(i);
                t1 = op.call$2(t1[i], f);
                r_array.$indexSet;
                t2 = r_array.data;
                if (i > t2.length - 1)
                  C.JSArray_methods.set$length(t2, i + 1);
                if (i >= t2.length)
                  throw H.ioore(i);
                t2[i] = t1;
                ++i;
              }
              r.t = t1;
          }
        else
          switch (state0) {
            case 0:
              f = J.$and$n(this.s, t3);
            case 3:
              state0 = 0;
              i = m;
              while (true) {
                t1 = a.get$t();
                if (t1 == null)
                  throw H.iae(t1);
                if (!(i < t1))
                  break;
                a_array.$index;
                t1 = a_array.data;
                if (i >>> 0 !== i || i >= t1.length)
                  throw H.ioore(i);
                t1 = op.call$2(f, t1[i]);
                r_array.$indexSet;
                t2 = r_array.data;
                if (i > t2.length - 1)
                  C.JSArray_methods.set$length(t2, i + 1);
                if (i >= t2.length)
                  throw H.ioore(i);
                t2[i] = t1;
                ++i;
              }
              r.t = t1;
          }
        r.s = op.call$2(this.s, a.get$s());
        r.clamp$0(r);
    }
  },
  op_and$2: function(x, y) {
    return J.$and$n(x, y);
  },
  get$op_and: function() {
    return new Z.BoundClosure$2(this, "op_and$2", null);
  },
  op_or$2: function(x, y) {
    return J.$or$n(x, y);
  },
  get$op_or: function() {
    return new Z.BoundClosure$2(this, "op_or$2", null);
  },
  op_xor$2: function(x, y) {
    return J.$xor$n(x, y);
  },
  get$op_xor: function() {
    return new Z.BoundClosure$2(this, "op_xor$2", null);
  },
  not$0: function() {
    var this_array, r, r_array, i, t1, t2, t3;
    this_array = this.array;
    r = Z.BigInteger$(null, null, null);
    r_array = r.array;
    i = 0;
    while (true) {
      t1 = this.t;
      if (t1 == null)
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = $.BigInteger_BI_DM;
      this_array.$index;
      t2 = this_array.data;
      if (i >= t2.length)
        throw H.ioore(i);
      t2 = J.$not$i(t2[i]);
      if (t1 == null)
        throw t1.$and();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      r_array.$indexSet;
      t3 = r_array.data;
      if (i > t3.length - 1)
        C.JSArray_methods.set$length(t3, i + 1);
      if (i >= t3.length)
        throw H.ioore(i);
      t3[i] = (t1 & t2) >>> 0;
      ++i;
    }
    r.t = t1;
    r.s = J.$not$i(this.s);
    return r;
  },
  addTo$2: function(a, r) {
    var this_array, a_array, r_array, m, i, c, t1, t2, i0;
    this_array = this.array;
    a_array = a.get$array();
    r_array = r.array;
    m = P.min(a.get$t(), this.t);
    if (m == null)
      throw H.iae(m);
    i = 0;
    c = 0;
    for (; i < m; i = i0) {
      this_array.$index;
      t1 = this_array.data;
      if (i >= t1.length)
        throw H.ioore(i);
      t1 = t1[i];
      if (typeof t1 !== "number")
        return this.addTo$2$bailout(1, a, r, i, c, a_array, t1, m, this_array, r_array);
      a_array.$index;
      t2 = a_array.data;
      if (i >= t2.length)
        throw H.ioore(i);
      t2 = t2[i];
      if (typeof t2 !== "number")
        return this.addTo$2$bailout(2, a, r, i, c, a_array, t1, m, this_array, r_array, t2);
      c += t1 + t2;
      i0 = i + 1;
      t2 = $.BigInteger_BI_DM;
      if (t2 == null)
        return this.addTo$2$bailout(3, a, r, i, c, a_array, 0, m, this_array, r_array, t2, i0);
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i0);
      if (i >= t1.length)
        throw H.ioore(i);
      t1[i] = (c & t2) >>> 0;
      t1 = $.BigInteger_BI_DB;
      if (t1 == null)
        return this.addTo$2$bailout(4, a, r, 0, c, a_array, t1, m, this_array, r_array, 0, i0);
      c = C.JSNumber_methods.$shr(c, t1);
    }
    t1 = a.get$t();
    t2 = this.t;
    if (t1 == null)
      throw t1.$lt();
    if (t2 == null)
      throw H.iae(t2);
    if (t1 < t2) {
      t1 = a.get$s();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      c += t1;
      while (true) {
        t1 = this.t;
        if (t1 == null)
          throw H.iae(t1);
        if (!(i < t1))
          break;
        this_array.$index;
        t1 = this_array.data;
        if (i >= t1.length)
          throw H.ioore(i);
        t1 = t1[i];
        if (typeof t1 !== "number")
          throw H.iae(t1);
        c += t1;
        i0 = i + 1;
        t1 = $.BigInteger_BI_DM;
        if (t1 == null)
          return this.addTo$2$bailout(5, 0, r, i, c, 0, t1, 0, this_array, r_array, 0, i0);
        r_array.$indexSet;
        t2 = r_array.data;
        if (i > t2.length - 1)
          C.JSArray_methods.set$length(t2, i0);
        if (i >= t2.length)
          throw H.ioore(i);
        t2[i] = (c & t1) >>> 0;
        t1 = $.BigInteger_BI_DB;
        if (t1 == null)
          return this.addTo$2$bailout(6, 0, r, 0, c, 0, t1, 0, this_array, r_array, 0, i0);
        c = C.JSNumber_methods.$shr(c, t1);
        i = i0;
      }
      t1 = this.s;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      c += t1;
    } else {
      t1 = this.s;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      c += t1;
      while (true) {
        t1 = a.get$t();
        if (t1 == null)
          throw H.iae(t1);
        if (!(i < t1))
          break;
        a_array.$index;
        t1 = a_array.data;
        if (i >= t1.length)
          throw H.ioore(i);
        t1 = t1[i];
        if (typeof t1 !== "number")
          throw H.iae(t1);
        c += t1;
        i0 = i + 1;
        t1 = $.BigInteger_BI_DM;
        if (t1 == null)
          return this.addTo$2$bailout(7, a, r, i, c, a_array, t1, 0, 0, r_array, 0, i0);
        r_array.$indexSet;
        t2 = r_array.data;
        if (i > t2.length - 1)
          C.JSArray_methods.set$length(t2, i0);
        if (i >= t2.length)
          throw H.ioore(i);
        t2[i] = (c & t1) >>> 0;
        t1 = $.BigInteger_BI_DB;
        if (t1 == null)
          return this.addTo$2$bailout(8, a, r, 0, c, a_array, t1, 0, 0, r_array, 0, i0);
        c = C.JSNumber_methods.$shr(c, t1);
        i = i0;
      }
      t1 = a.get$s();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      c += t1;
    }
    r.s = c < 0 ? -1 : 0;
    if (c > 0) {
      i0 = i + 1;
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i0);
      if (i >= t1.length)
        throw H.ioore(i);
      t1[i] = c;
      i = i0;
    } else if (c < -1) {
      i0 = i + 1;
      t1 = $.BigInteger_BI_DV;
      if (t1 == null)
        return this.addTo$2$bailout(9, 0, r, i, c, 0, t1, 0, 0, r_array, 0, i0);
      r_array.$indexSet;
      t2 = r_array.data;
      if (i > t2.length - 1)
        C.JSArray_methods.set$length(t2, i0);
      if (i >= t2.length)
        throw H.ioore(i);
      t2[i] = t1 + c;
      i = i0;
    }
    r.t = i;
    r.clamp$0(r);
  },
  addTo$2$bailout: function(state0, a, r, i, c, a_array, t1, m, this_array, r_array, t2, i0) {
    switch (state0) {
      case 0:
        this_array = this.array;
        a_array = a.get$array();
        r_array = r.array;
        m = P.min(a.get$t(), this.t);
        if (m == null)
          throw H.iae(m);
        i = 0;
        c = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < m))
                  break L0;
                this_array.$index;
                t1 = this_array.data;
                if (i >= t1.length)
                  throw H.ioore(i);
                t1 = t1[i];
              case 1:
                state0 = 0;
                a_array.$index;
                t2 = a_array.data;
                if (i >= t2.length)
                  throw H.ioore(i);
                t2 = t2[i];
              case 2:
                state0 = 0;
                t2 = J.$add$ns(t1, t2);
                if (typeof t2 !== "number")
                  throw H.iae(t2);
                c += t2;
                i0 = i + 1;
                t2 = $.BigInteger_BI_DM;
              case 3:
                state0 = 0;
                if (t2 == null)
                  throw H.iae(t2);
                r_array.$indexSet;
                t1 = r_array.data;
                if (i > t1.length - 1)
                  C.JSArray_methods.set$length(t1, i0);
                if (i >= t1.length)
                  throw H.ioore(i);
                t1[i] = (c & t2) >>> 0;
                t1 = $.BigInteger_BI_DB;
              case 4:
                state0 = 0;
                if (t1 == null)
                  throw H.iae(t1);
                c = C.JSNumber_methods.$shr(c, t1);
                i = i0;
            }
        t1 = a.get$t();
        t2 = this.t;
        if (t1 == null)
          throw t1.$lt();
        if (t2 == null)
          throw H.iae(t2);
      case 5:
      case 6:
      case 7:
      case 8:
        if (state0 === 6 || state0 === 5 || state0 === 0 && t1 < t2)
          switch (state0) {
            case 0:
              t1 = a.get$s();
              if (typeof t1 !== "number")
                throw H.iae(t1);
              c += t1;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = this.t;
                      if (t1 == null)
                        throw H.iae(t1);
                      if (!(i < t1))
                        break L1;
                      this_array.$index;
                      t1 = this_array.data;
                      if (i >= t1.length)
                        throw H.ioore(i);
                      t1 = t1[i];
                      if (typeof t1 !== "number")
                        throw H.iae(t1);
                      c += t1;
                      i0 = i + 1;
                      t1 = $.BigInteger_BI_DM;
                    case 5:
                      state0 = 0;
                      if (t1 == null)
                        throw H.iae(t1);
                      r_array.$indexSet;
                      t2 = r_array.data;
                      if (i > t2.length - 1)
                        C.JSArray_methods.set$length(t2, i0);
                      if (i >= t2.length)
                        throw H.ioore(i);
                      t2[i] = (c & t1) >>> 0;
                      t1 = $.BigInteger_BI_DB;
                    case 6:
                      state0 = 0;
                      if (t1 == null)
                        throw H.iae(t1);
                      c = C.JSNumber_methods.$shr(c, t1);
                      i = i0;
                  }
              t1 = this.s;
              if (typeof t1 !== "number")
                throw H.iae(t1);
              c += t1;
          }
        else
          switch (state0) {
            case 0:
              t1 = this.s;
              if (typeof t1 !== "number")
                throw H.iae(t1);
              c += t1;
            default:
              L2:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = a.get$t();
                      if (t1 == null)
                        throw H.iae(t1);
                      if (!(i < t1))
                        break L2;
                      a_array.$index;
                      t1 = a_array.data;
                      if (i >= t1.length)
                        throw H.ioore(i);
                      t1 = t1[i];
                      if (typeof t1 !== "number")
                        throw H.iae(t1);
                      c += t1;
                      i0 = i + 1;
                      t1 = $.BigInteger_BI_DM;
                    case 7:
                      state0 = 0;
                      if (t1 == null)
                        throw H.iae(t1);
                      r_array.$indexSet;
                      t2 = r_array.data;
                      if (i > t2.length - 1)
                        C.JSArray_methods.set$length(t2, i0);
                      if (i >= t2.length)
                        throw H.ioore(i);
                      t2[i] = (c & t1) >>> 0;
                      t1 = $.BigInteger_BI_DB;
                    case 8:
                      state0 = 0;
                      if (t1 == null)
                        throw H.iae(t1);
                      c = C.JSNumber_methods.$shr(c, t1);
                      i = i0;
                  }
              t1 = a.get$s();
              if (typeof t1 !== "number")
                throw H.iae(t1);
              c += t1;
          }
        r.s = c < 0 ? -1 : 0;
      case 9:
        if (state0 === 0 && c > 0) {
          i0 = i + 1;
          r_array.$indexSet;
          t1 = r_array.data;
          if (i > t1.length - 1)
            C.JSArray_methods.set$length(t1, i0);
          if (i >= t1.length)
            throw H.ioore(i);
          t1[i] = c;
          i = i0;
        } else
          switch (state0) {
            case 0:
            case 9:
              if (state0 === 9 || state0 === 0 && c < -1)
                switch (state0) {
                  case 0:
                    i0 = i + 1;
                    t1 = $.BigInteger_BI_DV;
                  case 9:
                    state0 = 0;
                    if (t1 == null)
                      throw t1.$add();
                    r_array.$indexSet;
                    t2 = r_array.data;
                    if (i > t2.length - 1)
                      C.JSArray_methods.set$length(t2, i0);
                    if (i >= t2.length)
                      throw H.ioore(i);
                    t2[i] = t1 + c;
                    i = i0;
                }
          }
        r.t = i;
        r.clamp$0(r);
    }
  },
  add$1: function(_, a) {
    var r = Z.BigInteger$(null, null, null);
    this.addTo$2(a, r);
    return r;
  },
  subtract$1: function(a) {
    var r = Z.BigInteger$(null, null, null);
    this.subTo$2(a, r);
    return r;
  },
  multiply$1: function(a) {
    var r = Z.BigInteger$(null, null, null);
    this.multiplyTo$2(a, r);
    return r;
  },
  divide$1: function(a) {
    var r = Z.BigInteger$(null, null, null);
    this.divRemTo$3(a, r, null);
    return r;
  },
  remainder$1: function(_, a) {
    var r = Z.BigInteger$(null, null, null);
    this.divRemTo$3(a, null, r);
    return r;
  },
  dMultiply$1: function(n) {
    var this_array, t1, t2, t3;
    this_array = this.array;
    t1 = this.t;
    if (t1 !== (t1 | 0))
      return this.dMultiply$1$bailout(1, n, this_array, t1);
    t2 = this.am$6(0, n - 1, this, 0, 0, t1);
    this_array.$indexSet;
    t3 = this_array.data;
    if (t1 > t3.length - 1)
      C.JSArray_methods.set$length(t3, t1 + 1);
    if (t1 < 0 || t1 >= t3.length)
      throw H.ioore(t1);
    t3[t1] = t2;
    t1 = this.t;
    if (t1 == null)
      throw t1.$add();
    this.t = t1 + 1;
    this.clamp$0(this);
  },
  dMultiply$1$bailout: function(state0, n, this_array, t1) {
    var t2, t3, t4;
    t2 = this.am$6(0, n - 1, this, 0, 0, t1);
    this_array.$indexSet;
    t3 = this_array.data;
    t4 = t3.length;
    if (t1 == null)
      throw t1.$gt();
    if (t1 > t4 - 1)
      C.JSArray_methods.set$length(t3, t1 + 1);
    if (t1 >>> 0 !== t1 || t1 >= t3.length)
      throw H.ioore(t1);
    t3[t1] = t2;
    t1 = this.t;
    if (t1 == null)
      throw t1.$add();
    this.t = t1 + 1;
    this.clamp$0(this);
  },
  dAddOffset$2: function(n, w) {
    var this_array, t1, t2, t3, t4;
    if (w !== (w | 0))
      return this.dAddOffset$2$bailout(1, n, w);
    this_array = this.array;
    while (true) {
      t1 = this.t;
      if (t1 !== (t1 | 0))
        return this.dAddOffset$2$bailout(2, n, w, this_array, t1);
      this_array.$indexSet;
      if (!(t1 <= w))
        break;
      t2 = t1 + 1;
      this.t = t2;
      t3 = this_array.data;
      if (t1 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t2);
      if (t1 < 0 || t1 >= t3.length)
        throw H.ioore(t1);
      t3[t1] = 0;
    }
    this_array.$index;
    t1 = this_array.data;
    t2 = t1.length;
    if (w < 0 || w >= t2)
      throw H.ioore(w);
    t3 = t1[w];
    if (typeof t3 !== "number")
      return this.dAddOffset$2$bailout(3, n, w, 0, t1, t3);
    if (w > t2 - 1)
      C.JSArray_methods.set$length(t1, w + 1);
    if (w >= t1.length)
      throw H.ioore(w);
    t1[w] = t3 + n;
    while (true) {
      t2 = t1.length;
      if (w >= t2)
        throw H.ioore(w);
      t3 = t1[w];
      if (typeof t3 !== "number")
        return this.dAddOffset$2$bailout(4, 0, w, 0, t1, t3);
      t4 = $.BigInteger_BI_DV;
      if (t4 == null)
        return this.dAddOffset$2$bailout(5, 0, w, 0, t1, t3, t4);
      if (!(t3 >= t4))
        break;
      if (w > t2 - 1)
        C.JSArray_methods.set$length(t1, w + 1);
      if (w >= t1.length)
        throw H.ioore(w);
      t1[w] = t3 - t4;
      ++w;
      t2 = this.t;
      if (t2 !== (t2 | 0))
        return this.dAddOffset$2$bailout(8, 0, w, 0, t1, t2);
      if (w >= t2) {
        t3 = t2 + 1;
        this.t = t3;
        if (t2 > t1.length - 1)
          C.JSArray_methods.set$length(t1, t3);
        if (t2 < 0 || t2 >= t1.length)
          throw H.ioore(t2);
        t1[t2] = 0;
      }
      t2 = t1.length;
      if (w >= t2)
        throw H.ioore(w);
      t3 = t1[w];
      if (typeof t3 !== "number")
        return this.dAddOffset$2$bailout(9, 0, w, 0, t1, t3);
      if (w > t2 - 1)
        C.JSArray_methods.set$length(t1, w + 1);
      if (w >= t1.length)
        throw H.ioore(w);
      t1[w] = t3 + 1;
    }
  },
  dAddOffset$2$bailout: function(state0, n, w, this_array, t1, t2, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this_array = this.array;
      case 2:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.t;
              case 2:
                state0 = 0;
                if (t1 == null)
                  throw t1.$le();
                this_array.$indexSet;
                if (!(t1 <= w))
                  break L0;
                t2 = t1 + 1;
                this.t = t2;
                t3 = this_array.data;
                if (t1 > t3.length - 1)
                  C.JSArray_methods.set$length(t3, t2);
                if (t1 >>> 0 !== t1 || t1 >= t3.length)
                  throw H.ioore(t1);
                t3[t1] = 0;
            }
        this_array.$index;
        t1 = this_array.data;
        if (w >>> 0 !== w || w >= t1.length)
          throw H.ioore(w);
        t2 = t1[w];
      case 3:
        state0 = 0;
        t2 = J.$add$ns(t2, n);
        if (w > t1.length - 1)
          C.JSArray_methods.set$length(t1, w + 1);
        if (w >= t1.length)
          throw H.ioore(w);
        t1[w] = t2;
      default:
        L1:
          while (true)
            switch (state0) {
              case 0:
                if (w >= t1.length)
                  throw H.ioore(w);
                t2 = t1[w];
              case 4:
                state0 = 0;
                t3 = $.BigInteger_BI_DV;
              case 5:
                state0 = 0;
                if (!J.$ge$n(t2, t3))
                  break L1;
                if (w >= t1.length)
                  throw H.ioore(w);
                t2 = t1[w];
              case 6:
                state0 = 0;
                t3 = $.BigInteger_BI_DV;
              case 7:
                state0 = 0;
                t3 = J.$sub$n(t2, t3);
                if (w > t1.length - 1)
                  C.JSArray_methods.set$length(t1, w + 1);
                if (w >= t1.length)
                  throw H.ioore(w);
                t1[w] = t3;
                ++w;
                t2 = this.t;
              case 8:
                state0 = 0;
                if (t2 == null)
                  throw H.iae(t2);
                if (w >= t2) {
                  t3 = t2 + 1;
                  this.t = t3;
                  if (t2 > t1.length - 1)
                    C.JSArray_methods.set$length(t1, t3);
                  if (t2 >>> 0 !== t2 || t2 >= t1.length)
                    throw H.ioore(t2);
                  t1[t2] = 0;
                }
                if (w >= t1.length)
                  throw H.ioore(w);
                t2 = t1[w];
              case 9:
                state0 = 0;
                t2 = J.$add$ns(t2, 1);
                if (w > t1.length - 1)
                  C.JSArray_methods.set$length(t1, w + 1);
                if (w >= t1.length)
                  throw H.ioore(w);
                t1[w] = t2;
            }
    }
  },
  multiplyLowerTo$3: function(a, n, r) {
    var r_array, a_array, t1, t2, i, j, t3;
    r_array = r.array;
    a_array = a.array;
    t1 = this.t;
    t2 = a.t;
    if (t1 == null)
      throw t1.$add();
    if (t2 == null)
      throw H.iae(t2);
    i = P.min(t1 + t2, n);
    if (i == null)
      return this.multiplyLowerTo$3$bailout(1, a_array, n, r, a, i, r_array);
    r.s = 0;
    r.t = i;
    for (; i > 0;) {
      --i;
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i + 1);
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(i);
      t1[i] = 0;
    }
    t1 = r.t;
    t2 = this.t;
    if (t1 == null)
      throw t1.$sub();
    if (t2 == null)
      throw H.iae(t2);
    j = t1 - t2;
    for (; i < j; ++i) {
      t1 = this.t;
      if (t1 == null)
        throw H.iae(t1);
      t2 = i + t1;
      a_array.$index;
      t3 = a_array.data;
      if (i >>> 0 !== i || i >= t3.length)
        throw H.ioore(i);
      t1 = this.am$6(0, t3[i], r, i, 0, t1);
      r_array.$indexSet;
      t3 = r_array.data;
      if (t2 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t2 + 1);
      if (t2 >>> 0 !== t2 || t2 >= t3.length)
        throw H.ioore(t2);
      t3[t2] = t1;
    }
    j = P.min(a.t, n);
    if (j == null)
      throw H.iae(j);
    for (; i < j; ++i) {
      a_array.$index;
      t1 = a_array.data;
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(i);
      this.am$6(0, t1[i], r, i, 0, n - i);
    }
    r.clamp$0(r);
  },
  multiplyLowerTo$3$bailout: function(state0, a_array, n, r, a, i, r_array) {
    var t1, t2, j, t3;
    r.s = 0;
    r.t = i;
    while (true) {
      if (i == null)
        throw i.$gt();
      if (!(i > 0))
        break;
      --i;
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i + 1);
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(i);
      t1[i] = 0;
    }
    t1 = r.t;
    t2 = this.t;
    if (t1 == null)
      throw t1.$sub();
    if (t2 == null)
      throw H.iae(t2);
    j = t1 - t2;
    for (; i < j; ++i) {
      t1 = this.t;
      if (t1 == null)
        throw H.iae(t1);
      t2 = i + t1;
      a_array.$index;
      t3 = a_array.data;
      if (i >>> 0 !== i || i >= t3.length)
        throw H.ioore(i);
      t1 = this.am$6(0, t3[i], r, i, 0, t1);
      r_array.$indexSet;
      t3 = r_array.data;
      if (t2 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t2 + 1);
      if (t2 >>> 0 !== t2 || t2 >= t3.length)
        throw H.ioore(t2);
      t3[t2] = t1;
    }
    j = P.min(a.t, n);
    if (j == null)
      throw H.iae(j);
    for (; i < j; ++i) {
      a_array.$index;
      t1 = a_array.data;
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(i);
      this.am$6(0, t1[i], r, i, 0, n - i);
    }
    r.clamp$0(r);
  },
  multiplyUpperTo$3: function(a, n, r) {
    var r_array, a_array, t1, t2, i, t3;
    r_array = r.array;
    a_array = a.array;
    --n;
    t1 = this.t;
    t2 = a.t;
    if (t1 == null)
      throw t1.$add();
    if (t2 == null)
      throw H.iae(t2);
    i = t1 + t2 - n;
    r.t = i;
    r.s = 0;
    for (; --i, i >= 0;) {
      r_array.$indexSet;
      t1 = r_array.data;
      if (i > t1.length - 1)
        C.JSArray_methods.set$length(t1, i + 1);
      if (i >>> 0 !== i || i >= t1.length)
        throw H.ioore(i);
      t1[i] = 0;
    }
    t1 = this.t;
    if (t1 == null)
      throw H.iae(t1);
    i = P.max(n - t1, 0);
    if (i !== (i | 0))
      return this.multiplyUpperTo$3$bailout(1, r_array, a_array, n, r, a, i);
    while (true) {
      t1 = a.t;
      if (t1 == null)
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.t;
      if (t1 == null)
        throw t1.$add();
      t1 = t1 + i - n;
      a_array.$index;
      t2 = a_array.data;
      if (i < 0 || i >= t2.length)
        throw H.ioore(i);
      t2 = this.am$6(n - i, t2[i], r, 0, 0, t1);
      r_array.$indexSet;
      t3 = r_array.data;
      if (t1 > t3.length - 1)
        C.JSArray_methods.set$length(t3, t1 + 1);
      if (t1 >>> 0 !== t1 || t1 >= t3.length)
        throw H.ioore(t1);
      t3[t1] = t2;
      ++i;
    }
    r.clamp$0(r);
    r.drShiftTo$2(1, r);
  },
  multiplyUpperTo$3$bailout: function(state0, r_array, a_array, n, r, a, i) {
    switch (state0) {
      case 0:
        r_array = r.array;
        a_array = a.array;
        --n;
        t1 = this.t;
        t2 = a.t;
        if (t1 == null)
          throw t1.$add();
        if (t2 == null)
          throw H.iae(t2);
        i = t1 + t2 - n;
        r.t = i;
        r.s = 0;
        for (; --i, i >= 0;) {
          r_array.$indexSet;
          t1 = r_array.data;
          if (i > t1.length - 1)
            C.JSArray_methods.set$length(t1, i + 1);
          if (i >>> 0 !== i || i >= t1.length)
            throw H.ioore(i);
          t1[i] = 0;
        }
        t1 = this.t;
        if (t1 == null)
          throw H.iae(t1);
        i = P.max(n - t1, 0);
      case 1:
        var t1, t2, t3;
        state0 = 0;
        while (true) {
          t1 = a.t;
          if (t1 == null)
            throw H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.t;
          if (t1 == null)
            throw t1.$add();
          t1 = t1 + i - n;
          a_array.$index;
          t2 = a_array.data;
          if (i >>> 0 !== i || i >= t2.length)
            throw H.ioore(i);
          t2 = this.am$6(n - i, t2[i], r, 0, 0, t1);
          r_array.$indexSet;
          t3 = r_array.data;
          if (t1 > t3.length - 1)
            C.JSArray_methods.set$length(t3, t1 + 1);
          if (t1 >>> 0 !== t1 || t1 >= t3.length)
            throw H.ioore(t1);
          t3[t1] = t2;
          ++i;
        }
        r.clamp$0(r);
        r.drShiftTo$2(1, r);
    }
  },
  modPow$2: function(e, m) {
    var e_array, i, r, k, z, g, k1, km, g2, n, t1, j, r2, is1, t, t2, w, t3;
    e_array = e.array;
    i = e.bitLength$0(e);
    r = Z.BigInteger$(null, null, null);
    r.fromInt$1(1);
    if (i <= 0)
      return r;
    else if (i < 18)
      k = 1;
    else if (i < 48)
      k = 3;
    else if (i < 144)
      k = 4;
    else
      k = i < 768 ? 5 : 6;
    if (i < 8)
      z = new Z.Classic(m);
    else
      z = m.isEven$0(m) ? Z.Barrett$(m) : Z.Montgomery$(m);
    g = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    k1 = k - 1;
    km = C.JSInt_methods.$shl(1, k) - 1;
    g.$indexSet(g, 1, z.convert$1(this));
    if (k > 1) {
      g2 = Z.BigInteger$(null, null, null);
      z.sqrTo$2(g.$index(g, 1), g2);
      for (n = 3; n <= km;) {
        g.$indexSet(g, n, Z.BigInteger$(null, null, null));
        z.mulTo$3(g2, g.$index(g, n - 2), g.$index(g, n));
        n += 2;
      }
    }
    t1 = e.t;
    if (t1 == null)
      throw t1.$sub();
    j = t1 - 1;
    r2 = Z.BigInteger$(null, null, null);
    e_array.$index;
    t1 = e_array.data;
    if (j >>> 0 !== j || j >= t1.length)
      throw H.ioore(j);
    i = this.nbits$1(t1[j]) - 1;
    for (is1 = true, t = null; j >= 0; is1 = false) {
      t2 = t1.length;
      if (i >= k1) {
        if (j >= t2)
          throw H.ioore(j);
        w = J.$and$n(J.$shr$n(t1[j], i - k1), km);
      } else {
        if (j >= t2)
          throw H.ioore(j);
        w = J.$shl$n(J.$and$n(t1[j], C.JSInt_methods.$shl(1, i + 1) - 1), k1 - i);
        if (j > 0) {
          t2 = j - 1;
          if (t2 >= t1.length)
            throw H.ioore(t2);
          t2 = t1[t2];
          t3 = $.BigInteger_BI_DB;
          if (t3 == null)
            throw t3.$add();
          w = J.$or$n(w, J.$shr$n(t2, t3 + i - k1));
        }
      }
      if (w !== (w | 0))
        return this.modPow$2$bailout(1, i, r, k1, km, j, w, is1, r2, t, z, t1, g, k);
      for (n = k; (w & 1) === 0;) {
        w = C.JSInt_methods.$shr(w, 1);
        --n;
      }
      i -= n;
      if (i < 0) {
        t2 = $.BigInteger_BI_DB;
        if (t2 == null)
          throw H.iae(t2);
        i += t2;
        --j;
      }
      if (is1)
        g.$index(g, w).copyTo$1(r);
      else {
        for (; n > 1;) {
          z.sqrTo$2(r, r2);
          z.sqrTo$2(r2, r);
          n -= 2;
        }
        if (n > 0)
          z.sqrTo$2(r, r2);
        else {
          t = r;
          r = r2;
          r2 = t;
        }
        z.mulTo$3(r2, g.$index(g, w), r);
      }
      while (true) {
        if (j >= 0) {
          if (j >= t1.length)
            throw H.ioore(j);
          t2 = t1[j];
          if (typeof t2 !== "number")
            return this.modPow$2$bailout(2, i, r, k1, km, j, 0, 0, r2, t, z, t1, g, k, t2);
          t2 = (t2 & C.JSInt_methods.$shl(1, i)) >>> 0 === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        z.sqrTo$2(r, r2);
        --i;
        if (i < 0) {
          t2 = $.BigInteger_BI_DB;
          if (t2 == null)
            throw t2.$sub();
          i = t2 - 1;
          --j;
        }
        t = r;
        r = r2;
        r2 = t;
      }
    }
    return z.revert$1(r);
  },
  modPow$2$bailout: function(state0, i, r, k1, km, j, w, is1, r2, t, z, t1, g, k, t2) {
    switch (state0) {
      case 0:
        e_array = e.array;
        i = e.bitLength$0(e);
        r = Z.BigInteger$(null, null, null);
        r.fromInt$1(1);
        if (i <= 0)
          return r;
        else if (i < 18)
          k = 1;
        else if (i < 48)
          k = 3;
        else if (i < 144)
          k = 4;
        else
          k = i < 768 ? 5 : 6;
        if (i < 8)
          z = new Z.Classic(m);
        else
          z = m.isEven$0(m) ? Z.Barrett$(m) : Z.Montgomery$(m);
        g = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        k1 = k - 1;
        km = C.JSInt_methods.$shl(1, k) - 1;
        g.$indexSet(g, 1, z.convert$1(this));
        if (k > 1) {
          g2 = Z.BigInteger$(null, null, null);
          z.sqrTo$2(g.$index(g, 1), g2);
          for (n = 3; n <= km;) {
            g.$indexSet(g, n, Z.BigInteger$(null, null, null));
            z.mulTo$3(g2, g.$index(g, n - 2), g.$index(g, n));
            n += 2;
          }
        }
        t1 = e.t;
        if (t1 == null)
          throw t1.$sub();
        j = t1 - 1;
        r2 = Z.BigInteger$(null, null, null);
        e_array.$index;
        t1 = e_array.data;
        if (j >>> 0 !== j || j >= t1.length)
          throw H.ioore(j);
        i = this.nbits$1(t1[j]) - 1;
        is1 = true;
        t = null;
      default:
        var e_array, g2, n, t3;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(j >= 0))
                  break L0;
                t2 = t1.length;
                if (i >= k1) {
                  if (j >= t2)
                    throw H.ioore(j);
                  w = J.$and$n(J.$shr$n(t1[j], i - k1), km);
                } else {
                  if (j >= t2)
                    throw H.ioore(j);
                  w = J.$shl$n(J.$and$n(t1[j], C.JSInt_methods.$shl(1, i + 1) - 1), k1 - i);
                  if (j > 0) {
                    t2 = j - 1;
                    if (t2 >= t1.length)
                      throw H.ioore(t2);
                    t2 = t1[t2];
                    t3 = $.BigInteger_BI_DB;
                    if (t3 == null)
                      throw t3.$add();
                    w = J.$or$n(w, J.$shr$n(t2, t3 + i - k1));
                  }
                }
              case 1:
                state0 = 0;
                for (n = k; t2 = J.getInterceptor$n(w), J.$eq(t2.$and(w, 1), 0);) {
                  w = t2.$shr(w, 1);
                  --n;
                }
                i -= n;
                if (i < 0) {
                  t2 = $.BigInteger_BI_DB;
                  if (t2 == null)
                    throw H.iae(t2);
                  i += t2;
                  --j;
                }
                if (is1)
                  g.$index(g, w).copyTo$1(r);
                else {
                  for (; n > 1;) {
                    z.sqrTo$2(r, r2);
                    z.sqrTo$2(r2, r);
                    n -= 2;
                  }
                  if (n > 0)
                    z.sqrTo$2(r, r2);
                  else {
                    t = r;
                    r = r2;
                    r2 = t;
                  }
                  z.mulTo$3(r2, g.$index(g, w), r);
                }
              case 2:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                      case 2:
                        if (state0 === 2 || state0 === 0 && j >= 0)
                          switch (state0) {
                            case 0:
                              if (j >= t1.length)
                                throw H.ioore(j);
                              t2 = t1[j];
                            case 2:
                              state0 = 0;
                              t2 = J.$eq(J.$and$n(t2, C.JSInt_methods.$shl(1, i)), 0);
                          }
                        else
                          t2 = false;
                        if (!t2)
                          break L1;
                        z.sqrTo$2(r, r2);
                        --i;
                        if (i < 0) {
                          t2 = $.BigInteger_BI_DB;
                          if (t2 == null)
                            throw t2.$sub();
                          i = t2 - 1;
                          --j;
                        }
                        t = r;
                        r = r2;
                        r2 = t;
                    }
                is1 = false;
            }
        return z.revert$1(r);
    }
  },
  modInverse$1: function(m) {
    var ac, r, u, v, r0, r1, r2, this_array, t1;
    ac = m.isEven$0(m);
    if (this.isEven$0(this) && ac || m.signum$0() === 0) {
      r = Z.BigInteger$(null, null, null);
      r.fromInt$1(0);
      return r;
    }
    u = m.clone$0(m);
    v = this.clone$0(this);
    r = Z.BigInteger$(null, null, null);
    r.fromInt$1(1);
    r0 = Z.BigInteger$(null, null, null);
    r0.fromInt$1(0);
    r1 = Z.BigInteger$(null, null, null);
    r1.fromInt$1(0);
    r2 = Z.BigInteger$(null, null, null);
    r2.fromInt$1(1);
    for (; u.signum$0() !== 0;) {
      while (true) {
        this_array = u.array;
        t1 = u.t;
        if (t1 == null)
          throw t1.$gt();
        if (t1 > 0) {
          this_array.$index;
          t1 = this_array.data;
          if (0 >= t1.length)
            throw H.ioore(0);
          t1 = J.$and$n(t1[0], 1);
        } else
          t1 = u.s;
        if (!J.$eq(t1, 0))
          break;
        u.rShiftTo$2(1, u);
        if (ac) {
          this_array = r.array;
          t1 = r.t;
          if (t1 == null)
            throw t1.$gt();
          if (t1 > 0) {
            this_array.$index;
            t1 = this_array.data;
            if (0 >= t1.length)
              throw H.ioore(0);
            t1 = J.$and$n(t1[0], 1);
          } else
            t1 = r.s;
          if (J.$eq(t1, 0)) {
            this_array = r0.array;
            t1 = r0.t;
            if (t1 == null)
              throw t1.$gt();
            if (t1 > 0) {
              this_array.$index;
              t1 = this_array.data;
              if (0 >= t1.length)
                throw H.ioore(0);
              t1 = J.$and$n(t1[0], 1);
            } else
              t1 = r0.s;
            t1 = !J.$eq(t1, 0);
          } else
            t1 = true;
          if (t1) {
            r.addTo$2(this, r);
            r0.subTo$2(m, r0);
          }
          r.rShiftTo$2(1, r);
        } else {
          this_array = r0.array;
          t1 = r0.t;
          if (t1 == null)
            throw t1.$gt();
          if (t1 > 0) {
            this_array.$index;
            t1 = this_array.data;
            if (0 >= t1.length)
              throw H.ioore(0);
            t1 = J.$and$n(t1[0], 1);
          } else
            t1 = r0.s;
          if (!J.$eq(t1, 0))
            r0.subTo$2(m, r0);
        }
        r0.rShiftTo$2(1, r0);
      }
      while (true) {
        this_array = v.array;
        t1 = v.t;
        if (t1 == null)
          throw t1.$gt();
        if (t1 > 0) {
          this_array.$index;
          t1 = this_array.data;
          if (0 >= t1.length)
            throw H.ioore(0);
          t1 = J.$and$n(t1[0], 1);
        } else
          t1 = v.s;
        if (!J.$eq(t1, 0))
          break;
        v.rShiftTo$2(1, v);
        if (ac) {
          this_array = r1.array;
          t1 = r1.t;
          if (t1 == null)
            throw t1.$gt();
          if (t1 > 0) {
            this_array.$index;
            t1 = this_array.data;
            if (0 >= t1.length)
              throw H.ioore(0);
            t1 = J.$and$n(t1[0], 1);
          } else
            t1 = r1.s;
          if (J.$eq(t1, 0)) {
            this_array = r2.array;
            t1 = r2.t;
            if (t1 == null)
              throw t1.$gt();
            if (t1 > 0) {
              this_array.$index;
              t1 = this_array.data;
              if (0 >= t1.length)
                throw H.ioore(0);
              t1 = J.$and$n(t1[0], 1);
            } else
              t1 = r2.s;
            t1 = !J.$eq(t1, 0);
          } else
            t1 = true;
          if (t1) {
            r1.addTo$2(this, r1);
            r2.subTo$2(m, r2);
          }
          r1.rShiftTo$2(1, r1);
        } else {
          this_array = r2.array;
          t1 = r2.t;
          if (t1 == null)
            throw t1.$gt();
          if (t1 > 0) {
            this_array.$index;
            t1 = this_array.data;
            if (0 >= t1.length)
              throw H.ioore(0);
            t1 = J.$and$n(t1[0], 1);
          } else
            t1 = r2.s;
          if (!J.$eq(t1, 0))
            r2.subTo$2(m, r2);
        }
        r2.rShiftTo$2(1, r2);
      }
      if (J.$ge$n(u.compareTo$1(u, v), 0)) {
        u.subTo$2(v, u);
        if (ac)
          r.subTo$2(r1, r);
        r0.subTo$2(r2, r0);
      } else {
        v.subTo$2(u, v);
        if (ac)
          r1.subTo$2(r, r1);
        r2.subTo$2(r0, r2);
      }
    }
    r = Z.BigInteger$(null, null, null);
    r.fromInt$1(1);
    if (!J.$eq(v.compareTo$1(v, r), 0)) {
      r = Z.BigInteger$(null, null, null);
      r.fromInt$1(0);
      return r;
    }
    if (J.$ge$n(r2.compareTo$1(r2, m), 0))
      return r2.subtract$1(m);
    if (r2.signum$0() < 0)
      r2.addTo$2(m, r2);
    else
      return r2;
    if (r2.signum$0() < 0)
      return r2.add$1(r2, m);
    else
      return r2;
  },
  $add: function(_, other) {
    var r = Z.BigInteger$(null, null, null);
    this.addTo$2(other, r);
    return r;
  },
  $sub: function(_, other) {
    var r = Z.BigInteger$(null, null, null);
    this.subTo$2(other, r);
    return r;
  },
  $mul: function(_, other) {
    var r = Z.BigInteger$(null, null, null);
    this.multiplyTo$2(other, r);
    return r;
  },
  $mod: function(_, other) {
    return this.remainder$1(this, other);
  },
  $negate: function(_) {
    return this.negate_op$0();
  },
  $lt: function(_, other) {
    var t1 = this.compareTo$1(this, other);
    if (typeof t1 !== "number")
      return this.$$lt$bailout(1, t1);
    return t1 < 0 && true;
  },
  $$lt$bailout: function(state0, t1) {
    return J.$lt$n(t1, 0) && true;
  },
  $le: function(_, other) {
    var t1 = this.compareTo$1(this, other);
    if (typeof t1 !== "number")
      return this.$$le$bailout(1, t1);
    return t1 <= 0 && true;
  },
  $$le$bailout: function(state0, t1) {
    return J.$le$n(t1, 0) && true;
  },
  $gt: function(_, other) {
    var t1 = this.compareTo$1(this, other);
    if (typeof t1 !== "number")
      return this.$$gt$bailout(1, t1);
    return t1 > 0 && true;
  },
  $$gt$bailout: function(state0, t1) {
    return J.$gt$n(t1, 0) && true;
  },
  $ge: function(_, other) {
    var t1 = this.compareTo$1(this, other);
    if (typeof t1 !== "number")
      return this.$$ge$bailout(1, t1);
    return t1 >= 0 && true;
  },
  $$ge$bailout: function(state0, t1) {
    return J.$ge$n(t1, 0) && true;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = this.compareTo$1(this, other);
    if (typeof t1 !== "number")
      return this.$$eq$bailout1(1, t1);
    return t1 === 0 && true;
  },
  $$eq$bailout1: function(state0, t1) {
    return J.$eq(t1, 0) && true;
  },
  $and: function(_, other) {
    var r = Z.BigInteger$(null, null, null);
    this.bitwiseTo$3(other, this.get$op_and(), r);
    return r;
  },
  $or: function(_, other) {
    var r = Z.BigInteger$(null, null, null);
    this.bitwiseTo$3(other, this.get$op_or(), r);
    return r;
  },
  $xor: function(_, other) {
    var r = Z.BigInteger$(null, null, null);
    this.bitwiseTo$3(other, this.get$op_xor(), r);
    return r;
  },
  $not: function(_) {
    return this.not$0();
  },
  $shl: function(_, shiftAmount) {
    var r = Z.BigInteger$(null, null, null);
    if (shiftAmount == null)
      throw shiftAmount.$lt();
    if (shiftAmount < 0)
      this.rShiftTo$2(-shiftAmount, r);
    else
      this.lShiftTo$2(shiftAmount, r);
    return r;
  },
  $shr: function(_, shiftAmount) {
    var r = Z.BigInteger$(null, null, null);
    if (shiftAmount == null)
      throw shiftAmount.$lt();
    if (shiftAmount < 0)
      this.lShiftTo$2(-shiftAmount, r);
    else
      this.rShiftTo$2(shiftAmount, r);
    return r;
  },
  BigInteger$3: function(a, b, c) {
    var t1, t2;
    this._lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509];
    this.BI_RC = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    this._j_lm = (this.canary & 16777215) === 15715070;
    this._setupDigitConversions$0();
    this._lplim = C.JSInt_methods.$tdiv(67108864, this._lowprimes[96]);
    this._setupEngine$2(this.get$_am3(), 28);
    t1 = J.JSInt;
    t2 = P.List_List(null, t1);
    H.setRuntimeTypeInfo(t2, [t1]);
    t2 = new Z.JSArray(t2);
    H.setRuntimeTypeInfo(t2, [t1]);
    this.array = t2;
    if (a != null)
      if (b == null && typeof a !== "string")
        this.fromString$2(a, 256);
      else
        this.fromString$2(a, b);
  },
  static: {
"": "BigInteger_dbits,BigInteger_BI_DB,BigInteger_BI_DM,BigInteger_BI_DV,BigInteger_BI_FP,BigInteger_BI_FV,BigInteger_BI_F1,BigInteger_BI_F2",
BigInteger$: function(a, b, c) {
  var t1 = new Z.BigInteger(null, null, 244837814094590, null, null, null, "0123456789abcdefghijklmnopqrstuvwxyz", null, null, null, true);
  t1.BigInteger$3(a, b, c);
  return t1;
}}

}}],
["bytes", "package:cellsserver/cryptolib/bytes.dart", , X, {
toByteArray: function(ints) {
  var t1, list;
  t1 = {};
  list = new Uint8Array(ints.length);
  list.$dartCachedLength = list.length;
  t1.i_0 = 0;
  H.IterableMixinWorkaround_forEach(ints, new X.toByteArray_closure(t1, list));
  t1 = list.buffer;
  t1 = new DataView(t1, 0);
  t1.$dartCachedLength = t1.length;
  return t1;
},

byteArrayToByteList: function(array) {
  var $length, byteList, t1, i, t2;
  $length = array.byteLength;
  byteList = P.List_List($length, null);
  if ($length == null)
    throw H.iae($length);
  t1 = byteList.length;
  i = 0;
  for (; i < $length; ++i) {
    t2 = array.getUint8(i);
    if (i >= t1)
      throw H.ioore(i);
    byteList[i] = t2;
  }
  return byteList;
},

base64Decode: function(encoded) {
  return X.toByteArray(X._base64ToBytes(encoded));
},

_getBase64Val: function(s, pos) {
  var code;
  if (pos < 0)
    H.throwExpression(new P.RangeError("value " + pos));
  if (pos >= s.length)
    H.throwExpression(new P.RangeError("value " + pos));
  code = s.charCodeAt(pos);
  if (code >= 65 && code < 91)
    return code - 65;
  else if (code >= 97 && code < 123)
    return code - 97 + 26;
  else if (code >= 48 && code < 58)
    return code - 48 + 52;
  else if (code === 43)
    return 62;
  else if (code === 47)
    return 63;
  else
    throw H.wrapException("Invalid character \"" + s + "\" at " + pos);
},

_base64ToBytes: function(s) {
  var rtn, t1, pos, t2, t3, t4, v;
  s = H.stringReplaceAllUnchecked(s, "\r\n", "");
  rtn = P.List_List(null, J.JSInt);
  H.setRuntimeTypeInfo(rtn, [J.JSInt]);
  for (t1 = s.length, pos = 0; pos < t1;) {
    t2 = pos + 2;
    if (t2 >= t1)
      throw H.ioore(t2);
    if (s[t2] === "=") {
      rtn.push(C.JSInt_methods.$shr((X._getBase64Val(s, pos) << 18 | X._getBase64Val(s, pos + 1) << 12) >>> 0, 16) & 255);
      break;
    } else {
      t3 = pos + 3;
      if (t3 >= t1)
        throw H.ioore(t3);
      t4 = pos + 1;
      if (s[t3] === "=") {
        v = (X._getBase64Val(s, pos) << 18 | X._getBase64Val(s, t4) << 12 | X._getBase64Val(s, t2) << 6) >>> 0;
        rtn.push(C.JSInt_methods.$shr(v, 16) & 255);
        rtn.push(C.JSInt_methods.$shr(v, 8) & 255);
        break;
      } else {
        v = (X._getBase64Val(s, pos) << 18 | X._getBase64Val(s, t4) << 12 | X._getBase64Val(s, t2) << 6 | X._getBase64Val(s, t3)) >>> 0;
        pos += 4;
        rtn.push(C.JSInt_methods.$shr(v, 16) & 255);
        rtn.push(C.JSInt_methods.$shr(v, 8) & 255);
        rtn.push(v & 255);
      }
    }
  }
  return rtn;
},

toByteArray_closure: {"": "Closure;box_0,list_1",
  call$1: function($byte) {
    var t1, t2, t3;
    t1 = this.list_1;
    t2 = this.box_0;
    t3 = t2.i_0;
    if (t3 < 0 || t3 >= C.JS_CONST_ZYJ(t1))
      throw H.ioore(t3);
    t1[t3] = $byte;
    t2.i_0 = t3 + 1;
  }
}}],
["cellsweb.dart", "cellsweb.dart", , B, {
main: function() {
  var viewer, displayarea, viewSelector, t1, t2, navViews, left, t3, up, right, down, count;
  viewer = new B.Viewer(0, 0, 0, 0, 20, 20, 5, [$.get$Viewer_xy_1(), $.get$Viewer_zy_2(), $.get$Viewer_xz_3(), $.get$Viewer_xz_4(), $.get$Viewer_zy_5(), $.get$Viewer_xy_6()]);
  displayarea = document.querySelector("#displayarea");
  viewSelector = document.querySelector("#viewChoose");
  H.IterableMixinWorkaround_forEach(viewer.views, new B.main_closure(viewSelector));
  viewSelector.get$onChange;
  C.EventStreamProvider_change.forElement$2$useCapture;
  t1 = new W._ElementEventStreamImpl(viewSelector, C.EventStreamProvider_change._eventType, false);
  H.setRuntimeTypeInfo(t1, [null]);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, new B.main_closure0(viewer, viewSelector), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
  navViews = new B.main_closure1(viewer, viewSelector);
  left = document.querySelector("#left");
  left.get$onClick;
  C.EventStreamProvider_click.forElement$2$useCapture;
  t2 = C.EventStreamProvider_click._eventType;
  t1 = new W._ElementEventStreamImpl(left, t2, false);
  H.setRuntimeTypeInfo(t1, [null]);
  t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, new B.main_closure2(navViews), t1._useCapture);
  H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t3._tryResume$0();
  up = document.querySelector("#up");
  up.get$onClick;
  t3 = new W._ElementEventStreamImpl(up, t2, false);
  H.setRuntimeTypeInfo(t3, [null]);
  t1 = new W._EventStreamSubscription(0, t3._target, t3._eventType, new B.main_closure3(navViews), t3._useCapture);
  H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
  t1._tryResume$0();
  right = document.querySelector("#right");
  right.get$onClick;
  t1 = new W._ElementEventStreamImpl(right, t2, false);
  H.setRuntimeTypeInfo(t1, [null]);
  t3 = new W._EventStreamSubscription(0, t1._target, t1._eventType, new B.main_closure4(navViews), t1._useCapture);
  H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t3._tryResume$0();
  down = document.querySelector("#down");
  down.get$onClick;
  t2 = new W._ElementEventStreamImpl(down, t2, false);
  H.setRuntimeTypeInfo(t2, [null]);
  t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, new B.main_closure5(navViews), t2._useCapture);
  H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
  t3._tryResume$0();
  count = document.querySelector("#count");
  t3 = new B.ClientCommEngine(null, null, null, null, null, "192.168.17.118:8080", "test", A.Dsa$(null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, [P.Map, J.JSInt, [P.Map, J.JSInt, B.WorldObjectFacade]]), 100, 100, 5);
  t3.keyPair = t3.dsa.fromSecretUserPassword$2(t3.username, "test");
  $.commEngine = t3;
  $.commEngine.commandWebSocketAuth$1(new B.main_closure6());
  t3 = $.commEngine;
  t3.onDelayStatusChange = new B.main_closure7(count);
  t3.onErrorChange = new B.main_closure8(displayarea);
  t3.onUpdatedChache = new B.main_closure9(viewer, displayarea);
},

Viewer: {"": "Object;_choosenNumber,displayOffsetX<,displayOffsetY<,displayOffsetZ<,displayWidth<,displayHeight<,displayDepth<,views",
  updateDisplayArea$2: function(diplayArea, commEngine) {
    var t1, t2, t3, constArun, t4, constBrun, div, returner, object, bgcolor, oldnessScalar;
    t1 = J.getInterceptor$x(diplayArea);
    t2 = t1.get$children(diplayArea);
    t2.clear$0(t2);
    t2 = this.views;
    t3 = this._choosenNumber;
    if (t3 >>> 0 !== t3 || t3 >= 6)
      throw H.ioore(t3);
    t3 = t2[t3];
    constArun = t3.$index(t3, "VarAOffset").call$1(this);
    if (typeof constArun !== "number")
      return this.updateDisplayArea$2$bailout(1, diplayArea, commEngine, constArun, t1, t2);
    while (true) {
      t3 = this._choosenNumber;
      if (t3 >>> 0 !== t3 || t3 >= 6)
        throw H.ioore(t3);
      t3 = t2[t3];
      t3 = t3.$index(t3, "VarAOffset").call$1(this);
      t4 = this._choosenNumber;
      if (t4 >>> 0 !== t4 || t4 >= 6)
        throw H.ioore(t4);
      t4 = t2[t4];
      t4 = J.$add$ns(t3, t4.$index(t4, "iMaxVarA").call$1(this));
      if (typeof t4 !== "number")
        throw H.iae(t4);
      if (!(constArun < t4))
        break;
      t3 = t1.get$children(diplayArea);
      t3.add$1(t3, document.createElement("br"));
      t3 = this._choosenNumber;
      if (t3 >>> 0 !== t3 || t3 >= 6)
        throw H.ioore(t3);
      t3 = t2[t3];
      constBrun = t3.$index(t3, "VarBOffset").call$1(this);
      if (typeof constBrun !== "number")
        return this.updateDisplayArea$2$bailout(2, diplayArea, commEngine, constArun, t1, t2, C.JSNumber_methods, constBrun);
      while (true) {
        t3 = this._choosenNumber;
        if (t3 >>> 0 !== t3 || t3 >= 6)
          throw H.ioore(t3);
        t3 = t2[t3];
        t3 = t3.$index(t3, "VarBOffset").call$1(this);
        t4 = this._choosenNumber;
        if (t4 >>> 0 !== t4 || t4 >= 6)
          throw H.ioore(t4);
        t4 = t2[t4];
        t4 = J.$add$ns(t3, t4.$index(t4, "iMaxVarB").call$1(this));
        if (typeof t4 !== "number")
          throw H.iae(t4);
        if (!(constBrun < t4))
          break;
        div = document.createElement("button");
        div.textContent = "--";
        div.id = "XYField";
        t3 = this._choosenNumber;
        if (t3 >>> 0 !== t3 || t3 >= 6)
          throw H.ioore(t3);
        t3 = t2[t3];
        t3 = t3.$index(t3, "runnerFunc");
        t4 = this._choosenNumber;
        if (t4 >>> 0 !== t4 || t4 >= 6)
          throw H.ioore(t4);
        t4 = t2[t4];
        returner = commEngine.getView$4(constArun, constBrun, t3, t4.$index(t4, "iMaxRunner").call$1(this));
        object = returner.$index(returner, "found");
        if (object != null && !object.isTooOld$0()) {
          t3 = J.$lt$n(returner.$index(returner, "depth"), 10) ? "0" : "";
          div.textContent = C.JSString_methods.$add(t3, J.toString$0(returner.$index(returner, "depth")));
          J.set$color$x(div.style, "#000000");
          bgcolor = J.get$color$x(object);
          oldnessScalar = 1 / ((object.oldness$0() + 1) / 1000);
          J.set$background$x(div.style, "rgb(" + H.S(J.round$0$n(J.$mul$n(J.get$r$x(bgcolor), oldnessScalar))) + "," + H.S(J.round$0$n(J.$mul$n(bgcolor.get$g(), oldnessScalar))) + ", " + H.S(J.round$0$n(J.$mul$n(bgcolor.get$b(), oldnessScalar))) + ")");
        }
        t3 = t1.get$children(diplayArea);
        t3.add$1(t3, div);
        ++constBrun;
      }
      ++constArun;
    }
  },
  updateDisplayArea$2$bailout: function(state0, diplayArea, commEngine, constArun, t1, t2, t3, constBrun) {
    switch (state0) {
      case 0:
        t1 = J.getInterceptor$x(diplayArea);
        t2 = t1.get$children(diplayArea);
        t2.clear$0(t2);
        t2 = this.views;
        t3 = this._choosenNumber;
        if (t3 >>> 0 !== t3 || t3 >= 6)
          throw H.ioore(t3);
        t3 = t2[t3];
        constArun = t3.$index(t3, "VarAOffset").call$1(this);
      case 1:
        state0 = 0;
      case 2:
        var t4, t5, div, t6, returner, object, bgcolor, oldnessScalar;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = this._choosenNumber;
                if (t3 >>> 0 !== t3 || t3 >= 6)
                  throw H.ioore(t3);
                t3 = t2[t3];
                t3 = t3.$index(t3, "VarAOffset").call$1(this);
                t4 = this._choosenNumber;
                if (t4 >>> 0 !== t4 || t4 >= 6)
                  throw H.ioore(t4);
                t4 = t2[t4];
                t4 = J.$add$ns(t3, t4.$index(t4, "iMaxVarA").call$1(this));
                t3 = J.getInterceptor$n(constArun);
                if (typeof t4 !== "number")
                  throw H.iae(t4);
                if (!t3.$lt(constArun, t4))
                  break L0;
                t4 = t1.get$children(diplayArea);
                t4.add$1(t4, document.createElement("br"));
                t4 = this._choosenNumber;
                if (t4 >>> 0 !== t4 || t4 >= 6)
                  throw H.ioore(t4);
                t4 = t2[t4];
                constBrun = t4.$index(t4, "VarBOffset").call$1(this);
              case 2:
                state0 = 0;
                while (true) {
                  t4 = this._choosenNumber;
                  if (t4 >>> 0 !== t4 || t4 >= 6)
                    throw H.ioore(t4);
                  t4 = t2[t4];
                  t4 = t4.$index(t4, "VarBOffset").call$1(this);
                  t5 = this._choosenNumber;
                  if (t5 >>> 0 !== t5 || t5 >= 6)
                    throw H.ioore(t5);
                  t5 = t2[t5];
                  t5 = J.$add$ns(t4, t5.$index(t5, "iMaxVarB").call$1(this));
                  t4 = J.getInterceptor$n(constBrun);
                  if (typeof t5 !== "number")
                    throw H.iae(t5);
                  if (!t4.$lt(constBrun, t5))
                    break;
                  div = document.createElement("button");
                  div.textContent = "--";
                  div.id = "XYField";
                  t5 = this._choosenNumber;
                  if (t5 >>> 0 !== t5 || t5 >= 6)
                    throw H.ioore(t5);
                  t5 = t2[t5];
                  t5 = t5.$index(t5, "runnerFunc");
                  t6 = this._choosenNumber;
                  if (t6 >>> 0 !== t6 || t6 >= 6)
                    throw H.ioore(t6);
                  t6 = t2[t6];
                  returner = commEngine.getView$4(constArun, constBrun, t5, t6.$index(t6, "iMaxRunner").call$1(this));
                  object = returner.$index(returner, "found");
                  if (object != null && !object.isTooOld$0()) {
                    t5 = J.$lt$n(returner.$index(returner, "depth"), 10) ? "0" : "";
                    div.textContent = C.JSString_methods.$add(t5, J.toString$0(returner.$index(returner, "depth")));
                    J.set$color$x(div.style, "#000000");
                    bgcolor = J.get$color$x(object);
                    oldnessScalar = 1 / ((object.oldness$0() + 1) / 1000);
                    J.set$background$x(div.style, "rgb(" + H.S(J.round$0$n(J.$mul$n(J.get$r$x(bgcolor), oldnessScalar))) + "," + H.S(J.round$0$n(J.$mul$n(bgcolor.get$g(), oldnessScalar))) + ", " + H.S(J.round$0$n(J.$mul$n(bgcolor.get$b(), oldnessScalar))) + ")");
                  }
                  t5 = t1.get$children(diplayArea);
                  t5.add$1(t5, div);
                  constBrun = t4.$add(constBrun, 1);
                }
                constArun = t3.$add(constArun, 1);
            }
    }
  },
  static: {
"": "Viewer_xy_1,Viewer_xy_6,Viewer_zy_2,Viewer_zy_5,Viewer_xz_4,Viewer_xz_3",
Viewer_getHeight: function(viewer) {
  return viewer.get$displayHeight();
},

Viewer_getWidth: function(viewer) {
  return viewer.get$displayWidth();
},

Viewer_getDepth: function(viewer) {
  return viewer.get$displayDepth();
},

Viewer_getOffsetX: function(viewer) {
  return viewer.get$displayOffsetX();
},

Viewer_getOffsetY: function(viewer) {
  return viewer.get$displayOffsetY();
},

Viewer_getOffsetZ: function(viewer) {
  return viewer.get$displayOffsetZ();
}}

},

main_closure: {"": "Closure;viewSelector_0",
  call$1: function(view) {
    var t1, t2, t3, t4;
    t1 = this.viewSelector_0;
    t2 = J.getInterceptor$x(t1);
    t3 = t2.get$children(t1);
    t4 = W.OptionElement_OptionElement(null, null, null, null);
    t4.textContent = J.$index$asx(view, "Name");
    t4.value = C.JSInt_methods.toString$0(J.get$length$asx(t2.get$options(t1)));
    return t3.add$1(t3, t4);
  }
},

main_closure0: {"": "Closure;viewer_1,viewSelector_2",
  call$1: function(e) {
    var t1, t2;
    t1 = H.Primitives_parseInt(J.get$value$x(J.get$first$ax(J.get$selectedOptions$x(this.viewSelector_2))), null, null);
    t2 = J.getInterceptor(t1);
    H.Primitives_printString(t2.toString$0(t1));
    this.viewer_1._choosenNumber = t2.$mod(t1, 6);
    return t1;
  }
},

main_closure1: {"": "Closure;viewer_3,viewSelector_4",
  call$1: function($name) {
    var t1, t2;
    t1 = this.viewer_3;
    t2 = t1.views;
    t2 = H.Arrays_indexOf(t2, H.IterableMixinWorkaround_firstWhere(t2, new B.main__closure(t1, $name), null), 0, 6);
    H.Primitives_printString(C.JSNumber_methods.toString$0(t2));
    t1._choosenNumber = C.JSNumber_methods.$mod(t2, 6);
    J.set$selectedIndex$x(this.viewSelector_4, t1._choosenNumber);
  }
},

main__closure: {"": "Closure;viewer_5,name_6",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = J.$index$asx(e, "Name");
    t2 = this.viewer_5;
    t3 = t2._choosenNumber;
    if (t3 >>> 0 !== t3 || t3 >= 6)
      throw H.ioore(t3);
    t3 = t2.views[t3];
    return J.$eq(t1, t3.$index(t3, this.name_6));
  }
},

main_closure2: {"": "Closure;navViews_7",
  call$1: function(e) {
    this.navViews_7.call$1("left");
  }
},

main_closure3: {"": "Closure;navViews_8",
  call$1: function(e) {
    this.navViews_8.call$1("up");
  }
},

main_closure4: {"": "Closure;navViews_9",
  call$1: function(e) {
    this.navViews_9.call$1("right");
  }
},

main_closure5: {"": "Closure;navViews_10",
  call$1: function(e) {
    this.navViews_10.call$1("down");
  }
},

main_closure6: {"": "Closure;",
  call$1: function(response) {
    var parsedTokken = H.Primitives_parseInt(response, null, new B.main__closure0());
    if (!J.$eq(parsedTokken, 0))
      $.commEngine.initWwebSocket$1(parsedTokken);
  }
},

main__closure0: {"": "Closure;",
  call$1: function(wrongInt) {
    return 0;
  }
},

main_closure7: {"": "Closure;count_11",
  call$1: function(data) {
    this.count_11.textContent = J.toString$0(data);
  }
},

main_closure8: {"": "Closure;displayarea_12",
  call$1: function(data) {
    this.displayarea_12.textContent = J.toString$0(data);
  }
},

main_closure9: {"": "Closure;viewer_13,displayarea_14",
  call$0: function() {
    this.viewer_13.updateDisplayArea$2(this.displayarea_14, $.commEngine);
  }
}},
1],
["crypto", "package:crypto/crypto.dart", , M, {
_CryptoUtils_bytesToHex: function(bytes) {
  var result, t1, part, t2, t3;
  result = P.StringBuffer$("");
  for (t1 = new H.ListIterator(bytes, bytes.length, 0, null); t1.moveNext$0();) {
    part = t1._current;
    t2 = J.getInterceptor$n(part);
    t3 = t2.$lt(part, 16) ? "0" : "";
    t2 = t3 + t2.toRadixString$1(part, 16);
    result._contents = result._contents + t2;
  }
  return result._contents;
},

_CryptoUtils_bytesToBase64: function(bytes, urlSafe, addLineSeparator) {
  var len, lookup, remainderLength, chunkLength, t1, t2, outputLen, out, t3, j, i, c, i0, t4, x, j0, t5, y;
  len = bytes.length;
  if (len === 0)
    return "";
  lookup = urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  remainderLength = C.JSInt_methods.remainder$1(len, 3);
  chunkLength = len - remainderLength;
  t1 = C.JSInt_methods.$tdiv(len, 3);
  t2 = remainderLength > 0 ? 4 : 0;
  outputLen = t1 * 4 + t2;
  if (addLineSeparator)
    outputLen += C.JSInt_methods.$tdiv(outputLen - 1, 76) << 1 >>> 0;
  out = P.List_List(outputLen, J.JSInt);
  H.setRuntimeTypeInfo(out, [J.JSInt]);
  for (t1 = out.length, t2 = lookup.length, t3 = outputLen - 2, j = 0, i = 0, c = 0; i < chunkLength; i = i0) {
    i0 = i + 1;
    if (i >= len)
      throw H.ioore(i);
    t4 = J.$and$n(J.$shl$n(bytes[i], 16), 16777215);
    i = i0 + 1;
    if (i0 >= len)
      throw H.ioore(i0);
    t4 = J.$or$n(t4, J.$and$n(J.$shl$n(bytes[i0], 8), 16777215));
    i0 = i + 1;
    if (i >= len)
      throw H.ioore(i);
    x = J.$or$n(t4, bytes[i]);
    j0 = j + 1;
    t4 = J.getInterceptor$n(x);
    t5 = t4.$shr(x, 18);
    if (typeof t5 !== "number")
      H.throwExpression(new P.ArgumentError(t5));
    if (typeof t5 !== "number")
      throw t5.$lt();
    if (t5 < 0)
      H.throwExpression(new P.RangeError("value " + H.S(t5)));
    if (t5 >= t2)
      H.throwExpression(new P.RangeError("value " + H.S(t5)));
    t5 = lookup.charCodeAt(t5);
    if (j >= t1)
      throw H.ioore(j);
    out[j] = t5;
    j = j0 + 1;
    t5 = J.$and$n(t4.$shr(x, 12), 63);
    if (typeof t5 !== "number")
      H.throwExpression(new P.ArgumentError(t5));
    if (typeof t5 !== "number")
      throw t5.$lt();
    if (t5 < 0)
      H.throwExpression(new P.RangeError("value " + H.S(t5)));
    if (t5 >= t2)
      H.throwExpression(new P.RangeError("value " + H.S(t5)));
    t5 = lookup.charCodeAt(t5);
    if (j0 >= t1)
      throw H.ioore(j0);
    out[j0] = t5;
    j0 = j + 1;
    t5 = J.$and$n(t4.$shr(x, 6), 63);
    if (typeof t5 !== "number")
      H.throwExpression(new P.ArgumentError(t5));
    if (typeof t5 !== "number")
      throw t5.$lt();
    if (t5 < 0)
      H.throwExpression(new P.RangeError("value " + H.S(t5)));
    if (t5 >= t2)
      H.throwExpression(new P.RangeError("value " + H.S(t5)));
    t5 = lookup.charCodeAt(t5);
    if (j >= t1)
      throw H.ioore(j);
    out[j] = t5;
    j = j0 + 1;
    t4 = t4.$and(x, 63);
    if (typeof t4 !== "number")
      H.throwExpression(new P.ArgumentError(t4));
    if (typeof t4 !== "number")
      throw t4.$lt();
    if (t4 < 0)
      H.throwExpression(new P.RangeError("value " + H.S(t4)));
    if (t4 >= t2)
      H.throwExpression(new P.RangeError("value " + H.S(t4)));
    t4 = lookup.charCodeAt(t4);
    if (j0 >= t1)
      throw H.ioore(j0);
    out[j0] = t4;
    if (addLineSeparator) {
      ++c;
      t4 = c === 19 && j < t3;
    } else
      t4 = false;
    if (t4) {
      j0 = j + 1;
      if (j >= t1)
        throw H.ioore(j);
      out[j] = 13;
      j = j0 + 1;
      if (j0 >= t1)
        throw H.ioore(j0);
      out[j0] = 10;
      c = 0;
    }
  }
  if (remainderLength === 1) {
    if (i >= len)
      throw H.ioore(i);
    x = bytes[i];
    j0 = j + 1;
    t2 = J.getInterceptor$n(x);
    t3 = C.JSString_methods.codeUnitAt$1(lookup, t2.$shr(x, 2));
    if (j >= t1)
      throw H.ioore(j);
    out[j] = t3;
    j = j0 + 1;
    t2 = C.JSString_methods.codeUnitAt$1(lookup, J.$and$n(t2.$shl(x, 4), 63));
    if (j0 >= t1)
      throw H.ioore(j0);
    out[j0] = t2;
    j0 = j + 1;
    if (j >= t1)
      throw H.ioore(j);
    out[j] = 61;
    if (j0 >= t1)
      throw H.ioore(j0);
    out[j0] = 61;
  } else if (remainderLength === 2) {
    if (i >= len)
      throw H.ioore(i);
    x = bytes[i];
    t2 = i + 1;
    if (t2 >= len)
      throw H.ioore(t2);
    y = bytes[t2];
    j0 = j + 1;
    t2 = J.getInterceptor$n(x);
    t3 = C.JSString_methods.codeUnitAt$1(lookup, t2.$shr(x, 2));
    if (j >= t1)
      throw H.ioore(j);
    out[j] = t3;
    j = j0 + 1;
    t3 = J.getInterceptor$n(y);
    t2 = C.JSString_methods.codeUnitAt$1(lookup, J.$and$n(J.$or$n(t2.$shl(x, 4), t3.$shr(y, 4)), 63));
    if (j0 >= t1)
      throw H.ioore(j0);
    out[j0] = t2;
    j0 = j + 1;
    t3 = C.JSString_methods.codeUnitAt$1(lookup, J.$and$n(t3.$shl(y, 2), 63));
    if (j >= t1)
      throw H.ioore(j);
    out[j] = t3;
    if (j0 >= t1)
      throw H.ioore(j0);
    out[j0] = 61;
  }
  return P.String_String$fromCharCodes(out);
},

_HashBase: {"": "Object;",
  add$1: function(_, data) {
    var t1, t2;
    if (this._digestCalled)
      throw H.wrapException(new P.StateError("Hash update method called after digest was retrieved"));
    t1 = this._lengthInBytes;
    t2 = J.get$length$asx(data);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    this._lengthInBytes = t1 + t2;
    C.JSArray_methods.addAll$1(this._pendingData, data);
    this._iterate$0();
  },
  close$0: function(_) {
    if (this._digestCalled)
      return this._resultAsBytes$0();
    this._digestCalled = true;
    this._finalizeData$0();
    this._iterate$0();
    return this._resultAsBytes$0();
  },
  _resultAsBytes$0: function() {
    var result, i, t1;
    result = [];
    for (i = 0; t1 = this._h, i < t1.length; ++i)
      C.JSArray_methods.addAll$1(result, this._wordToBytes$1(t1[i]));
    return result;
  },
  _bytesToChunk$2: function(data, dataIndex) {
    var t1, t2, t3, t4, t5, wordIndex, t6, w3, w2, w1, w0;
    if (dataIndex !== (dataIndex | 0))
      return this._bytesToChunk$2$bailout(1, data, dataIndex);
    for (t1 = this._chunkSizeInWords, t2 = this._bigEndianWords, t3 = this._currentChunk, t4 = t3.length, t5 = data.length, wordIndex = 0; wordIndex < t1; ++wordIndex) {
      if (t2) {
        if (dataIndex < 0 || dataIndex >= t5)
          throw H.ioore(dataIndex);
        t6 = data[dataIndex];
        if (typeof t6 !== "number")
          return this._bytesToChunk$2$bailout(2, data, dataIndex, wordIndex, true, t1, t6);
        w3 = t6;
      } else {
        t6 = dataIndex + 3;
        if (t6 < 0 || t6 >= t5)
          throw H.ioore(t6);
        t6 = data[t6];
        if (typeof t6 !== "number")
          return this._bytesToChunk$2$bailout(3, data, dataIndex, wordIndex, false, t1, 0, t6);
        w3 = t6;
      }
      if (t2) {
        t6 = dataIndex + 1;
        if (t6 < 0 || t6 >= t5)
          throw H.ioore(t6);
        t6 = data[t6];
        if (typeof t6 !== "number")
          return this._bytesToChunk$2$bailout(4, data, dataIndex, wordIndex, true, t1, 0, t6, w3);
        w2 = t6;
      } else {
        t6 = dataIndex + 2;
        if (t6 < 0 || t6 >= t5)
          throw H.ioore(t6);
        t6 = data[t6];
        if (typeof t6 !== "number")
          return this._bytesToChunk$2$bailout(5, data, dataIndex, wordIndex, false, t1, 0, t6, w3);
        w2 = t6;
      }
      if (t2) {
        t6 = dataIndex + 2;
        if (t6 < 0 || t6 >= t5)
          throw H.ioore(t6);
        t6 = data[t6];
        if (typeof t6 !== "number")
          return this._bytesToChunk$2$bailout(6, data, dataIndex, wordIndex, true, t1, 0, t6, w3, w2);
        w1 = t6;
      } else {
        t6 = dataIndex + 1;
        if (t6 < 0 || t6 >= t5)
          throw H.ioore(t6);
        t6 = data[t6];
        if (typeof t6 !== "number")
          return this._bytesToChunk$2$bailout(7, data, dataIndex, wordIndex, false, t1, 0, t6, w3, w2);
        w1 = t6;
      }
      if (t2) {
        t6 = dataIndex + 3;
        if (t6 < 0 || t6 >= t5)
          throw H.ioore(t6);
        t6 = data[t6];
        if (typeof t6 !== "number")
          return this._bytesToChunk$2$bailout(8, data, dataIndex, wordIndex, true, t1, 0, t6, w3, w2, w1);
        w0 = t6;
      } else {
        if (dataIndex < 0 || dataIndex >= t5)
          throw H.ioore(dataIndex);
        t6 = data[dataIndex];
        if (typeof t6 !== "number")
          return this._bytesToChunk$2$bailout(9, data, dataIndex, wordIndex, false, t1, t6, 0, w3, w2, w1);
        w0 = t6;
      }
      dataIndex += 4;
      if (wordIndex >= t4)
        throw H.ioore(wordIndex);
      t3[wordIndex] = ((w3 & 255) << 24 | (w2 & 255) << 16 | (w1 & 255) << 8 | w0 & 255) >>> 0;
    }
  },
  _bytesToChunk$2$bailout: function(state0, data, dataIndex, wordIndex, t2, t1, t3, t4, w3, w2, w1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._chunkSizeInWords;
        t2 = this._bigEndianWords;
        wordIndex = 0;
      default:
        var w0, word;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(wordIndex < t1))
                  break L0;
                t3 = data.length;
              default:
                if (state0 === 2 || state0 === 0 && t2)
                  switch (state0) {
                    case 0:
                      if (dataIndex >>> 0 !== dataIndex || dataIndex >= t3)
                        throw H.ioore(dataIndex);
                      t3 = data[dataIndex];
                    case 2:
                      state0 = 0;
                      w3 = t3;
                  }
                else
                  switch (state0) {
                    case 0:
                      t4 = dataIndex + 3;
                      if (t4 >>> 0 !== t4 || t4 >= t3)
                        throw H.ioore(t4);
                      t4 = data[t4];
                    case 3:
                      state0 = 0;
                      w3 = t4;
                  }
                t3 = data.length;
              case 4:
              case 5:
                if (state0 === 4 || state0 === 0 && t2)
                  switch (state0) {
                    case 0:
                      t4 = dataIndex + 1;
                      if (t4 >>> 0 !== t4 || t4 >= t3)
                        throw H.ioore(t4);
                      t4 = data[t4];
                    case 4:
                      state0 = 0;
                      w2 = t4;
                  }
                else
                  switch (state0) {
                    case 0:
                      t4 = dataIndex + 2;
                      if (t4 >>> 0 !== t4 || t4 >= t3)
                        throw H.ioore(t4);
                      t4 = data[t4];
                    case 5:
                      state0 = 0;
                      w2 = t4;
                  }
                t3 = data.length;
              case 6:
              case 7:
                if (state0 === 6 || state0 === 0 && t2)
                  switch (state0) {
                    case 0:
                      t4 = dataIndex + 2;
                      if (t4 >>> 0 !== t4 || t4 >= t3)
                        throw H.ioore(t4);
                      t4 = data[t4];
                    case 6:
                      state0 = 0;
                      w1 = t4;
                  }
                else
                  switch (state0) {
                    case 0:
                      t4 = dataIndex + 1;
                      if (t4 >>> 0 !== t4 || t4 >= t3)
                        throw H.ioore(t4);
                      t4 = data[t4];
                    case 7:
                      state0 = 0;
                      w1 = t4;
                  }
                t3 = data.length;
              case 8:
              case 9:
                if (state0 === 8 || state0 === 0 && t2)
                  switch (state0) {
                    case 0:
                      t4 = dataIndex + 3;
                      if (t4 >>> 0 !== t4 || t4 >= t3)
                        throw H.ioore(t4);
                      t4 = data[t4];
                    case 8:
                      state0 = 0;
                      w0 = t4;
                  }
                else
                  switch (state0) {
                    case 0:
                      if (dataIndex >>> 0 !== dataIndex || dataIndex >= t3)
                        throw H.ioore(dataIndex);
                      t3 = data[dataIndex];
                    case 9:
                      state0 = 0;
                      w0 = t3;
                  }
                dataIndex += 4;
                word = J.$or$n(J.$or$n(J.$or$n(J.$shl$n(J.$and$n(w3, 255), 24), J.$shl$n(J.$and$n(w2, 255), 16)), J.$shl$n(J.$and$n(w1, 255), 8)), J.$and$n(w0, 255));
                t3 = this._currentChunk;
                if (wordIndex >= t3.length)
                  throw H.ioore(wordIndex);
                t3[wordIndex] = word;
                ++wordIndex;
            }
    }
  },
  _wordToBytes$1: function(word) {
    var bytes, t1, t2, t3;
    if (typeof word !== "number")
      return this._wordToBytes$1$bailout(1, word);
    bytes = P.List_List(4, null);
    t1 = this._bigEndianWords;
    t2 = C.JSNumber_methods.$shr(word, t1 ? 24 : 0);
    t3 = bytes.length;
    if (0 >= t3)
      throw H.ioore(0);
    bytes[0] = t2 & 255;
    t2 = C.JSNumber_methods.$shr(word, t1 ? 16 : 8);
    if (1 >= t3)
      throw H.ioore(1);
    bytes[1] = t2 & 255;
    t2 = C.JSNumber_methods.$shr(word, t1 ? 8 : 16);
    if (2 >= t3)
      throw H.ioore(2);
    bytes[2] = t2 & 255;
    t1 = C.JSNumber_methods.$shr(word, t1 ? 0 : 24);
    if (3 >= t3)
      throw H.ioore(3);
    bytes[3] = t1 & 255;
    return bytes;
  },
  _wordToBytes$1$bailout: function(state0, word) {
    var bytes, t1, t2, t3, t4;
    bytes = P.List_List(4, null);
    t1 = this._bigEndianWords;
    t2 = t1 ? 24 : 0;
    t3 = J.getInterceptor$n(word);
    t2 = J.$and$n(t3.$shr(word, t2), 255);
    t4 = bytes.length;
    if (0 >= t4)
      throw H.ioore(0);
    bytes[0] = t2;
    t2 = J.$and$n(t3.$shr(word, t1 ? 16 : 8), 255);
    if (1 >= t4)
      throw H.ioore(1);
    bytes[1] = t2;
    t2 = J.$and$n(t3.$shr(word, t1 ? 8 : 16), 255);
    if (2 >= t4)
      throw H.ioore(2);
    bytes[2] = t2;
    t1 = J.$and$n(t3.$shr(word, t1 ? 0 : 24), 255);
    if (3 >= t4)
      throw H.ioore(3);
    bytes[3] = t1;
    return bytes;
  },
  _iterate$0: function() {
    var len, chunkSizeInBytes, index, t1;
    len = this._pendingData.length;
    chunkSizeInBytes = this._chunkSizeInWords * 4;
    if (len >= chunkSizeInBytes) {
      for (index = 0; t1 = this._pendingData, len - index >= chunkSizeInBytes; index += chunkSizeInBytes) {
        this._bytesToChunk$2(t1, index);
        this._updateHash$1(this._currentChunk);
      }
      this._pendingData = C.JSArray_methods.sublist$2(t1, index, len);
    }
  },
  _finalizeData$0: function() {
    var contentsLength, chunkSizeInBytes, zeroPadding, i, t1, t2;
    this._pendingData.push(128);
    contentsLength = this._lengthInBytes + 9;
    chunkSizeInBytes = this._chunkSizeInWords * 4;
    zeroPadding = ((contentsLength + chunkSizeInBytes - 1 & -chunkSizeInBytes) >>> 0) - contentsLength;
    for (i = 0; i < zeroPadding; ++i)
      this._pendingData.push(0);
    t1 = (this._lengthInBytes * 8 & 4294967295) >>> 0;
    t2 = this._pendingData;
    if (this._bigEndianWords) {
      C.JSArray_methods.addAll$1(t2, this._wordToBytes$1(0));
      C.JSArray_methods.addAll$1(this._pendingData, this._wordToBytes$1(t1));
    } else {
      C.JSArray_methods.addAll$1(t2, this._wordToBytes$1(t1));
      C.JSArray_methods.addAll$1(this._pendingData, this._wordToBytes$1(0));
    }
  },
  _HashBase$3: function(_chunkSizeInWords, _digestSizeInWords, _bigEndianWords) {
    this._currentChunk = P.List_List(this._chunkSizeInWords, null);
    this._h = P.List_List(this._digestSizeInWords, null);
  }
},

SHA256: {"": "_HashBase;_w,_chunkSizeInWords,_digestSizeInWords,_bigEndianWords,_lengthInBytes,_pendingData,_currentChunk,_h,_digestCalled",
  _updateHash$1: function($M) {
    var t1, t2, i, t3, t4, t5, t6, t7, a, b, c, d, e, f, g, h, a0, t, t10, e0, a1;
    for (t1 = this._w, t2 = $M.length, i = 0; i < 16; ++i) {
      if (i >= t2)
        throw H.ioore(i);
      t1[i] = $M[i];
    }
    for (; i < 64; ++i) {
      t2 = t1[i - 2];
      if (t2 !== (t2 | 0))
        return this._updateHash$1$bailout1(1, t2, i, t1);
      t3 = C.JSInt_methods.$shr(t2, 17);
      t4 = C.JSInt_methods.$shr(t2, 19);
      t5 = C.JSInt_methods.$shr(t2, 10);
      t6 = t1[i - 7];
      if (typeof t6 !== "number")
        throw H.iae(t6);
      t6 = (((t3 | t2 << 15 & 4294967295) ^ (t4 | t2 << 13 & 4294967295) ^ t5) >>> 0) + t6;
      if (t6 !== (t6 | 0))
        return this._updateHash$1$bailout1(2, 0, i, t1, t6);
      t6 = (t6 & 4294967295) >>> 0;
      t5 = t1[i - 15];
      if (t5 !== (t5 | 0))
        return this._updateHash$1$bailout1(3, t5, i, t1, t6);
      t2 = C.JSInt_methods.$shr(t5, 7);
      t4 = C.JSInt_methods.$shr(t5, 18);
      t3 = C.JSInt_methods.$shr(t5, 3);
      t7 = t1[i - 16];
      if (typeof t7 !== "number")
        throw H.iae(t7);
      t7 = (((t2 | t5 << 25 & 4294967295) ^ (t4 | t5 << 14 & 4294967295) ^ t3) >>> 0) + t7;
      if (t7 !== (t7 | 0))
        return this._updateHash$1$bailout1(4, 0, i, t1, t6, t7);
      t1[i] = (t6 + ((t7 & 4294967295) >>> 0) & 4294967295) >>> 0;
    }
    t2 = this._h;
    t3 = t2.length;
    if (0 >= t3)
      throw H.ioore(0);
    a = t2[0];
    if (a !== (a | 0))
      return this._updateHash$1$bailout1(5, t2, 0, t1, t3, 0, a);
    if (1 >= t3)
      throw H.ioore(1);
    b = t2[1];
    if (b !== (b | 0))
      return this._updateHash$1$bailout1(6, t2, 0, t1, t3, 0, a, b);
    if (2 >= t3)
      throw H.ioore(2);
    c = t2[2];
    if (c !== (c | 0))
      return this._updateHash$1$bailout1(7, t2, 0, t1, t3, 0, a, b, c);
    if (3 >= t3)
      throw H.ioore(3);
    d = t2[3];
    if (d !== (d | 0))
      return this._updateHash$1$bailout1(8, t2, 0, t1, t3, 0, a, b, c, d);
    if (4 >= t3)
      throw H.ioore(4);
    e = t2[4];
    if (e !== (e | 0))
      return this._updateHash$1$bailout1(9, t2, 0, t1, t3, 0, a, b, c, d, e);
    if (5 >= t3)
      throw H.ioore(5);
    f = t2[5];
    if (f !== (f | 0))
      return this._updateHash$1$bailout1(10, t2, 0, t1, t3, 0, a, b, c, d, e, f);
    if (6 >= t3)
      throw H.ioore(6);
    g = t2[6];
    if (g !== (g | 0))
      return this._updateHash$1$bailout1(11, t2, 0, t1, t3, 0, a, b, c, d, e, f, g);
    if (7 >= t3)
      throw H.ioore(7);
    h = t2[7];
    if (h !== (h | 0))
      return this._updateHash$1$bailout1(12, 0, 0, t1, 0, 0, a, b, c, d, e, f, g, h);
    for (a0 = a, t = 0; t < 64; ++t, h = g, g = f, f = e, e = e0, d = c, c = b, b = a0, a0 = a1) {
      t3 = C.JSInt_methods.$shr(e, 6);
      t4 = C.JSInt_methods.$shr(e, 11);
      t5 = C.JSInt_methods.$shr(e, 25);
      t6 = C.List_6JR[t];
      t7 = t1[t];
      if (typeof t7 !== "number")
        throw H.iae(t7);
      t10 = (((h + (((t3 | e << 26 & 4294967295) ^ (t4 | e << 21 & 4294967295) ^ (t5 | e << 7 & 4294967295)) >>> 0) & 4294967295) >>> 0) + ((((e & f ^ ~e & 4294967295 & g) >>> 0) + ((t6 + t7 & 4294967295) >>> 0) & 4294967295) >>> 0) & 4294967295) >>> 0;
      e0 = (d + t10 & 4294967295) >>> 0;
      a1 = (t10 + (((((C.JSInt_methods.$shr(a0, 2) | a0 << 30 & 4294967295) ^ (C.JSInt_methods.$shr(a0, 13) | a0 << 19 & 4294967295) ^ (C.JSInt_methods.$shr(a0, 22) | a0 << 10 & 4294967295)) >>> 0) + ((a0 & b ^ a0 & c ^ b & c) >>> 0) & 4294967295) >>> 0) & 4294967295) >>> 0;
    }
    t1 = a0 + a;
    if (t1 !== (t1 | 0))
      return this._updateHash$1$bailout1(13, 0, 0, t2, C.JSInt_methods, C.JSInt_methods, 0, b, c, d, e, f, g, h, C.JSInt_methods, C.JSInt_methods, t1);
    t2[0] = (t1 & 4294967295) >>> 0;
    t1 = t2[1];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t1 = b + t1;
    if (t1 !== (t1 | 0))
      return this._updateHash$1$bailout1(14, 0, 0, t1, 0, C.JSInt_methods, 0, 0, c, d, e, f, g, h, C.JSInt_methods, C.JSInt_methods, t2);
    t2[1] = (t1 & 4294967295) >>> 0;
    t1 = t2[2];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t1 = c + t1;
    if (t1 !== (t1 | 0))
      return this._updateHash$1$bailout1(15, 0, 0, t2, 0, C.JSInt_methods, 0, 0, 0, d, e, f, g, h, C.JSInt_methods, C.JSInt_methods, t1);
    t2[2] = (t1 & 4294967295) >>> 0;
    t1 = t2[3];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t1 = d + t1;
    if (t1 !== (t1 | 0))
      return this._updateHash$1$bailout1(16, 0, 0, t1, 0, 0, 0, 0, 0, 0, e, f, g, h, C.JSInt_methods, C.JSInt_methods, t2);
    t2[3] = (t1 & 4294967295) >>> 0;
    t1 = t2[4];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t1 = e + t1;
    if (t1 !== (t1 | 0))
      return this._updateHash$1$bailout1(17, 0, 0, t2, 0, 0, 0, 0, 0, 0, 0, f, g, h, 0, C.JSInt_methods, t1);
    t2[4] = (t1 & 4294967295) >>> 0;
    t1 = t2[5];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t1 = f + t1;
    if (t1 !== (t1 | 0))
      return this._updateHash$1$bailout1(18, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, g, h, 0, C.JSInt_methods, t2);
    t2[5] = (t1 & 4294967295) >>> 0;
    t1 = t2[6];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t1 = g + t1;
    if (t1 !== (t1 | 0))
      return this._updateHash$1$bailout1(19, 0, 0, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, 0, C.JSInt_methods, t1);
    t2[6] = (t1 & 4294967295) >>> 0;
    t1 = t2[7];
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t1 = h + t1;
    if (t1 !== (t1 | 0))
      return this._updateHash$1$bailout1(20, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2);
    t2[7] = (t1 & 4294967295) >>> 0;
  },
  _updateHash$1$bailout1: function(state0, t2, i, t1, t3, t4, a, b, c, d, e, f, g, h, t5, t6, t7) {
    switch (state0) {
      case 0:
        for (t1 = this._w, t2 = $M.length, i = 0; i < 16; ++i) {
          if (i >= t2)
            throw H.ioore(i);
          t1[i] = $M[i];
        }
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < 64))
                  break L0;
                t2 = t1[i - 2];
              case 1:
                state0 = 0;
                t3 = J.getInterceptor$n(t2);
                t2 = J.$xor$n(J.$xor$n(J.$or$n(t3.$shr(t2, 17), J.$and$n(t3.$shl(t2, 15), 4294967295)), J.$or$n(t3.$shr(t2, 19), J.$and$n(t3.$shl(t2, 13), 4294967295))), t3.$shr(t2, 10));
                t3 = t1[i - 7];
                if (typeof t3 !== "number")
                  throw H.iae(t3);
                t3 = J.$add$ns(t2, t3);
              case 2:
                state0 = 0;
                t3 = J.$and$n(t3, 4294967295);
                t2 = t1[i - 15];
              case 3:
                state0 = 0;
                t4 = J.getInterceptor$n(t2);
                t2 = J.$xor$n(J.$xor$n(J.$or$n(t4.$shr(t2, 7), J.$and$n(t4.$shl(t2, 25), 4294967295)), J.$or$n(t4.$shr(t2, 18), J.$and$n(t4.$shl(t2, 14), 4294967295))), t4.$shr(t2, 3));
                t4 = t1[i - 16];
                if (typeof t4 !== "number")
                  throw H.iae(t4);
                t4 = J.$add$ns(t2, t4);
              case 4:
                state0 = 0;
                t1[i] = J.$and$n(J.$add$ns(t3, J.$and$n(t4, 4294967295)), 4294967295);
                ++i;
            }
        t2 = this._h;
        t3 = t2.length;
        if (0 >= t3)
          throw H.ioore(0);
        a = t2[0];
      case 5:
        state0 = 0;
        if (1 >= t3)
          throw H.ioore(1);
        b = t2[1];
      case 6:
        state0 = 0;
        if (2 >= t3)
          throw H.ioore(2);
        c = t2[2];
      case 7:
        state0 = 0;
        if (3 >= t3)
          throw H.ioore(3);
        d = t2[3];
      case 8:
        state0 = 0;
        if (4 >= t3)
          throw H.ioore(4);
        e = t2[4];
      case 9:
        state0 = 0;
        if (5 >= t3)
          throw H.ioore(5);
        f = t2[5];
      case 10:
        state0 = 0;
        if (6 >= t3)
          throw H.ioore(6);
        g = t2[6];
      case 11:
        state0 = 0;
        if (7 >= t3)
          throw H.ioore(7);
        h = t2[7];
      case 12:
        state0 = 0;
        for (t = 0; t2 = J.getInterceptor$ns(a), t3 = J.getInterceptor$ns(b), t4 = J.getInterceptor$ns(d), t5 = J.getInterceptor$ins(e), t6 = J.getInterceptor$ns(h), t < 64; ++t, h = g, g = f, f = e, e = e0, d = c, c = b, b = a, a = a0) {
          t6 = J.$and$n(t6.$add(h, J.$xor$n(J.$xor$n(J.$or$n(t5.$shr(e, 6), J.$and$n(t5.$shl(e, 26), 4294967295)), J.$or$n(t5.$shr(e, 11), J.$and$n(t5.$shl(e, 21), 4294967295))), J.$or$n(t5.$shr(e, 25), J.$and$n(t5.$shl(e, 7), 4294967295)))), 4294967295);
          t5 = J.$xor$n(t5.$and(e, f), J.$and$n(J.$and$n(t5.$not(e), 4294967295), g));
          t7 = C.List_6JR[t];
          t8 = t1[t];
          if (typeof t8 !== "number")
            throw H.iae(t8);
          t10 = J.$and$n(J.$add$ns(t6, J.$and$n(J.$add$ns(t5, (t7 + t8 & 4294967295) >>> 0), 4294967295)), 4294967295);
          t2 = J.$and$n(J.$add$ns(J.$xor$n(J.$xor$n(J.$or$n(t2.$shr(a, 2), J.$and$n(t2.$shl(a, 30), 4294967295)), J.$or$n(t2.$shr(a, 13), J.$and$n(t2.$shl(a, 19), 4294967295))), J.$or$n(t2.$shr(a, 22), J.$and$n(t2.$shl(a, 10), 4294967295))), J.$xor$n(J.$xor$n(t2.$and(a, b), t2.$and(a, c)), t3.$and(b, c))), 4294967295);
          e0 = J.$and$n(t4.$add(d, t10), 4294967295);
          a0 = J.$and$n(J.$add$ns(t10, t2), 4294967295);
        }
        t1 = this._h;
        if (0 >= t1.length)
          throw H.ioore(0);
        t7 = t1[0];
        if (typeof t7 !== "number")
          throw H.iae(t7);
        t7 = t2.$add(a, t7);
      case 13:
        state0 = 0;
        t1[0] = J.$and$n(t7, 4294967295);
        t7 = this._h;
        if (1 >= t7.length)
          throw H.ioore(1);
        t1 = t7[1];
        if (typeof t1 !== "number")
          throw H.iae(t1);
        t1 = t3.$add(b, t1);
      case 14:
        state0 = 0;
        t7[1] = J.$and$n(t1, 4294967295);
        t1 = this._h;
        if (2 >= t1.length)
          throw H.ioore(2);
        t7 = t1[2];
        if (typeof t7 !== "number")
          throw H.iae(t7);
        t7 = J.$add$ns(c, t7);
      case 15:
        state0 = 0;
        t1[2] = J.$and$n(t7, 4294967295);
        t7 = this._h;
        if (3 >= t7.length)
          throw H.ioore(3);
        t1 = t7[3];
        if (typeof t1 !== "number")
          throw H.iae(t1);
        t1 = t4.$add(d, t1);
      case 16:
        state0 = 0;
        t7[3] = J.$and$n(t1, 4294967295);
        t1 = this._h;
        if (4 >= t1.length)
          throw H.ioore(4);
        t7 = t1[4];
        if (typeof t7 !== "number")
          throw H.iae(t7);
        t7 = t5.$add(e, t7);
      case 17:
        state0 = 0;
        t1[4] = J.$and$n(t7, 4294967295);
        t7 = this._h;
        if (5 >= t7.length)
          throw H.ioore(5);
        t1 = t7[5];
        if (typeof t1 !== "number")
          throw H.iae(t1);
        t1 = J.$add$ns(f, t1);
      case 18:
        state0 = 0;
        t7[5] = J.$and$n(t1, 4294967295);
        t1 = this._h;
        if (6 >= t1.length)
          throw H.ioore(6);
        t7 = t1[6];
        if (typeof t7 !== "number")
          throw H.iae(t7);
        t7 = J.$add$ns(g, t7);
      case 19:
        state0 = 0;
        t1[6] = J.$and$n(t7, 4294967295);
        t7 = this._h;
        if (7 >= t7.length)
          throw H.ioore(7);
        t1 = t7[7];
        if (typeof t1 !== "number")
          throw H.iae(t1);
        t1 = t6.$add(h, t1);
      case 20:
        var t, t8, t10, e0, a0;
        state0 = 0;
        t7[7] = J.$and$n(t1, 4294967295);
    }
  },
  SHA256$0: function() {
    var t1, t2;
    t1 = this._h;
    t2 = t1.length;
    if (0 >= t2)
      throw H.ioore(0);
    t1[0] = 1779033703;
    if (1 >= t2)
      throw H.ioore(1);
    t1[1] = 3144134277;
    if (2 >= t2)
      throw H.ioore(2);
    t1[2] = 1013904242;
    if (3 >= t2)
      throw H.ioore(3);
    t1[3] = 2773480762;
    if (4 >= t2)
      throw H.ioore(4);
    t1[4] = 1359893119;
    if (5 >= t2)
      throw H.ioore(5);
    t1[5] = 2600822924;
    if (6 >= t2)
      throw H.ioore(6);
    t1[6] = 528734635;
    if (7 >= t2)
      throw H.ioore(7);
    t1[7] = 1541459225;
  },
  static: {
"": "SHA256__K",
SHA256$: function() {
  var t1 = new M.SHA256(P.List_List(64, null), 16, 8, true, 0, [], null, null, false);
  t1._HashBase$3(16, 8, true);
  t1.SHA256$0();
  return t1;
}}

}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (srcStart !== (srcStart | 0))
    return H.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !H.isJsIndexable(dst, dst[init.dispatchPropertyName]))
    return H.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart) {
    i = srcStart + count - 1;
    if (i !== (i | 0))
      return H.Arrays_copy$bailout(2, src, srcStart, dst, dstStart, count, i);
    j = dstStart + count - 1;
    t1 = src.length;
    t2 = dst.length;
    for (; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw H.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw H.ioore(j);
      dst[j] = t3;
    }
  } else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= t2)
        throw H.ioore(i);
      t4 = src[i];
      if (j >>> 0 !== j || j >= t3)
        throw H.ioore(j);
      dst[j] = t4;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count, i) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    case 2:
      var j, t1;
      if (state0 === 2 || state0 === 0 && srcStart < dstStart)
        switch (state0) {
          case 0:
            i = srcStart + count - 1;
          case 2:
            state0 = 0;
            j = dstStart + count - 1;
            for (; i >= srcStart; --i, --j) {
              if (i >>> 0 !== i || i >= src.length)
                throw H.ioore(i);
              C.JSArray_methods.$indexSet(dst, j, src[i]);
            }
        }
      else
        for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
          if (i >>> 0 !== i || i >= src.length)
            throw H.ioore(i);
          C.JSArray_methods.$indexSet(dst, j, src[i]);
        }
  }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_firstWhere: function(iterable, test, orElse) {
  var t1, element;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();) {
    element = t1._current;
    if (test.call$1(element) === true)
      return element;
  }
  throw H.wrapException(new P.StateError("No matching element"));
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1;
  if (start < 0 || start > list.length) {
    t1 = list.length;
    throw H.wrapException(new P.RangeError("value " + H.S(start) + " not in range 0.." + t1));
  }
  if (end < start || end > list.length) {
    t1 = list.length;
    throw H.wrapException(new P.RangeError("value " + H.S(end) + " not in range " + H.S(start) + ".." + t1));
  }
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(new P.StateError("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._length !== $length)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  }
},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  $asIterableBase: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(new P.UnsupportedError("Cannot change the length of a fixed-length list"));
  },
  remove$1: function(receiver, element) {
    throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
  }
},

UnmodifiableListMixin: {"": "Object;",
  $indexSet: function(_, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
  },
  set$length: function(_, newLength) {
    throw H.wrapException(new P.UnsupportedError("Cannot change the length of an unmodifiable list"));
  },
  remove$1: function(_, element) {
    throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
  },
  $isList: true,
  $asList: null
},

UnmodifiableListBase: {"": "ListBase+UnmodifiableListMixin;", $asListBase: null, $asList: null, $isList: true}}],
["dart.async", "dart:async", , P, {
_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

runAsync: function(callback) {
  var currentZone = $.get$_Zone__current();
  currentZone.runAsync$2(callback, currentZone);
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, result, t5, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    result = new P._Future(0, $.get$_Zone__current(), null, null, new P.Future_wait_closure(t1, pos), null, null, null);
    result.$builtinTypeInfo = [null];
    t5 = result._zone;
    t5._openCallbacks = t5._openCallbacks + 1;
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray0;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if (P.getAttachedStackTrace(error) != null)
    return error;
  P._attachStackTrace(error, stackTrace);
  return error;
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$1(P._asyncError(e, s));
  }

},

_cancelAndError: function(subscription, future) {
  return new P._cancelAndError_closure(subscription, future);
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      t1.completeError$2;
      t1 = t1.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(error, null);
    }
  }
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  }
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future", $as_Completer: null},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_onError: function() {
    return this._state === 2 ? null : this._onErrorCallback;
  },
  _onError$1: function(arg0) {
    return this.get$_onError().call$1(arg0);
  },
  then$2$onError: function(f, onError) {
    var result, t1;
    result = new P._Future(0, $.get$_Zone__current(), null, null, f, null, onError, null);
    result.$builtinTypeInfo = [null];
    t1 = result._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var result, t1;
    result = new P._Future(0, $.get$_Zone__current(), null, null, null, test, f, null);
    result.$builtinTypeInfo = [null];
    t1 = result._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$1: function(error) {
    this._state = 8;
    this._resultOrListeners = error;
  },
  _addListener$1: function(listener) {
    if (this._state >= 4)
      P.runAsync(new P._Future__addListener_closure(this, listener));
    else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners;
    if (stackTrace != null)
      P._attachStackTrace(error, stackTrace);
    listeners = this._state === 2 ? null : this._removeListeners$0();
    this._setError$1(error);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$1: function(error) {
    return this._completeError$2(error, null);
  },
  get$_completeError: function() {
    return new P.Bound__completeError__Future(this, "_completeError$2", null);
  },
  _asyncComplete$1: function(value) {
    var t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture)
      t1 = !t1.$is_Future || value._state < 4;
    else
      t1 = false;
    if (t1) {
      this._complete$1(value);
      return;
    }
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    P.runAsync(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(new P.StateError("Future already completed"));
    this._state = 1;
    P.runAsync(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.get$_Zone__current(), null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.get$_Zone__current(), null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._Future$immediate$1(value, $T);
  return t1;
},

_Future__chainFutures: function(source, target) {
  target._state = 2;
  if (!!source.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners.set$_nextListener(null);
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      t2.get$_zone().handleUncaughtError$1(t2.get$_error());
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t4 = t3.get$_errorZone() !== t4.get$_errorZone();
      t3 = t4;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      t2.get$_zone().handleUncaughtError$1(t2.get$_error());
      return;
    }
    t3 = $.get$_Zone__current();
    t4 = listeners._zone;
    if (t3 !== t4) {
      t4._runInZone$2(new P._Future__propagateToListeners_closure(t1, listeners), false);
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4._openCallbacks = t4._openCallbacks - 1;
    t4._runInZone$2(new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners), false);
    if (t2.isPropagationAborted_3 === true)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 8;
      listeners._resultOrListeners = t2;
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  }
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  }
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$1: function(error) {
    this.target_1._completeError$1(error);
  }
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  }
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  }
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var value, error, test, matchesTest, e, s, t1, t2, t3, exception;
    try {
      t1 = this.box_2;
      if (!this.hasError_4) {
        value = t1.source_4.get$_value();
        t1 = this.listener_5;
        t2 = t1._state === 2 ? null : t1._onValueCallback;
        t3 = this.box_1;
        if (t2 != null) {
          t3.listenerValueOrError_2 = t1._onValue$1(value);
          t3.listenerHasValue_1 = true;
        } else {
          t3.listenerValueOrError_2 = value;
          t3.listenerHasValue_1 = true;
        }
      } else {
        error = t1.source_4.get$_error();
        t1 = this.listener_5;
        test = t1._state === 2 ? null : t1._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(error);
        if (matchesTest === true)
          t2 = (t1._state === 2 ? null : t1._onErrorCallback) != null;
        else
          t2 = false;
        t3 = this.box_1;
        if (t2) {
          t3.listenerValueOrError_2 = t1._onError$1(error);
          t3.listenerHasValue_1 = true;
        } else {
          t3.listenerValueOrError_2 = error;
          t3.listenerHasValue_1 = false;
        }
      }
      t1 = this.listener_5;
      if (t1._state === 2)
        ;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = this.box_1;
      t1.listenerValueOrError_2 = P._asyncError(e, s);
      t1.listenerHasValue_1 = false;
    }

    t1 = this.box_1;
    if (t1.listenerHasValue_1 === true) {
      t1 = t1.listenerValueOrError_2;
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isFuture;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      t1 = this.listener_5._zone;
      t1._openCallbacks = t1._openCallbacks + 1;
    }
  }
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  }
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$1: function(error) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$1(error);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  }
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new P._Future(0, $.get$_Zone__current(), null, null, null, null, null, null);
    future.$builtinTypeInfo = [J.JSInt];
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  },
  toList$0: function(_) {
    var result, future;
    result = [];
    future = P._Future$([J.JSArray0, H.getRuntimeTypeArgument(this, "Stream", 0)]);
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndError(this.box_0.subscription_0, this.future_3));
  }
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  }
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  }
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  }
},

Stream_toList_closure: {"": "Closure;this_0,result_1",
  call$1: function(data) {
    this.result_1.push(data);
  }
},

Stream_toList_closure0: {"": "Closure;result_2,future_3",
  call$0: function() {
    this.future_3._complete$1(this.result_2);
  }
},

StreamSubscription: {"": "Object;"},

EventSink: {"": "Object;"},

_cancelAndError_closure: {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._completeError$1(error);
  }
},

_ZoneBase: {"": "Object;",
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  _checkIfDone$0: function() {
    if (!this._isExecutingCallback && this._openCallbacks === 0 && this._childCount === 0)
      ;
  },
  _runInZone$2: function(f, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    if ($.get$_Zone__current() === this && handleUncaught !== true && this._isExecutingCallback)
      return f.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if (handleUncaught === true)
          this.handleUncaughtError$1(P._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = oldIsExecuting;
      $._Zone__current = oldZone;
      this._checkIfDone$0();
    }
  },
  runAsync$2: function(f, zone) {
    return this._parentZone.runAsync$2(f, zone);
  }
},

_DefaultZone: {"": "_ZoneBase;_parentZone,_childCount,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    var milliseconds;
    $.get$_asyncCallbacks()._add$1(new P._DefaultZone_handleUncaughtError_closure(error));
    if (!$._callbacksAreEnqueued) {
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  runAsync$2: function(f, zone) {
    if (this === zone) {
      P._scheduleAsyncCallback(f);
      return;
    }
    zone._openCallbacks = zone._openCallbacks + 1;
    P._scheduleAsyncCallback(new P._DefaultZone_runAsync_closure(f, zone));
  }
},

_DefaultZone_handleUncaughtError_closure: {"": "Closure;error_0",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    H.Primitives_printString("Uncaught Error: " + H.S(t1));
    trace = P.getAttachedStackTrace(t1);
    P._attachStackTrace(t1, null);
    if (trace != null)
      H.Primitives_printString("Stack Trace:\n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  }
},

_DefaultZone_runAsync_closure: {"": "Closure;f_0,zone_1",
  call$0: function() {
    var t1 = this.zone_1;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this.f_0, true);
  }
},

_ZoneTimer: {"": "Object;_zone<,_liblib4$_callback,_timer",
  _run$0: function() {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this._liblib4$_callback, true);
  },
  get$_run: function() {
    return new P.BoundClosure$0(this, "_run$0", null);
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_liblib1$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1, t2;
    t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    t2 = new H.MappedIterable(t1, new P._HashMap_values_closure(this));
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    return t2;
  },
  containsKey$1: function(key) {
    var nums, rest;
    if ((key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib1$_length = this._liblib1$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(new P.ConcurrentModificationError(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._liblib1$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && table[key] != null) {
      value = P._HashMap__getTableEntry(table, key);
      delete table[key];
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return J.$index$asx(this.this_0, each);
  }
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(new P.ConcurrentModificationError(t1));
    }
  },
  $asIterableBase: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_liblib1$_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._liblib1$_offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = keys[offset];
      this._liblib1$_offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_liblib1$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1, t2;
    t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    t2 = new H.MappedIterable(t1, new P._LinkedHashMap_values_closure(this));
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    return t2;
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_liblib1$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_liblib1$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_liblib1$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, cell, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      cell = strings[key];
      if (cell == null)
        strings[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_liblib1$_value(value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      cell = nums[key];
      if (cell == null)
        nums[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_liblib1$_value(value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_liblib1$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_liblib1$_value();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._liblib1$_value);
      if (modifications !== this._modifications)
        throw H.wrapException(new P.ConcurrentModificationError(this));
      cell = cell._next;
    }
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_liblib1$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous._next = next;
    if (next == null)
      this._last = previous;
    else
      next._previous = previous;
    this._liblib1$_length = this._liblib1$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true
},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return J.$index$asx(this.this_0, each);
  }
},

LinkedHashMapCell: {"": "Object;_key<,_liblib1$_value@,_next<,_previous<"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell._key);
      if (modifications !== t1._modifications)
        throw H.wrapException(new P.ConcurrentModificationError(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(new P.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1._key;
        this._cell = this._cell._next;
        return true;
      }
    }
  }
},

UnmodifiableListView: {"": "UnmodifiableListBase;_source",
  get$length: function(_) {
    return this._source.length;
  },
  $index: function(_, index) {
    var t1 = this._source;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(index);
    return t1[index];
  },
  $asUnmodifiableListBase: null,
  $asList: null
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw H.wrapException(new P.RangeError("value " + H.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(new P.RangeError("value " + H.S(index)));
  }
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.forEach$1$bailout(1, action, receiver);
    $length = receiver.length;
    for (i = 0; i < $length; ++i) {
      if (i >= receiver.length)
        throw H.ioore(i);
      action.call$1(receiver[i]);
      if ($length !== receiver.length)
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(new P.ConcurrentModificationError(receiver));
    }
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) === 0)
      throw H.wrapException(new P.StateError("No elements"));
    return this.$index(receiver, 0);
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, receiver.length);
    } else {
      result = P.List_List(receiver.length, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw H.ioore(i);
      result[i] = t3;
    }
    return result;
  },
  toList$1$growable$bailout: function(state0, growable, receiver) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    for (i = 0; i < this.get$length(receiver); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  remove$1: function(receiver, element) {
    var i;
    for (i = 0; i < this.get$length(receiver); ++i)
      if (J.$eq(this.$index(receiver, i), element)) {
        this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
        this.set$length(receiver, this.get$length(receiver) - 1);
        return true;
      }
    return false;
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var t1, $length, i;
    if (typeof iterable !== "string" && (typeof iterable !== "object" || iterable === null || iterable.constructor !== Array && !H.isJsIndexable(iterable, iterable[init.dispatchPropertyName])))
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (start < 0 || start > this.get$length(receiver)) {
      t1 = this.get$length(receiver);
      H.throwExpression(new P.RangeError("value " + start + " not in range 0.." + t1));
    }
    if (end < start || end > this.get$length(receiver)) {
      t1 = this.get$length(receiver);
      H.throwExpression(new P.RangeError("value " + H.S(end) + " not in range " + start + ".." + t1));
    }
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (skipCount + $length > iterable.length)
      throw H.wrapException(new P.StateError("Not enough elements"));
    if (skipCount < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = skipCount + i;
        if (t1 >>> 0 !== t1 || t1 >= iterable.length)
          throw H.ioore(t1);
        this.$indexSet(receiver, start + i, iterable[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = skipCount + i;
        if (t1 >= iterable.length)
          throw H.ioore(t1);
        this.$indexSet(receiver, start + i, iterable[t1]);
      }
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, receiver) {
    var t1, $length, i;
    if (start < 0 || start > this.get$length(receiver)) {
      t1 = this.get$length(receiver);
      H.throwExpression(new P.RangeError("value " + start + " not in range 0.." + t1));
    }
    if (end < start || end > this.get$length(receiver)) {
      t1 = this.get$length(receiver);
      H.throwExpression(new P.RangeError("value " + H.S(end) + " not in range " + start + ".." + t1));
    }
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    t1 = J.getInterceptor$asx(iterable);
    if (skipCount + $length > t1.get$length(iterable))
      throw H.wrapException(new P.StateError("Not enough elements"));
    if (skipCount < start)
      for (i = $length - 1; i >= 0; --i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
    else
      for (i = 0; i < $length; ++i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
  },
  toString$0: function(receiver) {
    var result, i, t1, result0;
    for (i = 0; i < $.get$ListMixin__toStringList().length; ++i) {
      t1 = $.get$ListMixin__toStringList();
      if (i >= t1.length)
        throw H.ioore(i);
      if (t1[i] === receiver)
        return "[...]";
    }
    result0 = new P.StringBuffer("");
    result0._contents = "";
    result = result0;
    try {
      $.get$ListMixin__toStringList().push(receiver);
      t1 = result;
      t1.set$_contents(t1.get$_contents() + "[");
      result.writeAll$2(receiver, ", ");
      t1 = result;
      t1.set$_contents(t1.get$_contents() + "]");
    } finally {
      t1 = $.get$ListMixin__toStringList();
      if (0 >= t1.length)
        throw H.ioore(0);
      t1.pop();
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  }
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(new P.ConcurrentModificationError(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(i);
      if (J.$eq(t1[i], object)) {
        this._remove$1(i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(new P.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      return this._add$1$bailout(1, element, t1, t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _add$1$bailout: function(state0, element, t1, t2) {
    var t3 = t1.length;
    if (t2 >>> 0 !== t2 || t2 >= t3)
      throw H.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(offset) {
    var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    t4 = this._tail;
    if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw H.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw H.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      t1 = this._tail;
      if (t1 !== (t1 | 0))
        return this._remove$1$bailout(1, offset, t1, mask);
      t2 = this._table;
      t3 = t2.length;
      i = offset;
      for (; i !== t1; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t3)
          throw H.ioore(nextOffset);
        t4 = t2[nextOffset];
        if (i < 0 || i >= t3)
          throw H.ioore(i);
        t2[i] = t4;
      }
      if (t1 < 0 || t1 >= t3)
        throw H.ioore(t1);
      t2[t1] = null;
      return offset;
    }
  },
  _remove$1$bailout: function(state0, offset, t1, mask) {
    switch (state0) {
      case 0:
        t1 = this._table;
        t2 = t1.length;
        mask = t2 - 1;
        t3 = this._head;
        t4 = this._tail;
      case 1:
        var t2, t3, t4, i, prevOffset, nextOffset;
        if (state0 === 0 && (offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
          for (i = offset; i !== t3; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t2)
              throw H.ioore(prevOffset);
            t4 = t1[prevOffset];
            if (i < 0 || i >= t2)
              throw H.ioore(i);
            t1[i] = t4;
          }
          if (t3 < 0 || t3 >= t2)
            throw H.ioore(t3);
          t1[t3] = null;
          this._head = (t3 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else
          switch (state0) {
            case 0:
              this._tail = (t4 - 1 & mask) >>> 0;
              t1 = this._tail;
            case 1:
              state0 = 0;
              t2 = this._table;
              t3 = t2.length;
              i = offset;
              for (; i !== t1; i = nextOffset) {
                nextOffset = (i + 1 & mask) >>> 0;
                if (nextOffset < 0 || nextOffset >= t3)
                  throw H.ioore(nextOffset);
                t4 = t2[nextOffset];
                if (i < 0 || i >= t3)
                  throw H.ioore(i);
                t2[i] = t4;
              }
              if (t1 >>> 0 !== t1 || t1 >= t3)
                throw H.ioore(t1);
              t2[t1] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(new P.ConcurrentModificationError(t1));
    t2 = this._liblib1$_position;
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.convert", "dart:convert", , P, {
_convertJsonToDart: function(json, reviver) {
  var revive = reviver == null ? new P._convertJsonToDart_closure() : reviver;
  return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
},

_parseJson: function(source, reviver) {
  var parsed, e, t1, exception;
  t1 = source;
  if (typeof t1 !== "string")
    throw H.wrapException(new P.ArgumentError(source));
  parsed = null;
  try {
    parsed = JSON.parse(source);
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    throw H.wrapException(new P.FormatException(String(e)));
  }

  return P._convertJsonToDart(parsed, reviver);
},

_convertJsonToDart_closure: {"": "Closure;",
  call$2: function(key, value) {
    return value;
  }
},

_convertJsonToDart_walk: {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = H.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  }
},

Codec: {"": "Object;"},

Converter: {"": "Object;"},

JsonUnsupportedObjectError: {"": "Error;unsupportedObject,cause",
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
},

JsonCyclicError: {"": "JsonUnsupportedObjectError;unsupportedObject,cause",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  }
},

JsonCodec: {"": "Codec;"},

JsonDecoder: {"": "Converter;_reviver"}}],
["dart.core", "dart:core", , P, {
Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

List_List: function($length, $E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(new P.ArgumentError("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw H.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
},

String_String$fromCharCodes: function(charCodes) {
  return H.Primitives_stringFromCharCodes(charCodes);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key.get$_name());
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1(P.Error_safeToString(value));
    t1.i_1 = t1.i_1 + 1;
  }
},

DateTime: {"": "Object;millisecondsSinceEpoch,isUtc",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toUtc$0: function() {
    if (this.isUtc)
      return this;
    return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch, true);
  },
  toString$0: function(_) {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    t2 = this.isUtc;
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCFullYear() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getFullYear() + 0;
    }
    y = new P.DateTime_toString_fourDigits().call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCMonth() + 1;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getMonth() + 1;
    }
    m = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCDate() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getDate() + 0;
    }
    d = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCHours() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getHours() + 0;
    }
    h = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCMinutes() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getMinutes() + 0;
    }
    min = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getUTCSeconds() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t3 = this.date.getSeconds() + 0;
    }
    sec = t1.call$1(t3);
    if (t2) {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t1 = this.date.getUTCMilliseconds() + 0;
    } else {
      if (this.date === void 0)
        this.date = new Date(this.millisecondsSinceEpoch);
      t1 = this.date.getMilliseconds() + 0;
    }
    ms = new P.DateTime_toString_threeDigits().call$1(t1);
    if (t2)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH",
DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
}}

},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = J.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) ? "-" : "";
    t1 = J.getInterceptor$n(absN);
    if (t1.$ge(absN, 1000))
      return H.S(n);
    if (t1.$ge(absN, 100))
      return sign + "0" + H.S(absN);
    if (t1.$ge(absN, 10))
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  }
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return H.S(n);
    if (t1.$ge(n, 10))
      return "0" + H.S(n);
    return "00" + H.S(n);
  }
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  }
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return new P.Duration(0 + (this._duration + other.get$_duration()));
  },
  $sub: function(_, other) {
    return new P.Duration(0 + (this._duration - other.get$_duration()));
  },
  $mul: function(_, factor) {
    var t1, truncated;
    t1 = C.JSNumber_methods.roundToDouble$0(this._duration * factor);
    if (isNaN(t1))
      H.throwExpression(new P.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      H.throwExpression(new P.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return new P.Duration(0 + (truncated == -0.0 ? 0 : truncated));
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return C.JSNumber_methods.$gt(this._duration, t1);
  },
  $le: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return C.JSNumber_methods.$le(this._duration, t1);
  },
  $ge: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return C.JSNumber_methods.$ge(this._duration, t1);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, t3, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(new P.Duration(0 + -t2));
    t3 = C.JSNumber_methods.$tdiv(t2, 60000000);
    twoDigitMinutes = t1.call$1(t3 % 60);
    t3 = C.JSNumber_methods.$tdiv(t2, 1000000);
    twoDigitSeconds = t1.call$1(t3 % 60);
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  }
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  }
},

Error: {"": "Object;", $isError: true},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  }
},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
  },
  $isError: true
},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  },
  $isException: true
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  $isException: true
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
  }
},

StringBuffer: {"": "Object;_contents@",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

}}],
["dart.dom.html", "dart:html", , W, {
OptionElement_OptionElement: function(data, value, defaultSelected, selected) {
  return new Option();
},

WebSocket_WebSocket: function(url, protocol_OR_protocols) {
  return new WebSocket(url);
},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

CssStyleDeclarationBase: {"": "Object;",
  set$background: function(receiver, value) {
    this.setProperty$3(receiver, "background", value, "");
  },
  get$color: function(receiver) {
    return this.getPropertyValue$1(receiver, "color");
  },
  set$color: function(receiver, value) {
    this.setProperty$3(receiver, "color", value, "");
  }
},

_ChildrenElementList: {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw H.wrapException(new P.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    var t1 = this.toList$0(this);
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(new P.UnimplementedError(null));
  },
  remove$1: function(_, object) {
    return false;
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  $asList: function() {
    return [W.Element];
  }
},

_FrozenElementList: {"": "ListBase;_nodeList,_elementList",
  get$length: function(_) {
    return this._nodeList.length;
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot modify list"));
  },
  set$length: function(_, newLength) {
    throw H.wrapException(new P.UnsupportedError("Cannot modify list"));
  },
  _FrozenElementList$_wrap$1: function(_nodeList, $T) {
    var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
    this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
  },
  $asListBase: null,
  $asList: null,
  $isList: true,
  static: {
_FrozenElementList$_wrap: function(_nodeList, $T) {
  var t1 = new W._FrozenElementList(_nodeList, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._FrozenElementList$_wrap$1(_nodeList, $T);
  return t1;
}}

},

_FrozenElementList$_wrap_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true},

_ChildNodeListLazy: {"": "ListBase;_this",
  remove$1: function(_, object) {
    return false;
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(new P.UnsupportedError("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(index);
    return t1[index];
  },
  $asList: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true},

SelectElement_options_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isOptionElement;
  }
},

SelectElement_selectedOptions_closure: {"": "Closure;",
  call$1: function(o) {
    return J.get$selected$x(o);
  }
},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, onData, this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture", $as_EventStream: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    var t1, t2;
    t1 = this._target;
    if (t1 == null)
      return;
    t2 = this._onData;
    if (t2 != null)
      J.$$dom_removeEventListener$3$x(t1, this._eventType, t2, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.$$dom_addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

EventStreamProvider: {"": "Object;_eventType"},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  remove$1: function(receiver, object) {
    throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw H.wrapException(new P.UnsupportedError("Cannot setRange on immutable List."));
  },
  $isList: true,
  $asList: null
},

FixedSizeListIterator: {"": "Object;_array,_liblib$_length,_position,_liblib$_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._liblib$_length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !H.isJsIndexable(t1, t1[init.dispatchPropertyName])))
        return this.moveNext$0$bailout(1, nextPosition, t1);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw H.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._liblib$_current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, nextPosition, t1) {
    switch (state0) {
      case 0:
        nextPosition = this._position + 1;
        t1 = this._liblib$_length;
      case 1:
        if (state0 === 1 || state0 === 0 && nextPosition < t1)
          switch (state0) {
            case 0:
              t1 = this._array;
            case 1:
              state0 = 0;
              this._liblib$_current = J.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._liblib$_current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  },
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
}}

},

HtmlElement: {"": "Element;"},

AnchorElement: {"": "HtmlElement;type=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

Blob: {"": "Interceptor;type="},

ButtonElement: {"": "HtmlElement;type=,value="},

CharacterData: {"": "Node;data=,length="},

CompositionEvent: {"": "UIEvent;data="},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  }
},

DataListElement: {"": "HtmlElement;options="},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

Element: {"": "Node;",
  get$children: function(receiver) {
    return new W._ChildrenElementList(receiver, receiver.children);
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  $isElement: true,
  $asElement: null
},

EmbedElement: {"": "HtmlElement;type="},

Event: {"": "Interceptor;type="},

EventTarget: {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  }
},

FieldSetElement: {"": "HtmlElement;type="},

FormElement: {"": "HtmlElement;length="},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

HttpRequest: {"": "XmlHttpRequestEventTarget;",
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  }
},

InputElement: {"": "HtmlElement;type=,value=", $isElement: true, $asElement: null},

KeygenElement: {"": "HtmlElement;type="},

LIElement: {"": "HtmlElement;type=,value="},

LinkElement: {"": "HtmlElement;type="},

MessageEvent: {"": "Event;",
  get$data: function(receiver) {
    return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
  }
},

MeterElement: {"": "HtmlElement;value="},

MidiMessageEvent: {"": "Event;data="},

Node: {"": "EventTarget;",
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      J._replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      H.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  _replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  }
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

OListElement: {"": "HtmlElement;type="},

ObjectElement: {"": "HtmlElement;data=,type="},

OptionElement: {"": "HtmlElement;selected=,value=", $isOptionElement: true, $asOptionElement: null},

OutputElement: {"": "HtmlElement;type=,value="},

ParamElement: {"": "HtmlElement;value="},

ProgressElement: {"": "HtmlElement;value="},

ScriptElement: {"": "HtmlElement;type="},

SelectElement: {"": "HtmlElement;length=,selectedIndex},type=,value=",
  get$options: function(receiver) {
    var t1 = W._FrozenElementList$_wrap(receiver.querySelectorAll("option"), null);
    t1 = t1.where$1(t1, new W.SelectElement_options_closure());
    t1 = new P.UnmodifiableListView(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$selectedOptions: function(receiver) {
    var t1, t2;
    if (receiver.multiple === true) {
      t1 = this.get$options(receiver);
      t1 = t1.where$1(t1, new W.SelectElement_selectedOptions_closure());
      t1 = new P.UnmodifiableListView(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
      H.setRuntimeTypeInfo(t1, [null]);
      return t1;
    } else {
      t1 = this.get$options(receiver);
      t2 = receiver.selectedIndex;
      t1 = t1._source;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        throw H.ioore(t2);
      return [t1[t2]];
    }
  }
},

SourceElement: {"": "HtmlElement;type="},

StyleElement: {"": "HtmlElement;type="},

TextAreaElement: {"": "HtmlElement;type=,value="},

TextEvent: {"": "UIEvent;data="},

UIEvent: {"": "Event;"},

Window: {"": "EventTarget;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

XmlHttpRequestEventTarget: {"": "EventTarget;"},

_Attr: {"": "Node;value="}}],
["dart.dom.svg", "dart:svg", , P, {
FEColorMatrixElement: {"": "SvgElement;type="},

FETurbulenceElement: {"": "SvgElement;type="},

ScriptElement0: {"": "SvgElement;type="},

StyleElement0: {"": "SvgElement;type="},

SvgElement: {"": "Element;",
  get$children: function(receiver) {
    var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    t1.$builtinTypeInfo = [W.Element];
    return t1;
  }
}}],
["dart.isolate", "dart:isolate", , P, {
_Isolate_port: function() {
  if ($.lazyPort == null)
    $.lazyPort = H.ReceivePortImpl$();
  return $.lazyPort;
},

ReceivePort: {"": "Object;"}}],
["dart.json", "dart:json", , P, {
parse: function(json, reviver) {
  return P._parseJson(json, new P.JsonDecoder(reviver)._reviver);
},

parse_closure: {"": "Closure;original_0",
  call$2: function(key, value) {
    var t1 = key == null ? "" : key;
    return this.original_0.call$2(t1, value);
  }
},

_JsonStringifier: {"": "Object;sink<,seen",
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw H.wrapException(new P.JsonCyclicError(object, null));
    }
    t1.push(object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson))
          throw H.wrapException(new P.JsonUnsupportedObjectError(object, null));
        t1 = this.seen;
        if (0 >= t1.length)
          throw H.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(new P.JsonUnsupportedObjectError(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i, t3;
    t1 = {};
    if (typeof object === "number") {
      this.sink.write$1(C.JSNumber_methods.toString$0(object));
      return true;
    } else if (object === true) {
      this.sink.write$1("true");
      return true;
    } else if (object === false) {
      this.sink.write$1("false");
      return true;
    } else if (object == null) {
      this.sink.write$1("null");
      return true;
    } else if (typeof object === "string") {
      t1 = this.sink;
      t1.write$1("\"");
      P._JsonStringifier_escape(t1, object);
      t1.write$1("\"");
      return true;
    } else {
      t2 = J.getInterceptor$ax(object);
      if (typeof object === "object" && object !== null && (object.constructor === Array || !!t2.$isList)) {
        if (typeof object !== "string" && (typeof object !== "object" || object === null || object.constructor !== Array && !H.isJsIndexable(object, object[init.dispatchPropertyName])))
          return this.stringifyJsonValue$1$bailout(1, object, t2);
        this.checkCycle$1(object);
        t2 = this.sink;
        t2.write$1("[");
        if (object.length > 0) {
          this.stringifyValue$1(object[0]);
          for (i = 1; i < object.length; ++i) {
            t2._contents = t2._contents + ",";
            if (i >= object.length)
              throw H.ioore(i);
            this.stringifyValue$1(object[i]);
          }
        }
        t2.write$1("]");
        t1 = this.seen;
        if (0 >= t1.length)
          throw H.ioore(0);
        t1.pop();
        return true;
      } else if (typeof object === "object" && object !== null && !!t2.$isMap) {
        this.checkCycle$1(object);
        t3 = this.sink;
        t3.write$1("{");
        t1.first_0 = true;
        t2.forEach$1(object, new P._JsonStringifier_stringifyJsonValue_closure(t1, this));
        t3.write$1("}");
        t3 = this.seen;
        if (0 >= t3.length)
          throw H.ioore(0);
        t3.pop();
        return true;
      } else
        return false;
    }
  },
  stringifyJsonValue$1$bailout: function(state0, object, t2) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, i, t3;
        if (state0 === 0 && typeof object === "number") {
          this.sink.write$1(C.JSNumber_methods.toString$0(object));
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                this.sink.write$1("true");
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      this.sink.write$1("false");
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            this.sink.write$1("null");
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sink;
                                  t1.write$1("\"");
                                  P._JsonStringifier_escape(t1, object);
                                  t1.write$1("\"");
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                      t2 = J.getInterceptor(object);
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || !!t2.$isList))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t1 = this.sink;
                                            t1.write$1("[");
                                            if (t2.get$length(object) > 0) {
                                              this.stringifyValue$1(t2.$index(object, 0));
                                              for (i = 1; i < t2.get$length(object); ++i) {
                                                t1._contents = t1._contents + ",";
                                                this.stringifyValue$1(t2.$index(object, i));
                                              }
                                            }
                                            t1.write$1("]");
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw H.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && !!t2.$isMap) {
                                        this.checkCycle$1(object);
                                        t3 = this.sink;
                                        t3.write$1("{");
                                        t1.first_0 = true;
                                        t2.forEach$1(object, new P._JsonStringifier_stringifyJsonValue_closure(t1, this));
                                        t3.write$1("}");
                                        t3 = this.seen;
                                        if (0 >= t3.length)
                                          throw H.ioore(0);
                                        t3.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  },
  static: {
_JsonStringifier_stringify: function(object) {
  var output = P.StringBuffer$("");
  new P._JsonStringifier(output, []).stringifyValue$1(object);
  return output._contents;
},

_JsonStringifier_escape: function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2;
  t1 = J.getInterceptor$asx(s);
  $length = t1.get$length(s);
  charCodes = P.List_List(null, J.JSInt);
  H.setRuntimeTypeInfo(charCodes, [J.JSInt]);
  needsEscape = false;
  i = 0;
  while (true) {
    if (typeof $length !== "number")
      throw H.iae($length);
    if (!(i < $length))
      break;
    charCode = t1.codeUnitAt$1(s, i);
    if (charCode < 32) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t2 = C.JSInt_methods.$shr(charCode, 12) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = C.JSInt_methods.$shr(charCode, 8) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = C.JSInt_methods.$shr(charCode, 4) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = charCode & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
    ++i;
  }
  sb.write$1(needsEscape ? P.String_String$fromCharCodes(charCodes) : s);
}}

},

_JsonStringifier_stringifyJsonValue_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.this_1;
    if (!t1.first_0)
      t2.get$sink().write$1(",\"");
    else
      t2.get$sink().write$1("\"");
    t2 = this.this_1;
    P._JsonStringifier_escape(t2.get$sink(), key);
    t2.get$sink().write$1("\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  }
}}],
["dart.math", "dart:math", , P, {
min: function(a, b) {
  if (a == null)
    throw a.$gt();
  if (b == null)
    throw H.iae(b);
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0 && C.JSDouble_methods.get$isNegative(b) || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && C.JSNumber_methods.get$isNegative(a))
    return b;
  return a;
},

_Random: {"": "Object;"}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

},

TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(new P.RangeError("value " + H.S(index) + " not in range 0.." + $length));
    else
      throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
  }
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
}}],
["dart.utf", "dart:utf", , P, {
_utf16CodeUnitsToCodepoints: function(utf16CodeUnits, offset, $length, replacementCodepoint) {
  var t1, t2, t3, source, decoder, codepoints, i, i0, codepointTrunc;
  t1 = P._ListRange$(utf16CodeUnits, offset, $length);
  t2 = t1._offset;
  t3 = t1._liblib3$_length;
  if (t3 == null)
    throw H.iae(t3);
  source = new P._ListRangeIteratorImpl(t1._liblib3$_source, t2 - 1, t2 + t3);
  decoder = new P.Utf16CodeUnitDecoder(source, replacementCodepoint, null);
  codepoints = P.List_List(source._liblib3$_end - source._offset - 1, J.JSInt);
  H.setRuntimeTypeInfo(codepoints, [J.JSInt]);
  for (t1 = codepoints.length, i = 0; decoder.moveNext$0(); i = i0) {
    i0 = i + 1;
    t2 = decoder._liblib3$_current;
    if (i >= t1)
      throw H.ioore(i);
    codepoints[i] = t2;
  }
  if (i === t1)
    return codepoints;
  else {
    codepointTrunc = P.List_List(i, J.JSInt);
    H.setRuntimeTypeInfo(codepointTrunc, [J.JSInt]);
    H.IterableMixinWorkaround_setRangeList(codepointTrunc, 0, i, codepoints, 0);
    return codepointTrunc;
  }
},

_addToEncoding: function(offset, bytes, value, buffer) {
  var t1, t2;
  if (typeof value !== "number")
    return P._addToEncoding$bailout(1, offset, bytes, value, buffer);
  for (t1 = buffer.length; bytes > 0;) {
    t2 = offset + bytes;
    if (t2 < 0 || t2 >= t1)
      throw H.ioore(t2);
    buffer[t2] = (128 | value & 63) >>> 0;
    value = C.JSNumber_methods.$shr(value, 6);
    --bytes;
  }
  return value;
},

_addToEncoding$bailout: function(state0, offset, bytes, value, buffer) {
  var t1, t2, t3, t4;
  for (t1 = buffer.length; bytes > 0;) {
    t2 = offset + bytes;
    t3 = J.getInterceptor$n(value);
    t4 = t3.$and(value, 63);
    if (typeof t4 !== "number")
      throw H.iae(t4);
    if (t2 < 0 || t2 >= t1)
      throw H.ioore(t2);
    buffer[t2] = (128 | t4) >>> 0;
    value = t3.$shr(value, 6);
    --bytes;
  }
  return value;
},

codepointsToUtf8: function(codepoints, offset, $length) {
  var source, t1, t2, t3, t4, t5, t6, t7, encodedLength, t8, value, encoded, insertAt, insertAt0;
  source = P._ListRange$(codepoints, offset, $length);
  t1 = source._liblib3$_source;
  t2 = source._offset;
  t3 = source._liblib3$_length;
  if (t3 == null)
    throw H.iae(t3);
  t3 = t2 + t3;
  --t2;
  t4 = new P._ListRangeIteratorImpl(t1, t2, t3);
  t5 = t4._liblib3$_end;
  t6 = t4._liblib3$_source;
  if (typeof t6 !== "object" || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !H.isJsIndexable(t6, t6[init.dispatchPropertyName]))
    return P.codepointsToUtf8$bailout(1, t6, t4, t1, t2, t3, t5);
  t7 = t6.length;
  encodedLength = 0;
  for (; t8 = t4._offset + 1, t4._offset = t8, t8 < t5;) {
    t8 = t4._offset;
    if (t8 >>> 0 !== t8 || t8 >= t7)
      throw H.ioore(t8);
    value = t6[t8];
    t8 = J.getInterceptor$n(value);
    if (t8.$lt(value, 0) || t8.$gt(value, 1114111))
      encodedLength += 3;
    else if (t8.$le(value, 127))
      ++encodedLength;
    else if (t8.$le(value, 2047))
      encodedLength += 2;
    else if (t8.$le(value, 65535))
      encodedLength += 3;
    else if (t8.$le(value, 1114111))
      encodedLength += 4;
  }
  encoded = P.List_List(encodedLength, J.JSInt);
  H.setRuntimeTypeInfo(encoded, [J.JSInt]);
  t1 = new P._ListRangeIteratorImpl(t1, t2, t3);
  t2 = t1._liblib3$_end;
  t3 = t1._liblib3$_source;
  if (typeof t3 !== "object" || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !H.isJsIndexable(t3, t3[init.dispatchPropertyName]))
    return P.codepointsToUtf8$bailout(2, 0, 0, t1, t2, t3, 0, encoded);
  t4 = encoded.length;
  t5 = t3.length;
  insertAt = 0;
  for (; t6 = t1._offset + 1, t1._offset = t6, t6 < t2;) {
    t6 = t1._offset;
    if (t6 >>> 0 !== t6 || t6 >= t5)
      throw H.ioore(t6);
    value = t3[t6];
    t6 = J.getInterceptor$n(value);
    if (t6.$lt(value, 0) || t6.$gt(value, 1114111)) {
      insertAt0 = insertAt + 3;
      H.IterableMixinWorkaround_setRangeList(encoded, insertAt, insertAt0, [239, 191, 189], 0);
      insertAt = insertAt0;
    } else if (t6.$le(value, 127)) {
      if (insertAt >= t4)
        throw H.ioore(insertAt);
      encoded[insertAt] = value;
      ++insertAt;
    } else if (t6.$le(value, 2047)) {
      t6 = P._addToEncoding(insertAt, 1, value, encoded);
      if (typeof t6 !== "number")
        throw H.iae(t6);
      if (insertAt >= t4)
        throw H.ioore(insertAt);
      encoded[insertAt] = (192 | 31 & t6) >>> 0;
      insertAt += 2;
    } else if (t6.$le(value, 65535)) {
      t6 = P._addToEncoding(insertAt, 2, value, encoded);
      if (typeof t6 !== "number")
        throw H.iae(t6);
      if (insertAt >= t4)
        throw H.ioore(insertAt);
      encoded[insertAt] = (224 | 15 & t6) >>> 0;
      insertAt += 3;
    } else if (t6.$le(value, 1114111)) {
      t6 = P._addToEncoding(insertAt, 3, value, encoded);
      if (typeof t6 !== "number")
        throw H.iae(t6);
      if (insertAt >= t4)
        throw H.ioore(insertAt);
      encoded[insertAt] = (240 | 7 & t6) >>> 0;
      insertAt += 4;
    }
  }
  return encoded;
},

codepointsToUtf8$bailout: function(state0, t6, t4, t1, t2, t3, t5, encoded) {
  switch (state0) {
    case 0:
      source = P._ListRange$(codepoints, offset, $length);
      t1 = source._liblib3$_source;
      t2 = source._offset;
      t3 = source._liblib3$_length;
      if (t3 == null)
        throw H.iae(t3);
      t3 = t2 + t3;
      --t2;
      t4 = new P._ListRangeIteratorImpl(t1, t2, t3);
      t5 = t4._liblib3$_end;
      t6 = t4._liblib3$_source;
    case 1:
      state0 = 0;
      t7 = J.getInterceptor$asx(t6);
      encodedLength = 0;
      for (; t8 = t4._offset + 1, t4._offset = t8, t8 < t5;) {
        value = t7.$index(t6, t4._offset);
        t8 = J.getInterceptor$n(value);
        if (t8.$lt(value, 0) || t8.$gt(value, 1114111))
          encodedLength += 3;
        else if (t8.$le(value, 127))
          ++encodedLength;
        else if (t8.$le(value, 2047))
          encodedLength += 2;
        else if (t8.$le(value, 65535))
          encodedLength += 3;
        else if (t8.$le(value, 1114111))
          encodedLength += 4;
      }
      encoded = P.List_List(encodedLength, J.JSInt);
      H.setRuntimeTypeInfo(encoded, [J.JSInt]);
      t1 = new P._ListRangeIteratorImpl(t1, t2, t3);
      t2 = t1._liblib3$_end;
      t3 = t1._liblib3$_source;
    case 2:
      var source, t7, encodedLength, t8, value, insertAt, insertAt0;
      state0 = 0;
      t4 = J.getInterceptor$asx(t3);
      t5 = encoded.length;
      insertAt = 0;
      for (; t6 = t1._offset + 1, t1._offset = t6, t6 < t2;) {
        value = t4.$index(t3, t1._offset);
        t6 = J.getInterceptor$n(value);
        if (t6.$lt(value, 0) || t6.$gt(value, 1114111)) {
          insertAt0 = insertAt + 3;
          H.IterableMixinWorkaround_setRangeList(encoded, insertAt, insertAt0, [239, 191, 189], 0);
          insertAt = insertAt0;
        } else if (t6.$le(value, 127)) {
          if (insertAt >= t5)
            throw H.ioore(insertAt);
          encoded[insertAt] = value;
          ++insertAt;
        } else if (t6.$le(value, 2047)) {
          t6 = P._addToEncoding(insertAt, 1, value, encoded);
          if (typeof t6 !== "number")
            throw H.iae(t6);
          if (insertAt >= t5)
            throw H.ioore(insertAt);
          encoded[insertAt] = (192 | 31 & t6) >>> 0;
          insertAt += 2;
        } else if (t6.$le(value, 65535)) {
          t6 = P._addToEncoding(insertAt, 2, value, encoded);
          if (typeof t6 !== "number")
            throw H.iae(t6);
          if (insertAt >= t5)
            throw H.ioore(insertAt);
          encoded[insertAt] = (224 | 15 & t6) >>> 0;
          insertAt += 3;
        } else if (t6.$le(value, 1114111)) {
          t6 = P._addToEncoding(insertAt, 3, value, encoded);
          if (typeof t6 !== "number")
            throw H.iae(t6);
          if (insertAt >= t5)
            throw H.ioore(insertAt);
          encoded[insertAt] = (240 | 7 & t6) >>> 0;
          insertAt += 4;
        }
      }
      return encoded;
  }
},

Utf16CodeUnitDecoder: {"": "Object;utf16CodeUnitIterator,replacementCodepoint,_liblib3$_current",
  get$iterator: function(_) {
    return this;
  },
  get$current: function() {
    return this._liblib3$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3, t4, t5, value, t6, nextValue;
    this._liblib3$_current = null;
    t1 = this.utf16CodeUnitIterator;
    t2 = t1._offset + 1;
    t1._offset = t2;
    t3 = t1._liblib3$_end;
    if (!(t2 < t3))
      return false;
    t2 = t1._liblib3$_source;
    if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !H.isJsIndexable(t2, t2[init.dispatchPropertyName]))
      return this.moveNext$0$bailout(1, t2, t1, t3);
    t4 = t1._offset;
    t5 = t2.length;
    if (t4 >>> 0 !== t4 || t4 >= t5)
      throw H.ioore(t4);
    value = t2[t4];
    if (typeof value !== "number")
      return this.moveNext$0$bailout(2, t2, t1, t3, C.JSArray_methods, value);
    if (value < 0) {
      t1 = this.replacementCodepoint;
      if (t1 != null)
        this._liblib3$_current = t1;
      else
        throw H.wrapException(new P.ArgumentError("Invalid UTF16 at " + t4));
    } else {
      if (!(value < 55296))
        t6 = value > 57343 && value <= 65535;
      else
        t6 = true;
      if (t6)
        this._liblib3$_current = value;
      else {
        if (value < 56320) {
          ++t4;
          t1._offset = t4;
          t3 = t4 < t3;
        } else
          t3 = false;
        if (t3) {
          t3 = t1._offset;
          if (t3 >>> 0 !== t3 || t3 >= t5)
            throw H.ioore(t3);
          nextValue = t2[t3];
          if (typeof nextValue !== "number")
            return this.moveNext$0$bailout(3, 0, t1, 0, 0, value, C.JSNumber_methods, nextValue);
          if (nextValue >= 56320 && nextValue <= 57343)
            this._liblib3$_current = (value - 55296 << 10 >>> 0) + (65536 + (nextValue - 56320));
          else {
            if (nextValue >= 55296 && nextValue < 56320)
              t1._offset = t3 - 1;
            t2 = this.replacementCodepoint;
            if (t2 != null)
              this._liblib3$_current = t2;
            else
              throw H.wrapException(new P.ArgumentError("Invalid UTF16 at " + H.S(t1._offset)));
          }
        } else {
          t2 = this.replacementCodepoint;
          if (t2 != null)
            this._liblib3$_current = t2;
          else
            throw H.wrapException(new P.ArgumentError("Invalid UTF16 at " + H.S(t1._offset)));
        }
      }
    }
    return true;
  },
  moveNext$0$bailout: function(state0, t2, t1, t3, t4, value, t5, nextValue) {
    switch (state0) {
      case 0:
        this._liblib3$_current = null;
        t1 = this.utf16CodeUnitIterator;
        t2 = t1._offset + 1;
        t1._offset = t2;
        t3 = t1._liblib3$_end;
        if (!(t2 < t3))
          return false;
        t2 = t1._liblib3$_source;
      case 1:
        state0 = 0;
        t4 = J.getInterceptor$asx(t2);
        value = t4.$index(t2, t1._offset);
      case 2:
        state0 = 0;
        t5 = J.getInterceptor$n(value);
      case 3:
        var t6;
        if (state0 === 0 && t5.$lt(value, 0)) {
          t2 = this.replacementCodepoint;
          if (t2 != null)
            this._liblib3$_current = t2;
          else
            throw H.wrapException(new P.ArgumentError("Invalid UTF16 at " + H.S(t1._offset)));
        } else
          switch (state0) {
            case 0:
              if (!t5.$lt(value, 55296))
                t6 = t5.$gt(value, 57343) && t5.$le(value, 65535);
              else
                t6 = true;
            case 3:
              if (state0 === 0 && t6)
                this._liblib3$_current = value;
              else
                switch (state0) {
                  case 0:
                    if (t5.$lt(value, 56320)) {
                      t6 = t1._offset + 1;
                      t1._offset = t6;
                      t3 = t6 < t3;
                    } else
                      t3 = false;
                  case 3:
                    if (state0 === 3 || state0 === 0 && t3)
                      switch (state0) {
                        case 0:
                          nextValue = t4.$index(t2, t1._offset);
                        case 3:
                          state0 = 0;
                          t2 = J.getInterceptor$n(nextValue);
                          if (t2.$ge(nextValue, 56320) && t2.$le(nextValue, 57343)) {
                            value = J.$shl$n(t5.$sub(value, 55296), 10);
                            t1 = t2.$sub(nextValue, 56320);
                            if (typeof t1 !== "number")
                              throw H.iae(t1);
                            this._liblib3$_current = J.$add$ns(value, 65536 + t1);
                          } else {
                            if (t2.$ge(nextValue, 55296) && t2.$lt(nextValue, 56320))
                              t1._offset = t1._offset - 1;
                            t2 = this.replacementCodepoint;
                            if (t2 != null)
                              this._liblib3$_current = t2;
                            else
                              throw H.wrapException(new P.ArgumentError("Invalid UTF16 at " + H.S(t1._offset)));
                          }
                      }
                    else {
                      t2 = this.replacementCodepoint;
                      if (t2 != null)
                        this._liblib3$_current = t2;
                      else
                        throw H.wrapException(new P.ArgumentError("Invalid UTF16 at " + H.S(t1._offset)));
                    }
                }
          }
        return true;
    }
  }
},

_ListRange: {"": "IterableBase;_liblib3$_source,_offset,_liblib3$_length",
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._offset;
    t2 = this._liblib3$_length;
    if (t2 == null)
      throw H.iae(t2);
    return new P._ListRangeIteratorImpl(this._liblib3$_source, t1 - 1, t1 + t2);
  },
  get$length: function(_) {
    return this._liblib3$_length;
  },
  _ListRange$3: function(source, offset, $length) {
    var t1, t2, t3;
    t1 = this._offset;
    if (t1 < 0 || t1 > J.get$length$asx(this._liblib3$_source))
      throw H.wrapException(new P.RangeError("value " + t1));
    t2 = this._liblib3$_length;
    if (t2 != null) {
      if (t2 == null)
        throw t2.$lt();
      t3 = t2 < 0;
    } else
      t3 = false;
    if (t3)
      throw H.wrapException(new P.RangeError("value " + H.S(t2)));
    if (t2 == null)
      throw t2.$add();
    t1 = t2 + t1;
    if (t1 > J.get$length$asx(this._liblib3$_source))
      throw H.wrapException(new P.RangeError("value " + t1));
  },
  static: {
_ListRange$: function(source, offset, $length) {
  var t1 = J.get$length$asx(source) - offset;
  t1 = new P._ListRange(source, offset, t1);
  t1._ListRange$3(source, offset, $length);
  return t1;
}}

},

_ListRangeIteratorImpl: {"": "Object;_liblib3$_source,_offset,_liblib3$_end",
  get$current: function() {
    var t1, t2;
    t1 = this._liblib3$_source;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !H.isJsIndexable(t1, t1[init.dispatchPropertyName]))
      return this.get$current$bailout(1, t1);
    t2 = this._offset;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw H.ioore(t2);
    return t1[t2];
  },
  get$current$bailout: function(state0, t1) {
    return J.$index$asx(t1, this._offset);
  },
  moveNext$0: function() {
    var t1 = this._offset + 1;
    this._offset = t1;
    return t1 < this._liblib3$_end;
  }
}}],
["dsa", "package:cellsserver/cryptolib/dsa.dart", , A, {
Dsa: {"": "Object;_parameters,_g,_q,_p",
  sign$2: function(message, privateKey) {
    var k, km1, r, t1;
    k = A.Dsa__randomBitsLessThan(this._parameters.n, this._q);
    km1 = k.modInverse$1(this._q);
    r = this._g.modPow$2(k, this._p).mod$1(this._q);
    t1 = A.Dsa__hash(message);
    t1 = km1.multiply$1(t1.add$1(t1, privateKey.multiply$1(r)));
    return new A.DsaSignature(r, t1.remainder$1(t1, this._q));
  },
  fromSecret$1: function(secret) {
    var t1, t2, r, x;
    t1 = secret.bitLength$0(secret);
    t2 = this._q;
    if (t1 < t2.bitLength$0(t2) - 64) {
      t1 = "Insufficiently many bits in secret: was " + H.S(secret.bitLength$0(secret)) + " but expected at least ";
      t2 = this._q;
      throw H.wrapException(new P.ArgumentError(t1 + H.S(t2.bitLength$0(t2) - 64) + ". There is a 1 in 2^64 probability of this being an incorrect failure."));
    }
    t1 = this._q;
    r = Z.BigInteger$(null, null, null);
    r.fromInt$1(1);
    t1 = secret.mod$1(t1.subtract$1(r));
    r = Z.BigInteger$(null, null, null);
    r.fromInt$1(1);
    x = t1.add$1(t1, r);
    return new A.DsaKeyPair(x, this._g.modPow$2(x, this._p));
  },
  fromSecretUserPassword$2: function(user, password) {
    return this.fromSecret$1(Z.BigInteger$(M._CryptoUtils_bytesToHex(P.codepointsToUtf8(P._utf16CodeUnitsToCodepoints(new J._CodeUnits(M._CryptoUtils_bytesToBase64(P.codepointsToUtf8(P._utf16CodeUnitsToCodepoints(new J._CodeUnits("RAINBOWMAGIC" + user + password), 0, null, 65533), 0, null), false, false)), 0, null, 65533), 0, null)), 16, null));
  },
  Dsa$1: function(parameters) {
    this._parameters = $.get$Dsa_parameters3072();
    this._g = this._parameters.g;
    this._q = this._parameters.q;
    this._p = this._parameters.p;
  },
  static: {
"": "Dsa_parameters3072",
Dsa$: function(parameters) {
  var t1 = new A.Dsa(null, null, null, null);
  t1.Dsa$1(parameters);
  return t1;
},

Dsa__hash: function(message) {
  var hashFunction = M.SHA256$();
  hashFunction.add$1(hashFunction, X.byteArrayToByteList(message));
  return Z.BigInteger$(M._CryptoUtils_bytesToHex(hashFunction.close$0(hashFunction)), 16, null);
},

Dsa__randomBitsLessThan: function(numBits, lessThan) {
  var t1, count, max, value, i, r, t2, r0;
  if (C.JSInt_methods.$mod(numBits, 32) !== 0)
    throw H.wrapException(new P.ArgumentError("numBits must be multiple of 32"));
  t1 = numBits / 32;
  count = 0;
  do {
    max = Math.pow(2, 32) - 1;
    if (max < 0)
      H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
    if (max > 4294967295)
      max = 4294967295;
    value = Z.BigInteger$(C.JSInt_methods.toString$0(Math.random() * max >>> 0), 10, null);
    for (i = 1; i < t1; ++i, value = r0) {
      r = Z.BigInteger$(null, null, null);
      value.lShiftTo$2(32, r);
      max = Math.pow(2, 32) - 1;
      if (max < 0)
        H.throwExpression(new P.ArgumentError("negative max: " + H.S(max)));
      if (max > 4294967295)
        max = 4294967295;
      t2 = Z.BigInteger$(C.JSInt_methods.toString$0(Math.random() * max >>> 0), 10, null);
      r0 = Z.BigInteger$(null, null, null);
      r.bitwiseTo$3(t2, r.get$op_or(), r0);
    }
    ++count;
  } while (J.$ge$n(value.compareTo$1(value, lessThan), 0) && true && count <= 100);
  return value;
}}

},

DsaParameters: {"": "Object;g,q,p,n,l,strength"},

DsaSignature: {"": "Object;r,s<",
  toString$0: function(_) {
    return "(" + H.S(this.r) + "," + H.S(this.s) + ")";
  }
},

DsaKeyPair: {"": "Object;privateKey,publicKey"}}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_DateTime: function(date) {
  return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
},

convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
  var copies = [];
  return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
},

convertNativeToDart_AcceptStructuredClone_findSlot: {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  }
},

convertNativeToDart_AcceptStructuredClone_readSlot: {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(i);
    return t1[i];
  }
},

convertNativeToDart_AcceptStructuredClone_writeSlot: {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(i);
    t1[i] = x;
  }
},

convertNativeToDart_AcceptStructuredClone_walk: {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, key, $length, i;
    if (typeof e !== "object" || e === null || e.constructor !== Array || !!e.fixed$length)
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw H.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw H.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e) {
    var slot, copy, t1, key, $length, t2, i;
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.mustCopy_4 ? new Array($length) : e;
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      t2 = J.getInterceptor$ax(copy);
      i = 0;
      for (; i < $length; ++i)
        t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
      return copy;
    }
    return e;
  }
},

FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
  },
  forEach$1: function(_, f) {
    H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(index);
    J.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw H.wrapException(new P.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(new P.UnsupportedError("Cannot setRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  remove$1: function(_, element) {
    return false;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    var t1 = this.get$_filtered();
    return new H.ListIterator(t1, t1.length, 0, null);
  },
  $asListBase: null,
  $asList: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor(n);
    return typeof n === "object" && n !== null && !!t1.$isElement;
  }
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return J.remove$0$ax(el);
  }
}}],
["protocolClient", "package:cellsserver/cellsProtocolClient.dart", , B, {
ColorFacade: {"": "Object;r*,g@,b@"},

WorldObjectFacade: {"": "Object;color>,type>,utctimestamp?,id",
  setData$3: function(type, color, id) {
    var t1;
    this.type = type;
    this.color = color;
    this.id = this.id;
    this.utctimestamp = P.DateTime$_now().toUtc$0().millisecondsSinceEpoch;
    if ($.get$WorldObjectFacade_listOfFacades().containsKey$1(id)) {
      t1 = $.get$WorldObjectFacade_listOfFacades();
      t1.$index(t1, id).set$utctimestamp(0);
      t1 = $.get$WorldObjectFacade_listOfFacades();
      t1.remove$1(t1, id);
    }
    $.get$WorldObjectFacade_listOfFacades().putIfAbsent$2(id, new B.WorldObjectFacade_setData_closure(this));
  },
  isTooOld$0: function() {
    var t1 = new P.DateTime(Date.now(), false);
    if (t1.date === void 0)
      t1.date = new Date(t1.millisecondsSinceEpoch);
    t1.date;
    return t1.toUtc$0().millisecondsSinceEpoch - this.utctimestamp > 2000;
  },
  oldness$0: function() {
    var t1 = new P.DateTime(Date.now(), false);
    if (t1.date === void 0)
      t1.date = new Date(t1.millisecondsSinceEpoch);
    t1.date;
    return t1.toUtc$0().millisecondsSinceEpoch - this.utctimestamp;
  },
  static: {
"": "WorldObjectFacade_listOfFacades",
}

},

WorldObjectFacade_setData_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0;
  }
},

ClientCommEngine: {"": "Object;ws@,onDelayStatusChange,onErrorChange,onUpdatedChache,keyPair<,serverURL,username<,dsa,clientcache<,worldWidth<,worldHeight<,worldDepth<",
  onDelayStatusChange$1: function(arg0) {
    return this.onDelayStatusChange.call$1(arg0);
  },
  onErrorChange$1: function(arg0) {
    return this.onErrorChange.call$1(arg0);
  },
  onUpdatedChache$0: function() {
    return this.onUpdatedChache.call$0();
  },
  initWwebSocket$1: function(tokken) {
    var webSocket, t1, t2;
    webSocket = W.WebSocket_WebSocket("ws://" + this.serverURL + "/ws", null);
    C.EventStreamProvider_open.forTarget$2$useCapture;
    t1 = new W._EventStream(webSocket, C.EventStreamProvider_open._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, new B.ClientCommEngine_initWwebSocket_closure(this, tokken, webSocket), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
  },
  getView$4: function(constA, constB, runVar, runnerIMax) {
    var t1, depth, runnerI, found, runVarContext, t2, t3, t4, facade;
    if (typeof runnerIMax !== "number")
      throw H.iae(runnerIMax);
    t1 = this.clientcache;
    depth = 0;
    runnerI = 0;
    for (; found = null, runnerI < runnerIMax; ++runnerI) {
      runVarContext = runVar.call$4(runnerI, constA, constB, runnerIMax);
      t2 = J.getInterceptor$asx(runVarContext);
      t3 = t1.$index(t1, t2.$index(runVarContext, "x"));
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !H.isJsIndexable(t3, t3[init.dispatchPropertyName])))
        return this.getView$4$bailout(1, runnerI, constA, runVar, runnerIMax, constB, runVarContext, t2, t3, t1, depth);
      t4 = t2.$index(runVarContext, "y");
      if (t4 >>> 0 !== t4 || t4 >= t3.length)
        throw H.ioore(t4);
      t4 = t3[t4];
      if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !H.isJsIndexable(t4, t4[init.dispatchPropertyName])))
        return this.getView$4$bailout(2, runnerI, constA, runVar, runnerIMax, constB, runVarContext, t2, t4, t1, depth);
      t2 = t2.$index(runVarContext, "z");
      if (t2 >>> 0 !== t2 || t2 >= t4.length)
        throw H.ioore(t2);
      facade = t4[t2];
      if (facade != null && J.get$type$x(facade) === "X" && !facade.isTooOld$0()) {
        found = facade;
        break;
      }
      ++depth;
    }
    return H.makeLiteralMap(["found", found, "depth", depth]);
  },
  getView$4$bailout: function(state0, runnerI, constA, runVar, runnerIMax, constB, runVarContext, t2, t3, t1, depth) {
    switch (state0) {
      case 0:
        if (typeof runnerIMax !== "number")
          throw H.iae(runnerIMax);
        t1 = this.clientcache;
        depth = 0;
        runnerI = 0;
      default:
        var found, facade;
        L0:
          while (true)
            switch (state0) {
              case 0:
                found = null;
                if (!(runnerI < runnerIMax))
                  break L0;
                runVarContext = runVar.call$4(runnerI, constA, constB, runnerIMax);
                t2 = J.getInterceptor$asx(runVarContext);
                t3 = t1.$index(t1, t2.$index(runVarContext, "x"));
              case 1:
                state0 = 0;
                t3 = J.$index$asx(t3, t2.$index(runVarContext, "y"));
              case 2:
                state0 = 0;
                facade = J.$index$asx(t3, t2.$index(runVarContext, "z"));
                if (facade != null && J.get$type$x(facade) === "X" && !facade.isTooOld$0()) {
                  found = facade;
                  break L0;
                }
                ++depth;
                ++runnerI;
            }
        return H.makeLiteralMap(["found", found, "depth", depth]);
    }
  },
  _dealWithWebSocketMsg$1: function(msg) {
    var jsonMap, ex, exception, t1;
    try {
      jsonMap = P.parse(J.get$data$x(msg), null);
      if (!J.$eq(J.$index$asx(jsonMap, "username"), this.username))
        return;
      J.remove$1$ax(jsonMap, "username");
      J.forEach$1$ax(J.$index$asx(jsonMap, "data"), new B.ClientCommEngine__dealWithWebSocketMsg_closure(this));
    } catch (exception) {
      t1 = H.unwrapException(exception);
      ex = t1;
      H.Primitives_printString(J.toString$0(ex));
    }

  },
  get$_dealWithWebSocketMsg: function() {
    return new B.BoundClosure$1(this, "_dealWithWebSocketMsg$1", null);
  },
  commandWebSocketAuth$1: function(callback) {
    var jsonMap = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null);
    jsonMap.putIfAbsent$2("command", new B.ClientCommEngine_commandWebSocketAuth_closure("WebSocketAuth"));
    jsonMap.putIfAbsent$2("utc", new B.ClientCommEngine_commandWebSocketAuth_closure0());
    this._send$2(this._sign$1(P._JsonStringifier_stringify(jsonMap)), callback);
  },
  _sign$1: function(json) {
    var signature, jsonMapWithSign;
    signature = this.dsa.sign$2(X.base64Decode(M._CryptoUtils_bytesToBase64(P.codepointsToUtf8(P._utf16CodeUnitsToCodepoints(new J._CodeUnits(json), 0, null, 65533), 0, null), false, false)), this.keyPair.privateKey);
    jsonMapWithSign = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null);
    jsonMapWithSign.putIfAbsent$2("username", new B.ClientCommEngine__sign_closure(this));
    jsonMapWithSign.putIfAbsent$2("pubKey", new B.ClientCommEngine__sign_closure0(this));
    jsonMapWithSign.putIfAbsent$2("msg", new B.ClientCommEngine__sign_closure1(json));
    jsonMapWithSign.putIfAbsent$2("signR", new B.ClientCommEngine__sign_closure2(signature));
    jsonMapWithSign.putIfAbsent$2("signS", new B.ClientCommEngine__sign_closure3(signature));
    return P._JsonStringifier_stringify(jsonMapWithSign);
  },
  _send$2: function(msg, callback) {
    var request, t1, t2;
    request = new XMLHttpRequest();
    C.EventStreamProvider_readystatechange.forTarget$2$useCapture;
    t1 = new W._EventStream(request, C.EventStreamProvider_readystatechange._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, new B.ClientCommEngine__send_closure(callback, request), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    C.HttpRequest_methods.open$3$async(request, "POST", "http://" + this.serverURL + "/commands", false);
    request.send(msg);
  },
  static: {
"": "ClientCommEngine_commandNode,ClientCommEngine_webSocketNode,ClientCommEngine_emptyChar,ClientCommEngine_somethingChar,ClientCommEngine_somethingInbetweenChar,ClientCommEngine_somethingFarChar,ClientCommEngine_somethingFarFarChar",
ClientCommEngine_runVarXY_1: function(runnerI, constA, constB, runnerIMax) {
  return H.makeLiteralMap(["x", constB, "y", constA, "z", runnerI]);
},

ClientCommEngine_runVarXY_6: function(runnerI, constA, constB, runnerIMax) {
  return H.makeLiteralMap(["x", constB, "y", constA, "z", J.$sub$n(J.$sub$n(runnerIMax, 1), runnerI)]);
},

ClientCommEngine_runVarZY_2: function(runnerI, constA, constB, runnerIMax) {
  return H.makeLiteralMap(["x", J.$sub$n(J.$sub$n(runnerIMax, 1), runnerI), "y", constA, "z", constB]);
},

ClientCommEngine_runVarZY_5: function(runnerI, constA, constB, runnerIMax) {
  return H.makeLiteralMap(["x", runnerI, "y", constA, "z", constB]);
},

ClientCommEngine_runVarXZ_3: function(runnerI, constA, constB, runnerIMax) {
  return H.makeLiteralMap(["x", constB, "y", runnerI, "z", constA]);
},

ClientCommEngine_runVarZX_4: function(runnerI, constA, constB, runnerIMax) {
  return H.makeLiteralMap(["x", constA, "y", J.$sub$n(J.$sub$n(runnerIMax, 1), runnerI), "z", constB]);
}}

},

ClientCommEngine_initWwebSocket_closure: {"": "Closure;this_0,tokken_1,webSocket_2",
  call$1: function(e) {
    var jsonMap, t1, t2, x, y, t3, z;
    jsonMap = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    jsonMap.putIfAbsent$2("command", new B.ClientCommEngine_initWwebSocket__closure());
    jsonMap.putIfAbsent$2("data", new B.ClientCommEngine_initWwebSocket__closure0(this.tokken_1));
    t1 = this.webSocket_2;
    t1.send(P._JsonStringifier_stringify(jsonMap));
    for (t2 = this.this_0, x = 0; x < t2.get$worldWidth(); ++x) {
      t2.get$clientcache().putIfAbsent$2(x, new B.ClientCommEngine_initWwebSocket__closure1());
      for (y = 0; y < t2.get$worldHeight(); ++y) {
        t3 = t2.get$clientcache();
        t3.$index(t3, x).putIfAbsent$2(y, new B.ClientCommEngine_initWwebSocket__closure2());
        for (z = 0; z < t2.get$worldDepth(); ++z) {
          t3 = t2.get$clientcache();
          J.$index$asx(t3.$index(t3, x), y).putIfAbsent$2(z, new B.ClientCommEngine_initWwebSocket__closure3());
        }
      }
    }
    t2.set$ws(t1);
    t1 = t2.get$ws();
    t1.get$onMessage;
    C.EventStreamProvider_message.forTarget$2$useCapture;
    t1 = new W._EventStream(t1, C.EventStreamProvider_message._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = t2.get$_dealWithWebSocketMsg();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, t2, t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
  }
},

ClientCommEngine_initWwebSocket__closure: {"": "Closure;",
  call$0: function() {
    return "tokken";
  }
},

ClientCommEngine_initWwebSocket__closure0: {"": "Closure;tokken_3",
  call$0: function() {
    return this.tokken_3;
  }
},

ClientCommEngine_initWwebSocket__closure1: {"": "Closure;",
  call$0: function() {
    return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, [P.Map, J.JSInt, B.WorldObjectFacade]);
  }
},

ClientCommEngine_initWwebSocket__closure2: {"": "Closure;",
  call$0: function() {
    return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, B.WorldObjectFacade);
  }
},

ClientCommEngine_initWwebSocket__closure3: {"": "Closure;",
  call$0: function() {
    var t1 = new B.ColorFacade(null, null, null);
    t1.r = 0;
    t1.g = 0;
    t1.b = 0;
    return new B.WorldObjectFacade(t1, "", 0, -1);
  }
},

ClientCommEngine__dealWithWebSocketMsg_closure: {"": "Closure;this_0",
  call$2: function(command, value) {
    var jsonMap, t1;
    switch (command) {
      case "ticksLeft":
        t1 = this.this_0;
        t1.onDelayStatusChange$1(value);
        if (J.$eq(value, 0))
          t1.commandWebSocketAuth$1(new B.ClientCommEngine__dealWithWebSocketMsg__closure(t1));
        break;
      case "viewArea":
        jsonMap = value;
        t1 = this.this_0;
        J.forEach$1$ax(jsonMap, new B.ClientCommEngine__dealWithWebSocketMsg__closure0(t1));
        t1.onUpdatedChache$0();
        break;
      case "error":
        this.this_0.onErrorChange$1(value);
        break;
      default:
    }
  }
},

ClientCommEngine__dealWithWebSocketMsg__closure: {"": "Closure;this_1",
  call$1: function(tokken) {
    return this.this_1.initWwebSocket$1(H.Primitives_parseInt(tokken, null, null));
  }
},

ClientCommEngine__dealWithWebSocketMsg__closure0: {"": "Closure;this_2",
  call$2: function(k, v) {
    var vmap, toWorkOn, color, t1;
    vmap = v;
    t1 = this.this_2.get$clientcache();
    toWorkOn = J.$index$asx(J.$index$asx(t1.$index(t1, J.$index$asx(vmap, "x")), J.$index$asx(vmap, "y")), J.$index$asx(vmap, "z"));
    color = new B.ColorFacade(null, null, null);
    J.set$r$x(color, J.$index$asx(J.$index$asx(J.$index$asx(vmap, "object"), "color"), "r"));
    color.set$g(J.$index$asx(J.$index$asx(J.$index$asx(vmap, "object"), "color"), "g"));
    color.set$b(J.$index$asx(J.$index$asx(J.$index$asx(vmap, "object"), "color"), "b"));
    toWorkOn.setData$3("X", color, J.$index$asx(J.$index$asx(vmap, "object"), "id"));
    toWorkOn.set$utctimestamp(P.DateTime$_now().toUtc$0().millisecondsSinceEpoch);
  }
},

ClientCommEngine_commandWebSocketAuth_closure: {"": "Closure;command_0",
  call$0: function() {
    return this.command_0;
  }
},

ClientCommEngine_commandWebSocketAuth_closure0: {"": "Closure;",
  call$0: function() {
    return P.DateTime$_now().toUtc$0().millisecondsSinceEpoch;
  }
},

ClientCommEngine__sign_closure: {"": "Closure;this_0",
  call$0: function() {
    return this.this_0.get$username();
  }
},

ClientCommEngine__sign_closure0: {"": "Closure;this_1",
  call$0: function() {
    var t1 = this.this_1.get$keyPair().publicKey;
    return t1.toString$1(t1, 16);
  }
},

ClientCommEngine__sign_closure1: {"": "Closure;json_2",
  call$0: function() {
    return this.json_2;
  }
},

ClientCommEngine__sign_closure2: {"": "Closure;signature_3",
  call$0: function() {
    var t1 = this.signature_3.r;
    return t1.toString$1(t1, 16);
  }
},

ClientCommEngine__sign_closure3: {"": "Closure;signature_4",
  call$0: function() {
    var t1 = this.signature_4.s;
    return t1.toString$1(t1, 16);
  }
},

ClientCommEngine__send_closure: {"": "Closure;callback_0,request_1",
  call$1: function(_) {
    var t1, t2;
    t1 = this.request_1;
    t2 = t1.readyState;
    if (t2 == null ? 4 == null : t2 === 4) {
      t2 = t1.status;
      t2 = t2 === 200 || t2 === 0;
    } else
      t2 = false;
    if (t2)
      this.callback_0.call$1(t1.responseText);
  }
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$_processWorkerMessage(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$_throwFormatException(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$toStringWrapper(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$invokeClosure(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.typeNameInChrome$closure = H.typeNameInChrome$closure = new H.Closure$typeNameInChrome(H.typeNameInChrome, "typeNameInChrome$closure");
init.globalFunctions.typeNameInSafari$closure = H.typeNameInSafari$closure = new H.Closure$typeNameInSafari(H.typeNameInSafari, "typeNameInSafari$closure");
init.globalFunctions.typeNameInOpera$closure = H.typeNameInOpera$closure = new H.Closure$typeNameInOpera(H.typeNameInOpera, "typeNameInOpera$closure");
init.globalFunctions.typeNameInFirefox$closure = H.typeNameInFirefox$closure = new H.Closure$typeNameInFirefox(H.typeNameInFirefox, "typeNameInFirefox$closure");
init.globalFunctions.typeNameInIE$closure = H.typeNameInIE$closure = new H.Closure$typeNameInIE(H.typeNameInIE, "typeNameInIE$closure");
init.globalFunctions.constructorNameFallback$closure = H.constructorNameFallback$closure = new H.Closure$constructorNameFallback(H.constructorNameFallback, "constructorNameFallback$closure");
init.globalFunctions.callDartFunctionWith1Arg$closure = H.callDartFunctionWith1Arg$closure = new H.Closure$callDartFunctionWith1Arg(H.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
init.globalFunctions.Viewer_getHeight$closure = B.Viewer_getHeight$closure = new B.Closure$getHeight(B.Viewer_getHeight, "Viewer_getHeight$closure");
init.globalFunctions.Viewer_getWidth$closure = B.Viewer_getWidth$closure = new B.Closure$getWidth(B.Viewer_getWidth, "Viewer_getWidth$closure");
init.globalFunctions.Viewer_getDepth$closure = B.Viewer_getDepth$closure = new B.Closure$getDepth(B.Viewer_getDepth, "Viewer_getDepth$closure");
init.globalFunctions.Viewer_getOffsetX$closure = B.Viewer_getOffsetX$closure = new B.Closure$getOffsetX(B.Viewer_getOffsetX, "Viewer_getOffsetX$closure");
init.globalFunctions.Viewer_getOffsetY$closure = B.Viewer_getOffsetY$closure = new B.Closure$getOffsetY(B.Viewer_getOffsetY, "Viewer_getOffsetY$closure");
init.globalFunctions.Viewer_getOffsetZ$closure = B.Viewer_getOffsetZ$closure = new B.Closure$getOffsetZ(B.Viewer_getOffsetZ, "Viewer_getOffsetZ$closure");
init.globalFunctions.main$closure = B.main$closure = new B.Closure$main(B.main, "main$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new P.Closure$_asyncRunCallback(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new P.Closure$_defaultEquals(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new P.Closure$_defaultHashCode(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.identical$closure = P.identical$closure = new P.Closure$identical(P.identical, "identical$closure");
init.globalFunctions.ClientCommEngine_runVarXY_1$closure = B.ClientCommEngine_runVarXY_1$closure = new B.Closure$runVarXY_1(B.ClientCommEngine_runVarXY_1, "ClientCommEngine_runVarXY_1$closure");
init.globalFunctions.ClientCommEngine_runVarXY_6$closure = B.ClientCommEngine_runVarXY_6$closure = new B.Closure$runVarXY_6(B.ClientCommEngine_runVarXY_6, "ClientCommEngine_runVarXY_6$closure");
init.globalFunctions.ClientCommEngine_runVarZY_2$closure = B.ClientCommEngine_runVarZY_2$closure = new B.Closure$runVarZY_2(B.ClientCommEngine_runVarZY_2, "ClientCommEngine_runVarZY_2$closure");
init.globalFunctions.ClientCommEngine_runVarZY_5$closure = B.ClientCommEngine_runVarZY_5$closure = new B.Closure$runVarZY_5(B.ClientCommEngine_runVarZY_5, "ClientCommEngine_runVarZY_5$closure");
init.globalFunctions.ClientCommEngine_runVarXZ_3$closure = B.ClientCommEngine_runVarXZ_3$closure = new B.Closure$runVarXZ_3(B.ClientCommEngine_runVarXZ_3, "ClientCommEngine_runVarXZ_3$closure");
init.globalFunctions.ClientCommEngine_runVarZX_4$closure = B.ClientCommEngine_runVarZX_4$closure = new B.Closure$runVarZX_4(B.ClientCommEngine_runVarZX_4, "ClientCommEngine_runVarZX_4$closure");
// Runtime type support
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray0.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray0.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray0.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$i = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSNumber.prototype;
  }
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ins = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSNumber.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C_CloseToken = new H.CloseToken();
C.C_JsonCodec = new P.JsonCodec();
C.C_UnknownJavaScriptObject = new J.UnknownJavaScriptObject();
C.C__Random = new P._Random();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_change = new W.EventStreamProvider("change");
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_message = new W.EventStreamProvider("message");
C.EventStreamProvider_open = new W.EventStreamProvider("open");
C.EventStreamProvider_readystatechange = new W.EventStreamProvider("readystatechange");
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray0.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_6JR = Isolate.makeConstantList([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
C.List_empty = Isolate.makeConstantList([]);
C.NodeList_methods = W.NodeList.prototype;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.interceptorsByTag = null;
$.leafTags = null;
$.interceptorToTag = null;
$.BigInteger_dbits = null;
$.BigInteger_BI_DB = null;
$.BigInteger_BI_DM = null;
$.BigInteger_BI_DV = null;
$.BigInteger_BI_FP = null;
$.BigInteger_BI_FV = null;
$.BigInteger_BI_F1 = null;
$.BigInteger_BI_F2 = null;
$.commEngine = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
J.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
J.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mod$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$mod(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$not$i = function(receiver) {
  if (typeof receiver == "number" && Math.floor(receiver) == receiver)
    return ~receiver >>> 0;
  return J.getInterceptor$i(receiver).$not(receiver);
};
J.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return J.getInterceptor$n(receiver).$or(receiver, a0);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$shr$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shr(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.clamp$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).clamp$0(receiver);
};
J.floor$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).floor$0(receiver);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$color$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$color(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$isNaN$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isNaN(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$r$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$r(receiver);
};
J.get$selected$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selected(receiver);
};
J.get$selectedOptions$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selectedOptions(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
J.set$background$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$background(receiver, value);
};
J.set$color$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$color(receiver, value);
};
J.set$r$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$r(receiver, value);
};
J.set$selectedIndex$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$selectedIndex(receiver, value);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
$.mapTypeToInterceptor = [];
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return H.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "xy_1", "Viewer_xy_1", "get$Viewer_xy_1", function() {
  return H.makeLiteralMap(["Name", "XY_1", "iMaxVarA", B.Viewer_getHeight$closure, "iMaxVarB", B.Viewer_getWidth$closure, "VarAOffset", B.Viewer_getOffsetX$closure, "VarBOffset", B.Viewer_getOffsetY$closure, "iMaxRunner", B.Viewer_getDepth$closure, "runnerFunc", B.ClientCommEngine_runVarXY_1$closure, "left", "ZY_5", "right", "ZY_2", "up", "XZ_3", "down", "XZ_4"]);
});
Isolate.$lazy($, "xy_6", "Viewer_xy_6", "get$Viewer_xy_6", function() {
  return H.makeLiteralMap(["Name", "XY_6", "iMaxVarA", B.Viewer_getHeight$closure, "iMaxVarB", B.Viewer_getWidth$closure, "VarAOffset", B.Viewer_getOffsetY$closure, "VarBOffset", B.Viewer_getOffsetX$closure, "iMaxRunner", B.Viewer_getDepth$closure, "runnerFunc", B.ClientCommEngine_runVarXY_6$closure, "left", "ZY_2", "right", "ZY_5", "up", "XZ_4", "down", "XZ_3"]);
});
Isolate.$lazy($, "zy_2", "Viewer_zy_2", "get$Viewer_zy_2", function() {
  return H.makeLiteralMap(["Name", "ZY_2", "iMaxVarA", B.Viewer_getDepth$closure, "iMaxVarB", B.Viewer_getHeight$closure, "VarAOffset", B.Viewer_getOffsetZ$closure, "VarBOffset", B.Viewer_getOffsetY$closure, "iMaxRunner", B.Viewer_getWidth$closure, "runnerFunc", B.ClientCommEngine_runVarZY_2$closure, "left", "XY_1", "right", "XY_6", "up", "XZ_3", "down", "XZ_4"]);
});
Isolate.$lazy($, "zy_5", "Viewer_zy_5", "get$Viewer_zy_5", function() {
  return H.makeLiteralMap(["Name", "ZY_5", "iMaxVarA", B.Viewer_getHeight$closure, "iMaxVarB", B.Viewer_getDepth$closure, "VarAOffset", B.Viewer_getOffsetY$closure, "VarBOffset", B.Viewer_getOffsetZ$closure, "iMaxRunner", B.Viewer_getWidth$closure, "runnerFunc", B.ClientCommEngine_runVarZY_5$closure, "left", "XY_6", "right", "XY_1", "up", "XZ_3", "down", "XZ_4"]);
});
Isolate.$lazy($, "xz_4", "Viewer_xz_4", "get$Viewer_xz_4", function() {
  return H.makeLiteralMap(["Name", "XZ_4", "iMaxVarA", B.Viewer_getWidth$closure, "iMaxVarB", B.Viewer_getDepth$closure, "VarAOffset", B.Viewer_getOffsetX$closure, "VarBOffset", B.Viewer_getOffsetZ$closure, "iMaxRunner", B.Viewer_getHeight$closure, "runnerFunc", B.ClientCommEngine_runVarZX_4$closure, "left", "ZY_5", "right", "ZY_2", "up", "XY_1", "down", "XY_6"]);
});
Isolate.$lazy($, "xz_3", "Viewer_xz_3", "get$Viewer_xz_3", function() {
  return H.makeLiteralMap(["Name", "XZ_3", "iMaxVarA", B.Viewer_getDepth$closure, "iMaxVarB", B.Viewer_getWidth$closure, "VarAOffset", B.Viewer_getOffsetZ$closure, "VarBOffset", B.Viewer_getOffsetX$closure, "iMaxRunner", B.Viewer_getHeight$closure, "runnerFunc", B.ClientCommEngine_runVarXZ_3$closure, "left", "ZY_2", "right", "ZY_5", "up", "XY_6", "down", "XY_1"]);
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return new P.Expando("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  return new P._DefaultZone(null, 0, 0, false);
});
Isolate.$lazy($, "_toStringList", "ListMixin__toStringList", "get$ListMixin__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "parameters3072", "Dsa_parameters3072", "get$Dsa_parameters3072", function() {
  var t1, t2;
  t1 = Z.BigInteger$("90066455B5CFC38F9CAA4A48B4281F292C260FEEF01FD61037E56258A7795A1C7AD46076982CE6BB956936C6AB4DCFE05E6784586940CA544B9B2140E1EB523F009D20A7E7880E4E5BFA690F1B9004A27811CD9904AF70420EEFD6EA11EF7DA129F58835FF56B89FAA637BC9AC2EFAAB903402229F491D8D3485261CD068699B6BA58A1DDBBEF6DB51E8FE34E8A78E542D7BA351C21EA8D8F1D29F5D5D15939487E27F4416B0CA632C59EFD1B1EB66511A5A0FBF615B766C5862D0BD8A3FE7A0E0DA0FB2FE1FCB19E8F9996A8EA0FCCDE538175238FC8B0EE6F29AF7F642773EBE8CD5402415A01451A840476B2FCEB0E388D30D4B376C37FE401C2A2C2F941DAD179C540C1C8CE030D460C4D983BE9AB0B20F69144C1AE13F9383EA1C08504FB0BF321503EFE43488310DD8DC77EC5B8349B8BFE97C2C560EA878DE87C11E3D597F1FEA742D73EEC7F37BE43949EF1A0D15C3F3E3FC0A8335617055AC91328EC22B50FC15B941D3D1624CD88BC25F3E941FDDC6200689581BFEC416B4B2CB73", 16, null);
  t2 = Z.BigInteger$("CFA0478A54717B08CE64805B76E5B14249A77A4838469DF7F7DC987EFCCFB11D", 16, null);
  return new A.DsaParameters(Z.BigInteger$("5E5CBA992E0A680D885EB903AEA78E4A45A469103D448EDE3B7ACCC54D521E37F84A4BDD5B06B0970CC2D2BBB715F7B82846F9A0C393914C792E6A923E2117AB805276A975AADB5261D91673EA9AAFFEECBFA6183DFCB5D3B7332AA19275AFA1F8EC0B60FB6F66CC23AE4870791D5982AAD1AA9485FD8F4A60126FEB2CF05DB8A7F0F09B3397F3937F2E90B9E5B9C9B6EFEF642BC48351C46FB171B9BFA9EF17A961CE96C7E7A7CC3D3D03DFAD1078BA21DA425198F07D2481622BCE45969D9C4D6063D72AB7A0F08B2F49A7CC6AF335E08C4720E31476B67299E231F8BD90B39AC3AE3BE0C6B6CACEF8289A2E2873D58E51E029CAFBD55E6841489AB66B5B4B9BA6E2F784660896AFF387D92844CCB8B69475496DE19DA2E58259B090489AC8E62363CDF82CFD8EF2A427ABCD65750B506F56DDE3B988567A88126B914D7828E2B63A6D7ED0747EC59E0E0A23CE7D8A74C1D2C2A7AFB6A29799620F00E11C33787F7DED3B30E1A22D09F1FBDA1ABBBFBF25CAE05A13F812E34563F99410E73B", 16, null), t2, t1, 256, 3072, 128);
});
Isolate.$lazy($, "listOfFacades", "WorldObjectFacade_listOfFacades", "get$WorldObjectFacade_listOfFacades", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, B.WorldObjectFacade);
});
// Native classes
H.defineNativeMethods("ArrayBuffer|DOMError|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedNumberList", J.Interceptor);

H.defineNativeMethods("HTMLAppletElement|HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLLabelElement|HTMLLegendElement|HTMLMapElement|HTMLMarqueeElement|HTMLMediaElement|HTMLMenuElement|HTMLMetaElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLVideoElement", W.HtmlElement);

H.defineNativeMethodsNonleaf("HTMLElement", W.HtmlElement);

H.defineNativeMethods("HTMLAnchorElement", W.AnchorElement);

H.defineNativeMethods("Blob|File", W.Blob);

H.defineNativeMethods("HTMLButtonElement", W.ButtonElement);

H.defineNativeMethods("CDATASection|CharacterData|Comment|ProcessingInstruction|Text", W.CharacterData);

H.defineNativeMethods("CompositionEvent", W.CompositionEvent);

H.defineNativeMethods("CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties", W.CssStyleDeclaration);

H.defineNativeMethods("HTMLDataListElement", W.DataListElement);

H.defineNativeMethods("DOMException", W.DomException);

H.defineNativeMethodsNonleaf("Element", W.Element);

H.defineNativeMethods("HTMLEmbedElement", W.EmbedElement);

H.defineNativeMethods("AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent", W.Event);

H.defineNativeMethodsNonleaf("Event", W.Event);

H.defineNativeMethods("MediaStream|WebSocket", W.EventTarget);

H.defineNativeMethodsNonleaf("EventTarget", W.EventTarget);

H.defineNativeMethods("HTMLFieldSetElement", W.FieldSetElement);

H.defineNativeMethods("HTMLFormElement", W.FormElement);

H.defineNativeMethods("HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection", W.HtmlCollection);

H.defineNativeMethods("XMLHttpRequest", W.HttpRequest);

H.defineNativeMethods("HTMLInputElement", W.InputElement);

H.defineNativeMethods("HTMLKeygenElement", W.KeygenElement);

H.defineNativeMethods("HTMLLIElement", W.LIElement);

H.defineNativeMethods("HTMLLinkElement", W.LinkElement);

H.defineNativeMethods("MessageEvent", W.MessageEvent);

H.defineNativeMethods("HTMLMeterElement", W.MeterElement);

H.defineNativeMethods("MIDIMessageEvent", W.MidiMessageEvent);

H.defineNativeMethods("Document|DocumentFragment|DocumentType|Entity|HTMLDocument|Notation|SVGDocument|ShadowRoot", W.Node);

H.defineNativeMethodsNonleaf("Node", W.Node);

H.defineNativeMethods("NodeList|RadioNodeList", W.NodeList);

H.defineNativeMethods("HTMLOListElement", W.OListElement);

H.defineNativeMethods("HTMLObjectElement", W.ObjectElement);

H.defineNativeMethods("HTMLOptionElement", W.OptionElement);

H.defineNativeMethods("HTMLOutputElement", W.OutputElement);

H.defineNativeMethods("HTMLParamElement", W.ParamElement);

H.defineNativeMethods("HTMLProgressElement", W.ProgressElement);

H.defineNativeMethods("HTMLScriptElement", W.ScriptElement);

H.defineNativeMethods("HTMLSelectElement", W.SelectElement);

H.defineNativeMethods("HTMLSourceElement", W.SourceElement);

H.defineNativeMethods("HTMLStyleElement", W.StyleElement);

H.defineNativeMethods("HTMLTextAreaElement", W.TextAreaElement);

H.defineNativeMethods("TextEvent", W.TextEvent);

H.defineNativeMethods("DragEvent|FocusEvent|KeyboardEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|SVGZoomEvent|TouchEvent|WheelEvent", W.UIEvent);

H.defineNativeMethodsNonleaf("UIEvent", W.UIEvent);

H.defineNativeMethods("DOMWindow|Window", W.Window);

H.defineNativeMethodsNonleaf("XMLHttpRequestEventTarget", W.XmlHttpRequestEventTarget);

H.defineNativeMethods("Attr", W._Attr);

H.defineNativeMethods("SVGFEColorMatrixElement", P.FEColorMatrixElement);

H.defineNativeMethods("SVGFETurbulenceElement", P.FETurbulenceElement);

H.defineNativeMethods("SVGScriptElement", P.ScriptElement0);

H.defineNativeMethods("SVGStyleElement", P.StyleElement0);

H.defineNativeMethods("SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGGraphicsElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGSetElement|SVGStopElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement", P.SvgElement);

H.defineNativeMethodsNonleaf("SVGElement", P.SvgElement);

H.defineNativeMethods("DataView", P.TypedData);

H.defineNativeMethodsExtended("ArrayBufferView", P.TypedData, [P.TypedData_ListMixin, P.TypedData_ListMixin_FixedLengthListMixin, P.TypedData_ListMixin0, P.TypedData_ListMixin_FixedLengthListMixin0, P.TypedData_ListMixin1, P.TypedData_ListMixin_FixedLengthListMixin1, P.TypedData_ListMixin2, P.TypedData_ListMixin_FixedLengthListMixin2, P.TypedData_ListMixin3, P.TypedData_ListMixin_FixedLengthListMixin3, P.TypedData_ListMixin4, P.TypedData_ListMixin_FixedLengthListMixin4, P.TypedData_ListMixin5, P.TypedData_ListMixin_FixedLengthListMixin5, P.TypedData_ListMixin6, P.TypedData_ListMixin_FixedLengthListMixin6, P.TypedData_ListMixin7, P.TypedData_ListMixin_FixedLengthListMixin7, P.Int64List, P.Uint64List]);

H.defineNativeMethods("Float32Array", P.Float32List);

H.defineNativeMethods("Float64Array", P.Float64List);

H.defineNativeMethods("Int16Array", P.Int16List);

H.defineNativeMethods("Int32Array", P.Int32List);

H.defineNativeMethods("Int8Array", P.Int8List);

H.defineNativeMethods("Uint16Array", P.Uint16List);

H.defineNativeMethods("Uint32Array", P.Uint32List);

H.defineNativeMethods("CanvasPixelArray|Uint8ClampedArray", P.Uint8ClampedList);

H.defineNativeMethodsNonleaf("Uint8Array", P.Uint8List);


init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function makeConstructor() {
    var str = "{\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var property in properties) {
      if (hasOwnProperty.call(properties, property)) {
        str += "this." + property + "= properties." + property + ";\n";
      }
    }
    str += "}\n";
    return new Function("properties", str);
  };
  var constructor = makeConstructor();
  return makeConstructor.prototype = new constructor(properties);
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(B.main$closure); });
  } else {
    H.startRootIsolate(B.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
        if (reflectable) {
          prototype["get$" + accessorName].$reflectable = 1;
        }
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
        if (reflectable) {
          prototype["set$" + accessorName].$reflectable = 1;
        }
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var globalObject = isolateProperties;
        if (desc instanceof Array) {
          globalObject = desc[0] || isolateProperties;
          desc = desc[1];
        }
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return this." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = arguments.callee.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
})()

//# sourceMappingURL=cellsweb.dart.js.map
//@ sourceMappingURL=cellsweb.dart.js.map
